{"version":3,"file":"static/js/497.f03d79e1.chunk.js","mappings":"6LAKA,MAqHA,EArHgBA,KACZ,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,IAC9BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,IACnCG,GAAcC,EAAAA,EAAAA,UACdC,GAAiBD,EAAAA,EAAAA,UACvB,IAAIE,GAAcF,EAAAA,EAAAA,QAAO,MAGzB,MAMMG,EAAYA,KACdC,MAAM,gBAGN,MAAMC,EAAS,IAAIC,IAAJ,CAAW,0CAG1BJ,EAAYK,QAAUC,EAAAA,EAAMC,KAAKJ,GAEjCH,EAAYK,QAAQG,QAAQ,CAAC,GAAIC,IAC7BC,QAAQC,IAAI,gBAAiBF,GAG7BT,EAAYK,QAAQO,KAAK,aAAc,CAAC,EAAGC,KAAKC,UAAU,CAAE,QAAW,WAGvEd,EAAYK,QAAQU,UAAU,oBAAqBC,IAC/CN,QAAQC,IAAIK,EAAWC,MACvBC,EAAcL,KAAKM,MAAMH,EAAWC,MAAMA,KAAKG,QAAQ,IAO3DpB,EAAYK,QAAQU,UAAU,kBAAmBC,IAC7CN,QAAQC,IAAIK,EAAWC,MACvBC,EAAcL,KAAKM,MAAMH,EAAWC,MAAMA,KAAKG,QAAQ,GAGzD,GACJ,EAIAF,EAAiBE,IACnBxB,GAAayB,GAAiB,IAAIA,EAAcD,IAAS,EA6B7D,OACIE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACAC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMF,UACjBC,EAAAA,EAAAA,KAAA,OAAKE,GAAG,WAAUH,UACdF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,OAAMF,SAAA,EACjBC,EAAAA,EAAAA,KAAA,UAAQG,KAAK,SAASD,GAAG,gBAAgBE,QA5ExCC,KACbrC,GAAU,GACVQ,GAAW,EA0E4DuB,SAAC,SAC3DhC,IACGiC,EAAAA,EAAAA,KAAA,OAAKE,GAAG,YAAYD,UAAU,OAAMF,UAChCF,EAAAA,EAAAA,MAAA,OAAKK,GAAG,gBAAeH,SAAA,EACnBF,EAAAA,EAAAA,MAAA,OAAKK,GAAG,cAAaH,SAAA,EACjBC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,yBACNC,EAAAA,EAAAA,KAAA,UAAQG,KAAK,SAASD,GAAG,QAAQE,QAnB9CE,KACX/B,EAAYK,SACZL,EAAYK,QAAQ0B,aAExBtC,GAAU,GACVG,EAAY,GAAG,EAckE4B,SAAC,UAE1DC,EAAAA,EAAAA,KAAA,OAAKE,GAAG,eAAeK,IAAKjC,EAAeyB,SACtC7B,EAASsC,KAAI,CAACC,EAAKC,KAChBV,EAAAA,EAAAA,KAAA,OAAiBC,UAAU,WAAUF,SAAEU,GAA7BC,QAGlBb,EAAAA,EAAAA,MAAA,OAAKK,GAAG,gBAAgBD,UAAU,eAAcF,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,SACIG,KAAK,OACLD,GAAG,WACHK,IAAKnC,EACLuC,YAAY,uDAEhBX,EAAAA,EAAAA,KAAA,UAAQG,KAAK,SAASD,GAAG,eAAeE,QAlDjDQ,KACnB,MAAMC,EAAWzC,EAAYQ,QAAQkC,MAAMC,OACnB,IAApBF,EAASG,QAMbvB,EAAcoB,GAGVtC,EAAYK,SACZL,EAAYK,QAAQO,KAAK,eAAgB,CAAC,EAAGC,KAAKC,UAAU,CAAE,QAAYwB,MAT1EpC,MAAM,uEAUV,EAqC4FsB,SAAC,iCAQ7FC,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACC,GAAG,WAAUnB,SAAC,cACjB,EC7GX,EANoBoB,KAEhBnB,EAAAA,EAAAA,KAAClC,EAAO,G","sources":["components/ws/ChatBot.jsx","pages/ws/ChatBotPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Stomp } from '@stomp/stompjs';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ChatBot = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [messages, setMessages] = useState([]);\r\n    const questionRef = useRef();\r\n    const chatContentRef = useRef();\r\n    let stompClient = useRef(null); // stompClient는 useRef로 관리\r\n\r\n    // 채팅창 열기\r\n    const openChat = () => {\r\n        setIsOpen(true);\r\n        onConnect();\r\n    };\r\n\r\n    // WebSocket 연결 및 STOMP 설정\r\n    const onConnect = () => {\r\n        alert(\"접속\");\r\n\r\n        // 1. WebSocket 연결\r\n        const socket = new SockJS('http://43.201.20.172:8090/chatEndpoint');\r\n        \r\n        // 2. STOMP 연결\r\n        stompClient.current = Stomp.over(socket);\r\n        \r\n        stompClient.current.connect({}, (stomFr) => {\r\n            console.log(\"Connected: ->\", stomFr);\r\n\r\n            // 3. 서버로 메시지 보내기\r\n            stompClient.current.send(\"/app/hello\", {}, JSON.stringify({ 'content': 'GUEST' }));\r\n\r\n            // 4. 서버에서 메시지 받기 (첫번째 메시지)\r\n            stompClient.current.subscribe(\"/topic/greetings\", (botMessage) => {\r\n                console.log(botMessage.body);\r\n                showMessageFn(JSON.parse(botMessage.body).body.message);\r\n\r\n\r\n            });\r\n\r\n            // 5. 클라이언트에서 서버로 메시지 보내기 (질문을 보낼 수 있도록)\r\n\r\n            stompClient.current.subscribe(\"/topic/message\", (botMessage) => {\r\n                console.log(botMessage.body);\r\n                showMessageFn(JSON.parse(botMessage.body).body.message);\r\n\r\n                \r\n            });\r\n        });\r\n    };\r\n\r\n    // 메시지 화면에 표시\r\n    const showMessageFn = (message) => {\r\n        setMessages((prevMessages) => [...prevMessages, message]); // 새로운 메시지 추가\r\n    };\r\n\r\n    // 메시지 보내기\r\n    const msgSendClickFn = () => {\r\n        const question = questionRef.current.value.trim();\r\n        if (question.length === 0) {\r\n            alert(\"질문 내용을 입력해주세요\");\r\n            return;\r\n        }\r\n\r\n        // 자기 메시지 보이기\r\n        showMessageFn(question);\r\n\r\n        // 서버로 메시지 보내기 (STOMP 클라이언트 연결 후에만 전송)\r\n        if (stompClient.current) {\r\n            stompClient.current.send(\"/app/message\", {}, JSON.stringify({ 'content': (question) }));\r\n        }\r\n    };\r\n\r\n    // 채팅 종료\r\n    const disconnect = () => {\r\n        if (stompClient.current) {\r\n            stompClient.current.disconnect();\r\n        }\r\n        setIsOpen(false);\r\n        setMessages([]);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <div className=\"chat\">\r\n            <div id=\"chat-bot\">\r\n                <div className=\"wrap\">\r\n                    <button type=\"button\" id=\"btn-chat-open\" onClick={openChat}>OPEN</button>\r\n                    {isOpen && (\r\n                        <div id=\"chat-disp\" className=\"show\">\r\n                            <div id=\"chat-disp-con\">\r\n                                <div id=\"chat-header\">\r\n                                    <span>Chat-Bot(WebSocket)</span>\r\n                                    <button type=\"button\" id=\"close\" onClick={disconnect}>X</button>\r\n                                </div>\r\n                                <div id=\"chat-content\" ref={chatContentRef}>\r\n                                    {messages.map((msg, index) => (\r\n                                        <div key={index} className=\"data-con\">{msg}</div> // 메시지 목록\r\n                                    ))}\r\n                                </div>\r\n                                <div id=\"chat-question\" className=\"flex between\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"question\"\r\n                                        ref={questionRef}\r\n                                        placeholder=\"질문을 입력하세요\"\r\n                                    />\r\n                                    <button type=\"button\" id=\"btn-msg-send\" onClick={msgSendClickFn}>전송</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <Link to=\"/Komoran\">Komoran</Link>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChatBot;\r\n","import React from 'react'\r\nimport ChatBot from '../../components/ws/ChatBot'\r\n\r\nconst ChatBotPage = () => {\r\n  return (\r\n    <ChatBot/>\r\n  )\r\n}\r\n\r\nexport default ChatBotPage"],"names":["ChatBot","isOpen","setIsOpen","useState","messages","setMessages","questionRef","useRef","chatContentRef","stompClient","onConnect","alert","socket","SockJS","current","Stomp","over","connect","stomFr","console","log","send","JSON","stringify","subscribe","botMessage","body","showMessageFn","parse","message","prevMessages","_jsxs","_Fragment","children","_jsx","className","id","type","onClick","openChat","disconnect","ref","map","msg","index","placeholder","msgSendClickFn","question","value","trim","length","Link","to","ChatBotPage"],"sourceRoot":""}