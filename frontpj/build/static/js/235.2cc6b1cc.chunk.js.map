{"version":3,"file":"static/js/235.2cc6b1cc.chunk.js","mappings":"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","sources":["components/search/Search.jsx","pages/search/SearchPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport * as Hangul from \"es-hangul\";\r\nimport \"../../css/Search.css\";\r\n\r\nconst Search = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const initialSearchQuery = queryParams.get(\"query\") || \"\";\r\n  const initialSearchType = queryParams.get(\"searchType\") || \"normal\";\r\n  const [searchQuery, setSearchQuery] = useState(initialSearchQuery);\r\n  const [searchType, setSearchType] = useState(initialSearchType);\r\n  const [movies, setMovies] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [page, setPage] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const pageRange = 5;\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [sortOption, setSortOption] = useState(\"release\"); // 기본값은 개봉일 순\r\n\r\n  const handlePageChange = (newPage) => {\r\n    if (newPage < 1 || newPage > totalPages) return;\r\n    setCurrentPage(newPage);\r\n    setPage(newPage - 1); // 백엔드에 보낼 page는 0부터 시작\r\n  };\r\n\r\n  const rangeStart = Math.floor((currentPage - 1) / pageRange) * pageRange + 1;\r\n  const rangeEnd = Math.min(rangeStart + pageRange - 1, totalPages);\r\n\r\n  const isChosungOnly = (text) => {\r\n    const chosungRegex = /^[ㄱ-ㅎ]+$/;\r\n    return chosungRegex.test(text);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      setIsLoading(true);\r\n\r\n      try {\r\n        let response;\r\n\r\n        if (!searchQuery) {\r\n          response = await axios.get(\r\n            `http://43.201.20.172:8090/api/searchList?page=${page}&sortOption=${sortOption}`\r\n          );\r\n        } else {\r\n          let queryToUse = searchQuery.trim(); // 검색어 공백 제거\r\n          let currentSearchType = searchType;\r\n\r\n          if (isChosungOnly(queryToUse)) {\r\n            queryToUse = Hangul.getChoseong(queryToUse);\r\n            currentSearchType = \"chosung\";\r\n            setSearchType(currentSearchType);\r\n          } else {\r\n            currentSearchType = \"normal\";\r\n            setSearchType(currentSearchType);\r\n          }\r\n\r\n          response = await axios.get(\r\n            `http://43.201.20.172:8090/api/search?query=${encodeURIComponent(\r\n              queryToUse\r\n            )}&searchType=${currentSearchType}&page=${page}&sortOption=${sortOption}`\r\n          );\r\n        }\r\n\r\n        const { content, totalPages } = response.data;\r\n\r\n        setMovies(content);\r\n        setTotalPages(totalPages);\r\n      } catch (error) {\r\n        console.error(\"영화 검색 실패:\", error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n  }, [searchQuery, searchType, page, sortOption]);\r\n\r\n  useEffect(() => {\r\n    setSearchQuery(initialSearchQuery);\r\n    setSearchType(initialSearchType);\r\n    setPage(0);\r\n  }, [initialSearchQuery, initialSearchType]);\r\n\r\n  const formatMovieTitle = (title) => {\r\n    if (!title) return \"\";\r\n\r\n    if (title.includes(\":\")) {\r\n      const parts = title.split(\":\");\r\n      return (\r\n        <span>\r\n          {parts[0]}:{/* 첫 번째 부분 */}\r\n          <br />\r\n          {parts[1]} {/* 두 번째 부분 */}\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return <span>{title}</span>;\r\n  };\r\n\r\n  const handleMovieClick = (movieCd) => {\r\n    navigate(`/movie/detail/${movieCd}`);\r\n  };\r\n\r\n  const handleSortChange = (e) => {\r\n    setSortOption(e.target.value);\r\n    setPage(0); // 정렬 옵션 변경 시 페이지를 0으로 초기화\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content\">\r\n      <div className=\"sort-options\">\r\n        <select value={sortOption} onChange={handleSortChange}>\r\n          <option value=\"release\">개봉일 순</option>\r\n          <option value=\"alphabetical\">가나다 순</option>\r\n        </select>\r\n      </div>\r\n      {isLoading && <p>검색 중입니다... 조금만 기다려주세요</p>}\r\n\r\n      {!isLoading && movies.length > 0 && (\r\n        <ul className=\"movie-list\">\r\n          {movies.map((movie) => (\r\n            <li\r\n              key={movie.movieCd}\r\n              onClick={() => handleMovieClick(movie.movieCd)}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <img\r\n                className=\"poster\"\r\n                src={movie.poster_path}\r\n                alt={movie.movieNm}\r\n                width=\"100\"\r\n              />\r\n              <img\r\n                src={\r\n                  movie.watchGradeNm === \"청소년관람불가\"\r\n                    ? \"./../image/18.png\"\r\n                    : movie.watchGradeNm === \"15세이상관람가\"\r\n                    ? \"./../image/15.png\"\r\n                    : movie.watchGradeNm === \"12세이상관람가\"\r\n                    ? \"./../image/12.png\"\r\n                    : movie.watchGradeNm === \"전체관람가\"\r\n                    ? \"./../image/all.png\"\r\n                    : null\r\n                }\r\n                alt={movie.watchGradeNm}\r\n                className=\"age-rating-icon\"\r\n              />\r\n              <span className=\"movie-title\">\r\n                {formatMovieTitle(movie.movieNm)}\r\n              </span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n\r\n      {!isLoading && movies.length === 0 && searchQuery && (\r\n        <p>\"{searchQuery}\"에 대한 검색 결과가 없습니다.</p>\r\n      )}\r\n\r\n      <div className=\"pagination\">\r\n        <button\r\n          onClick={() => handlePageChange(1)}\r\n          disabled={currentPage === 1}\r\n        >\r\n          처음\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => handlePageChange(currentPage - 1)}\r\n          disabled={currentPage === 1}\r\n        >\r\n          이전\r\n        </button>\r\n\r\n        {[...Array(rangeEnd - rangeStart + 1)].map((_, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handlePageChange(rangeStart + index)}\r\n            className={currentPage === rangeStart + index ? \"active\" : \"\"}\r\n          >\r\n            {rangeStart + index}\r\n          </button>\r\n        ))}\r\n\r\n        <button\r\n          onClick={() => handlePageChange(currentPage + 1)}\r\n          disabled={currentPage === totalPages}\r\n        >\r\n          다음\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => handlePageChange(totalPages)}\r\n          disabled={currentPage === totalPages}\r\n        >\r\n          마지막\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react'\r\nimport Search from '../../components/search/Search'\r\n\r\nconst SearchPage = () => {\r\n    return (\r\n        <>\r\n            <Search />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchPage"],"names":["Search","location","useLocation","navigate","useNavigate","queryParams","URLSearchParams","search","initialSearchQuery","get","initialSearchType","searchQuery","setSearchQuery","useState","searchType","setSearchType","movies","setMovies","isLoading","setIsLoading","page","setPage","currentPage","setCurrentPage","totalPages","setTotalPages","sortOption","setSortOption","handlePageChange","newPage","rangeStart","Math","floor","rangeEnd","min","useEffect","async","response","queryToUse","trim","currentSearchType","test","Hangul","axios","encodeURIComponent","content","data","error","console","fetchMovies","formatMovieTitle","title","includes","parts","split","_jsxs","children","_jsx","className","value","onChange","e","target","length","map","movie","onClick","handleMovieClick","movieCd","style","cursor","src","poster_path","alt","movieNm","width","watchGradeNm","disabled","Array","_","index","SearchPage","_Fragment"],"sourceRoot":""}