{"version":3,"file":"static/js/47.78faef97.chunk.js","mappings":"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","sources":["components/board/BoardInsert.jsx","pages/board/BoardInsertPage.jsx","util/jwtUtil.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport jwtAxios from \"../../util/jwtUtil\";\r\nimport \"../../css/BoardInsert.css\";\r\n\r\nconst BoardInsert = () => {\r\n  // 상태 변수 설정\r\n  const [title, setTitle] = useState(\"\");\r\n  const [category, setCategory] = useState(\"자유게시판\"); // 카테고리 기본값을 자유게시판으로 설정\r\n  const [content, setContent] = useState(\"\");\r\n  const [itemFile, setItemFile] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  // Redux에서 로그인 상태 가져오기\r\n  const loginState = useSelector((state) => state.loginSlice);\r\n\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n\r\n    if (file) {\r\n      const allowedExtensions = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"svg\"];\r\n      const fileExtension = file.name.split(\".\").pop().toLowerCase();\r\n\r\n      if (!allowedExtensions.includes(fileExtension)) {\r\n        alert(\"허용되지 않은 파일 형식입니다. (이미지 파일만 가능)\");\r\n        e.target.value = \"\";\r\n        setItemFile(null);\r\n        return;\r\n      }\r\n\r\n      setItemFile(file); // 상태만 업데이트\r\n    }\r\n  };\r\n\r\n  // 폼 제출 처리 함수\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // FormData 객체 생성\r\n    const formData = new FormData();\r\n    formData.append(\"title\", title);\r\n    formData.append(\"content\", content);\r\n    formData.append(\"category\", category); // 카테고리 추가\r\n    formData.append(\"email\", loginState.email); // Redux에서 이메일 가져오기\r\n    if (itemFile) {\r\n      formData.append(\"itemFile\", itemFile);\r\n    }\r\n\r\n    try {\r\n      // 서버로 데이터 전송 (Content-Type을 명시하지 않음)\r\n      const response = await jwtAxios.post(\r\n        \"http://43.201.20.172:8090/board/insert\",\r\n        formData,\r\n        {\r\n          // \"Content-Type\"을 명시하지 않으면 브라우저가 자동으로 multipart/form-data로 설정해줌\r\n        }\r\n      );\r\n      // 성공 메시지 처리\r\n      setMessage(response.data);\r\n    } catch (error) {\r\n      // 에러 처리\r\n      setMessage(\"아이템 추가에 실패했습니다.\");\r\n      console.error(\"Error:\", error);\r\n    }\r\n    navigate(\"/board\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"boardInsert\">\r\n      <h2>게시글 작성</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"board-title\">\r\n          <span>제목</span>\r\n          <input\r\n            type=\"text\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"board-category\">\r\n          <span>카테고리</span>\r\n          <select\r\n            value={category}\r\n            onChange={(e) => setCategory(e.target.value)}\r\n            required\r\n          >\r\n            <option value=\"영화게시판\">영화게시판</option>\r\n            <option value=\"자유게시판\">자유게시판</option>\r\n            <option value=\"문의게시판\">문의게시판</option>\r\n            {loginState.roleNames?.includes(\"ADMIN\") ? (\r\n              <option value=\"공지사항\">공지사항</option>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </select>\r\n        </div>\r\n        <div className=\"board-content\">\r\n          <span>내용</span>\r\n          <textarea\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n            required\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"board-upload\">\r\n          <span>파일</span>\r\n          <input\r\n            type=\"file\"\r\n            id=\"file-upload\"\r\n            onChange={handleFileChange}\r\n            style={{ display: \"none\" }} // input 숨기기\r\n          />\r\n          <div className=\"file-upload\">\r\n            <label htmlFor=\"file-upload\" className=\"upload-btn\">\r\n              파일 선택\r\n            </label>\r\n            <span id=\"file-name-display\">\r\n              {itemFile ? `${itemFile.name}` : \"\"}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <button type=\"submit\" className=\"board-submit\">\r\n          게시글 추가\r\n        </button>\r\n      </form>\r\n      {message && <span>{message}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardInsert;\r\n","import React from 'react'\r\nimport BoardInsert from '../../components/board/BoardInsert'\r\n\r\nconst BoardInsertPage = () => {\r\n  return (\r\n    <BoardInsert/>\r\n  )\r\n}\r\n\r\nexport default BoardInsertPage","import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\n\r\nconst jwtAxios=axios.create()\r\n\r\nconst refreshJWT= async (accessToken, refreshToken)=>{\r\n    const header= {headers: {\"Authorization\": `Bearer ${accessToken}`}}\r\n    const res = await axios.get(`http://43.201.20.172:8090/api/member/refresh?refreshToken=${refreshToken}`, header)\r\n\r\n    return res.data\r\n}\r\n\r\nconst beforeReq= (config) =>{\r\n    const memberInfo=getCookie(\"member\")\r\n    if(!memberInfo){\r\n        return Promise.reject(\r\n            {response:\r\n             {data: \r\n              {error: \"REQUIRE_LOGIN\"}\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const {accessToken} = memberInfo\r\n    config.headers.Authorization= `Bearer ${accessToken}`\r\n    return config\r\n}\r\n\r\nconst requestFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\nconst beforeRes=async (res)=>{\r\n\r\n    const data= res.data\r\n    if(data && data.error ==='ERROR_ACCESS_TOKEN'){\r\n        const memberCookieValue=getCookie(\"member\")\r\n        const result=await refreshJWT(memberCookieValue.accessToken,\r\n            memberCookieValue.refreshToken)\r\n        memberCookieValue.accessToken=result.accessToken\r\n        memberCookieValue.refreshToken=result.refreshToken\r\n\r\n        setCookie(\"member\", JSON.stringify(memberCookieValue), 1)\r\n\r\n        const originalRequest=res.config\r\n        originalRequest.headers.Authorization= `Bearer ${result.accessToken}`\r\n\r\n        return await axios(originalRequest)\r\n    }\r\n\r\n\r\n    return res\r\n}\r\n\r\nconst responseFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\njwtAxios.interceptors.request.use( beforeReq, requestFail)\r\njwtAxios.interceptors.response.use(beforeRes,responseFail)\r\n\r\nexport default jwtAxios"],"names":["BoardInsert","_loginState$roleNames","title","setTitle","useState","category","setCategory","content","setContent","itemFile","setItemFile","message","setMessage","navigate","useNavigate","loginState","useSelector","state","loginSlice","_jsxs","className","children","_jsx","onSubmit","async","e","preventDefault","formData","FormData","append","email","response","jwtAxios","post","data","error","console","type","value","onChange","target","required","roleNames","includes","_Fragment","id","file","files","allowedExtensions","fileExtension","name","split","pop","toLowerCase","alert","style","display","htmlFor","BoardInsertPage","axios","create","interceptors","request","use","config","memberInfo","getCookie","Promise","reject","accessToken","headers","Authorization","err","res","memberCookieValue","result","refreshToken","header","get","refreshJWT","setCookie","JSON","stringify","originalRequest"],"sourceRoot":""}