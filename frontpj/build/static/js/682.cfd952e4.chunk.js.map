{"version":3,"file":"static/js/682.cfd952e4.chunk.js","mappings":"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","sources":["components/board/BoardDetail.jsx","pages/board/BoardDetailPage.jsx","util/jwtUtil.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"../../css/BoardDetail.css\"; // CSS 파일 import\r\nimport jwtAxios from \"../../util/jwtUtil\";\r\n\r\n// 모달 컴포넌트\r\nconst Modal = ({ message, onClose, onConfirm }) => {\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal\">\r\n        <p style={{ color: \"black\" }}>{message}</p>\r\n        <div className=\"modal-buttons\">\r\n          <button onClick={onClose} className=\"modal-cancel-button\">\r\n            아니오\r\n          </button>\r\n          <button onClick={onConfirm} className=\"modal-confirm-button\">\r\n            예\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst BoardDetail = () => {\r\n  const { id } = useParams();\r\n  const [board, setBoard] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [content, setContent] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지\r\n  const [messagesPerPage] = useState(5); // 페이지당 게시글 수\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false); // 게시글 삭제 모달 상태\r\n  const [showReplyDeleteModal, setShowReplyDeleteModal] = useState(false); // 댓글 삭제 모달 상태\r\n  const [replyToDelete, setReplyToDelete] = useState(null); // 삭제할 댓글 정보\r\n  const [replies, setReplies] = useState([]); // 댓글 리스트 상태\r\n  const navigate = useNavigate();\r\n\r\n  // Redux에서 로그인 상태 가져오기\r\n  const loginState = useSelector((state) => state.loginSlice);\r\n\r\n  useEffect(() => {\r\n    const fetchBoardDetail = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://43.201.20.172:8090/board/detail/${id}`\r\n        );\r\n        setBoard(response.data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"게시글 상세 정보 불러오기 실패\", err);\r\n        setError(\"게시글 상세 정보를 불러오는 데 실패했습니다.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchBoardDetail();\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    const fetchReplyList = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://43.201.20.172:8090/api/reply/replyList/${id}`\r\n        );\r\n\r\n        const sortedReplies = response.data.replyList || [];\r\n        sortedReplies.sort(\r\n          (a, b) => new Date(b.createTime) - new Date(a.createTime)\r\n        ); // `createdAt`을 기준으로 정렬\r\n\r\n        setReplies(sortedReplies);\r\n      } catch (err) {\r\n        console.error(\"댓글 리스트 불러오기 실패\", err);\r\n      }\r\n    };\r\n\r\n    fetchReplyList();\r\n  }, [id]);\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      await jwtAxios.post(`http://43.201.20.172:8090/board/delete/${id}`);\r\n      navigate(\"/board\");\r\n    } catch (err) {\r\n      console.error(\"게시글 삭제 실패\", err);\r\n      alert(\"게시글 삭제에 실패했습니다.\");\r\n    }\r\n  };\r\n\r\n  const indexOfLastMessage = currentPage * messagesPerPage;\r\n  const indexOfFirstMessage = indexOfLastMessage - messagesPerPage;\r\n  const currentMessages =\r\n    replies.slice(indexOfFirstMessage, indexOfLastMessage) || [];\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  const totalMessages = replies.length || 0;\r\n  const totalPages = Math.ceil(totalMessages / messagesPerPage);\r\n\r\n  const getPaginationRange = () => {\r\n    const pageLimit = 5;\r\n    const rangeStart =\r\n      Math.floor((currentPage - 1) / pageLimit) * pageLimit + 1;\r\n    const rangeEnd = Math.min(rangeStart + pageLimit - 1, totalPages);\r\n    return { rangeStart, rangeEnd };\r\n  };\r\n\r\n  const { rangeStart, rangeEnd } = getPaginationRange();\r\n\r\n  const openDeleteModal = () => {\r\n    setShowDeleteModal(true);\r\n  };\r\n\r\n  const closeDeleteModal = () => {\r\n    setShowDeleteModal(false);\r\n  };\r\n\r\n  const openReplyDeleteModal = (reply) => {\r\n    setReplyToDelete(reply);\r\n    setShowReplyDeleteModal(true);\r\n  };\r\n\r\n  const closeReplyDeleteModal = () => {\r\n    setShowReplyDeleteModal(false);\r\n    setReplyToDelete(null);\r\n  };\r\n\r\n  const replyDelete = async () => {\r\n    if (!replyToDelete) return;\r\n    try {\r\n      await jwtAxios.post(\r\n        `http://43.201.20.172:8090/api/reply/delete/${replyToDelete.id}/${id}`\r\n      );\r\n      const replyListResponse = await axios.get(\r\n        `http://43.201.20.172:8090/api/reply/replyList/${id}`\r\n      );\r\n      const sortedReplies = replyListResponse.data.replyList || [];\r\n      sortedReplies.sort(\r\n        (a, b) => new Date(b.createTime) - new Date(a.createTime)\r\n      ); // `createdAt`을 기준으로 정렬\r\n\r\n      setReplies(sortedReplies);\r\n      closeReplyDeleteModal();\r\n    } catch (err) {\r\n      console.error(\"댓글 삭제 실패\", err);\r\n      alert(\"댓글 삭제에 실패했습니다.\");\r\n    }\r\n  };\r\n  const handleLike = async (replyId) => {\r\n    if (!loginState.email) {\r\n      // email이 없으면 로그인 페이지로 이동\r\n      navigate(\"/member/login\");\r\n      return; // 이후 로직을 실행하지 않도록 종료\r\n    }\r\n    const reply = replies.find((r) => r.id === replyId);\r\n\r\n    // 사용자가 이미 좋아요를 눌렀다면, unlike 요청을 보냄\r\n    if (\r\n      reply.replyLikeEntities.some((like) => like.email === loginState.email)\r\n    ) {\r\n      try {\r\n        await jwtAxios.post(\r\n          `http://43.201.20.172:8090/api/reply/unlike?replyId=${replyId}&email=${loginState.email}`\r\n        );\r\n\r\n        // 서버에서 좋아요 취소 성공 후, UI 상태 업데이트\r\n        setReplies((prevReplies) =>\r\n          prevReplies.map((r) =>\r\n            r.id === replyId\r\n              ? {\r\n                  ...r,\r\n                  replyLikeEntities: r.replyLikeEntities.filter(\r\n                    (like) => like.email !== loginState.email\r\n                  ),\r\n                }\r\n              : r\r\n          )\r\n        );\r\n        const replyListResponse = await axios.get(\r\n          `http://43.201.20.172:8090/api/reply/replyList/${id}`\r\n        );\r\n        const sortedReplies = replyListResponse.data.replyList || [];\r\n        sortedReplies.sort(\r\n          (a, b) => new Date(b.createTime) - new Date(a.createTime)\r\n        ); // `createdAt`을 기준으로 정렬\r\n\r\n        setReplies(sortedReplies);\r\n      } catch (err) {\r\n        console.error(\"좋아요 취소 실패\", err);\r\n        alert(\"좋아요 취소에 실패했습니다.\");\r\n      }\r\n    } else {\r\n      // 좋아요가 눌리지 않은 상태라면, like 요청을 보냄\r\n      try {\r\n        await jwtAxios.post(\r\n          `http://43.201.20.172:8090/api/reply/like?replyId=${replyId}&email=${loginState.email}`\r\n        );\r\n\r\n        // 서버에서 좋아요 추가 성공 후, UI 상태 업데이트\r\n        setReplies((prevReplies) =>\r\n          prevReplies.map((r) =>\r\n            r.id === replyId\r\n              ? {\r\n                  ...r,\r\n                  replyLikeEntities: [\r\n                    ...r.replyLikeEntities,\r\n                    { email: loginState.email },\r\n                  ],\r\n                }\r\n              : r\r\n          )\r\n        );\r\n\r\n        const replyListResponse = await axios.get(\r\n          `http://43.201.20.172:8090/api/reply/replyList/${id}`\r\n        );\r\n        const sortedReplies = replyListResponse.data.replyList || [];\r\n        sortedReplies.sort(\r\n          (a, b) => new Date(b.createTime) - new Date(a.createTime)\r\n        ); // `createdAt`을 기준으로 정렬\r\n\r\n        setReplies(sortedReplies);\r\n      } catch (err) {\r\n        console.error(\"좋아요 실패\", err);\r\n        alert(\"좋아요 처리에 실패했습니다.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    if (!loginState.email) {\r\n      // email이 없으면 로그인 페이지로 이동\r\n      navigate(\"/member/login\");\r\n      return; // 이후 로직을 실행하지 않도록 종료\r\n    }\r\n    e.preventDefault();\r\n\r\n    const requestData = {\r\n      boardId: id,\r\n      replyContent: content,\r\n      email: loginState.email,\r\n    };\r\n\r\n    try {\r\n      const response = await jwtAxios.post(\r\n        \"http://43.201.20.172:8090/api/reply/write\",\r\n        requestData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      const replyListResponse = await axios.get(\r\n        `http://43.201.20.172:8090/api/reply/replyList/${id}`\r\n      );\r\n      const sortedReplies = replyListResponse.data.replyList || [];\r\n      sortedReplies.sort(\r\n        (a, b) => new Date(b.createTime) - new Date(a.createTime)\r\n      ); // `createdAt`을 기준으로 정렬\r\n\r\n      setReplies(sortedReplies);\r\n      setContent(\"\");\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    const hours = String(date.getHours()).padStart(2, \"0\");\r\n    const minutes = String(date.getMinutes()).padStart(2, \"0\");\r\n    const seconds = String(date.getSeconds()).padStart(2, \"0\");\r\n\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>로딩 중...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n\r\n  const canEdit =\r\n    loginState.email === board?.email ||\r\n    loginState.roleNames?.includes(\"ADMIN\");\r\n\r\n  console.log(replies);\r\n\r\n  return (\r\n    <div className=\"board-detail\">\r\n      {board ? (\r\n        <div className=\"board-detail-content\">\r\n          <div className=\"board-detail-title\">\r\n            <span>{board.category}</span>\r\n            <span\r\n              style={{\r\n                fontSize: `${Math.max(12, 30 - board.title.length / 2)}px`,\r\n              }}\r\n            >\r\n              {board.title}\r\n            </span>\r\n            <div className=\"board-detail-view\">\r\n              <img src=\"../../image/eye.svg\" alt=\"view\" />\r\n              <span>{board.hit}</span>\r\n            </div>\r\n          </div>\r\n          <span>{board.memberNickName}</span>\r\n          <p className=\"board-detail-content-text\">{board.content}</p>\r\n\r\n          {board.newImgName && (\r\n            <img\r\n              src={`http://43.201.20.172:8090/upload/${board.newImgName}`}\r\n              alt={board.oldImgName}\r\n              style={{ maxWidth: \"300px\", maxHeight: \"300px\" }}\r\n            />\r\n          )}\r\n\r\n          {canEdit && (\r\n            <div className=\"board-detail-button\">\r\n              <button onClick={openDeleteModal}>삭제</button>\r\n              <button onClick={() => navigate(`/board/update/${board.id}`)}>\r\n                수정\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <p>게시글을 찾을 수 없습니다.</p>\r\n      )}\r\n\r\n      {/* 게시글 삭제 모달 */}\r\n      {showDeleteModal && (\r\n        <Modal\r\n          message=\"게시글을 삭제하시겠습니까?\"\r\n          onClose={closeDeleteModal}\r\n          onConfirm={handleDelete}\r\n        />\r\n      )}\r\n\r\n      {/* 댓글 삭제 모달 */}\r\n      {showReplyDeleteModal && (\r\n        <Modal\r\n          message=\"댓글을 삭제하시겠습니까?\"\r\n          onClose={closeReplyDeleteModal}\r\n          onConfirm={replyDelete}\r\n        />\r\n      )}\r\n      {/* 댓글 목록 */}\r\n      <div className=\"reply-list-container\">\r\n        <h2>댓글 목록</h2>\r\n        {replies.length === 0 ? (\r\n          <p>댓글이 없습니다.</p>\r\n        ) : (\r\n          <>\r\n            <ul className=\"reply-list\">\r\n              {currentMessages.map((reply) => (\r\n                <li key={reply.id} className=\"reply-item\">\r\n                  <div className=\"reply_nickname\">\r\n                    <span>{reply.nickname}</span>\r\n                  </div>\r\n                  <div className=\"reply_content\">\r\n                    <span>{reply.replyContent}</span>\r\n                  </div>\r\n                  <span className=\"reply_date\">\r\n                    {formatDate(reply.createTime)}\r\n                  </span>\r\n                  <span className=\"reply_content\">{reply.replyText}</span>\r\n                  <div className=\"reply_footer\">\r\n                    <div className=\"reply_like_count\">\r\n                      <span\r\n                        onClick={() => handleLike(reply.id)}\r\n                        className=\"reply_like\"\r\n                      >\r\n                        {reply.replyLikeEntities?.some(\r\n                          (like) => like.email === loginState.email\r\n                        )\r\n                          ? \"❤\"\r\n                          : \"♡\"}\r\n                      </span>\r\n                      <span>{reply.likeCount}</span>\r\n                    </div>\r\n                    {(loginState.email === reply.email ||\r\n                      loginState.roleNames?.includes(\"ADMIN\")) && (\r\n                      <span onClick={() => openReplyDeleteModal(reply)}>\r\n                        삭제\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n            {/* 페이징 처리 */}\r\n            <div className=\"pagination\">\r\n              <button\r\n                onClick={() => handlePageChange(1)}\r\n                disabled={currentPage === 1}\r\n              >\r\n                처음\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => handlePageChange(currentPage - 1)}\r\n                disabled={currentPage === 1}\r\n              >\r\n                이전\r\n              </button>\r\n\r\n              {[...Array(rangeEnd - rangeStart + 1)].map((_, index) => (\r\n                <button\r\n                  key={index}\r\n                  onClick={() => handlePageChange(rangeStart + index)}\r\n                  className={currentPage === rangeStart + index ? \"active\" : \"\"}\r\n                >\r\n                  {rangeStart + index}\r\n                </button>\r\n              ))}\r\n\r\n              <button\r\n                onClick={() => handlePageChange(currentPage + 1)}\r\n                disabled={currentPage === totalPages}\r\n              >\r\n                다음\r\n              </button>\r\n\r\n              <button\r\n                onClick={() => handlePageChange(totalPages)}\r\n                disabled={currentPage === totalPages}\r\n              >\r\n                마지막\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n        {/* 댓글 작성 */}\r\n        <div>\r\n          <h2>댓글 작성</h2>\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"boardReplyInsert\">\r\n              <textarea\r\n                value={content}\r\n                onChange={(e) => setContent(e.target.value)}\r\n                placeholder=\"댓글을 작성해주세요\"\r\n                required\r\n              />\r\n              <button type=\"submit\" className=\"reply_write\">\r\n                입력\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardDetail;\r\n","import React from 'react'\r\nimport BoardDetail from '../../components/board/BoardDetail'\r\n\r\nconst BoardDetailPage = () => {\r\n  return (\r\n    <BoardDetail/>\r\n  )\r\n}\r\n\r\nexport default BoardDetailPage","import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\n\r\nconst jwtAxios=axios.create()\r\n\r\nconst refreshJWT= async (accessToken, refreshToken)=>{\r\n    const header= {headers: {\"Authorization\": `Bearer ${accessToken}`}}\r\n    const res = await axios.get(`http://43.201.20.172:8090/api/member/refresh?refreshToken=${refreshToken}`, header)\r\n\r\n    return res.data\r\n}\r\n\r\nconst beforeReq= (config) =>{\r\n    const memberInfo=getCookie(\"member\")\r\n    if(!memberInfo){\r\n        return Promise.reject(\r\n            {response:\r\n             {data: \r\n              {error: \"REQUIRE_LOGIN\"}\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const {accessToken} = memberInfo\r\n    config.headers.Authorization= `Bearer ${accessToken}`\r\n    return config\r\n}\r\n\r\nconst requestFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\nconst beforeRes=async (res)=>{\r\n\r\n    const data= res.data\r\n    if(data && data.error ==='ERROR_ACCESS_TOKEN'){\r\n        const memberCookieValue=getCookie(\"member\")\r\n        const result=await refreshJWT(memberCookieValue.accessToken,\r\n            memberCookieValue.refreshToken)\r\n        memberCookieValue.accessToken=result.accessToken\r\n        memberCookieValue.refreshToken=result.refreshToken\r\n\r\n        setCookie(\"member\", JSON.stringify(memberCookieValue), 1)\r\n\r\n        const originalRequest=res.config\r\n        originalRequest.headers.Authorization= `Bearer ${result.accessToken}`\r\n\r\n        return await axios(originalRequest)\r\n    }\r\n\r\n\r\n    return res\r\n}\r\n\r\nconst responseFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\njwtAxios.interceptors.request.use( beforeReq, requestFail)\r\njwtAxios.interceptors.response.use(beforeRes,responseFail)\r\n\r\nexport default jwtAxios"],"names":["Modal","_ref","message","onClose","onConfirm","_jsx","className","children","_jsxs","style","color","onClick","BoardDetail","_loginState$roleNames","id","useParams","board","setBoard","useState","loading","setLoading","content","setContent","error","setError","currentPage","setCurrentPage","messagesPerPage","showDeleteModal","setShowDeleteModal","showReplyDeleteModal","setShowReplyDeleteModal","replyToDelete","setReplyToDelete","replies","setReplies","navigate","useNavigate","loginState","useSelector","state","loginSlice","useEffect","async","response","axios","get","data","err","console","fetchBoardDetail","sortedReplies","replyList","sort","a","b","Date","createTime","fetchReplyList","indexOfLastMessage","indexOfFirstMessage","currentMessages","slice","handlePageChange","pageNumber","totalMessages","length","totalPages","Math","ceil","rangeStart","rangeEnd","getPaginationRange","floor","min","closeReplyDeleteModal","formatDate","dateStr","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","canEdit","email","roleNames","includes","log","category","fontSize","max","title","src","alt","hit","memberNickName","newImgName","oldImgName","maxWidth","maxHeight","openDeleteModal","closeDeleteModal","jwtAxios","post","alert","_Fragment","map","reply","_reply$replyLikeEntit","_loginState$roleNames2","nickname","replyContent","replyText","find","r","replyId","replyLikeEntities","some","like","prevReplies","filter","handleLike","likeCount","openReplyDeleteModal","disabled","Array","_","index","onSubmit","e","preventDefault","requestData","boardId","headers","value","onChange","target","placeholder","required","type","BoardDetailPage","create","interceptors","request","use","config","memberInfo","getCookie","Promise","reject","accessToken","Authorization","res","memberCookieValue","result","refreshToken","header","refreshJWT","setCookie","JSON","stringify","originalRequest"],"sourceRoot":""}