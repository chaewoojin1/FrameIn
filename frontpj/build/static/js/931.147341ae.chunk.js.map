{"version":3,"file":"static/js/931.147341ae.chunk.js","mappings":"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","sources":["components/admin/payment/PaymentList.jsx","util/jwtUtil.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport jwtAxios from \"../../../util/jwtUtil\";\r\nimport \"../../../css/admin/PaymentList.css\";\r\n\r\nconst PaymentList = () => {\r\n    const [groupedPayments, setGroupedPayments] = useState([]);\r\n    const [searchType, setSearchType] = useState(\"email\"); // 기본값: 이메일 검색\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    const [page, setPage] = useState(0);\r\n    const [size] = useState(10);\r\n    const [totalPages, setTotalPages] = useState(0); // 전체 페이지 개수\r\n\r\n    useEffect(() => {\r\n        fetchPayments();\r\n    }, [page]); // 페이지 변경 시 재조회\r\n\r\n    const fetchPayments = async () => {\r\n        try {\r\n            const params = { page, size };\r\n            if (searchValue.trim()) {\r\n                if (searchType === \"email\") {\r\n                    params.email = searchValue;\r\n                } else if (searchType === \"paymentMethod\") {\r\n                    params.paymentMethod = searchValue;\r\n                }\r\n            }\r\n\r\n            const response = await jwtAxios.get(`http://43.201.20.172:8090/admin/payment/search`, { params });\r\n\r\n            groupPayments(response.data.content);\r\n            setTotalPages(response.data.totalPages); // 전체 페이지 개수 업데이트\r\n        } catch (error) {\r\n            console.error('결제 리스트를 불러오는 중 오류 발생:', error);\r\n        }\r\n    };\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        setPage(0); // 검색 시 첫 페이지로 리셋\r\n        fetchPayments();\r\n    };\r\n\r\n    const groupPayments = (payments) => {\r\n        const grouped = payments.reduce((acc, payment) => {\r\n            const key = new Date(payment.createTime).toLocaleString();\r\n\r\n            if (!acc[key]) {\r\n                acc[key] = {\r\n                    createTime: payment.createTime,\r\n                    email: payment.email,\r\n                    paymentMethod: payment.paymentMethod,\r\n                    totalAmount: payment.totalAmount,\r\n                    payments: []\r\n                };\r\n            }\r\n            acc[key].payments.push(payment);\r\n            return acc;\r\n        }, {});\r\n\r\n        setGroupedPayments(Object.values(grouped));\r\n    };\r\n\r\n    const handlePageChange = (newPage) => {\r\n        if (newPage >= 0 && newPage < totalPages) {\r\n          setPage(newPage);\r\n        }\r\n      };\r\n    \r\n      const startPage = Math.max(0, page - 2);\r\n      const endPage = Math.min(totalPages - 1, page + 2);\r\n      const pageNumbers = [];\r\n      for (let i = startPage; i <= endPage; i++) {\r\n        pageNumbers.push(i);\r\n      }\r\n\r\n    return (\r\n        <div className='payment-list'>\r\n            <h2>결제 리스트</h2>\r\n\r\n            {/* 검색 입력 필드 */}\r\n            <form onSubmit={handleSearch} className='search-form'>\r\n                <select value={searchType} onChange={(e) => setSearchType(e.target.value)}>\r\n                    <option value=\"email\">이메일</option>\r\n                    <option value=\"paymentMethod\">결제 방법</option>\r\n                </select>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={searchType === \"email\" ? \"이메일 입력\" : \"결제 방법 입력 (예: kakaopay)\"}\r\n                    value={searchValue}\r\n                    onChange={(e) => setSearchValue(e.target.value)}\r\n                />\r\n                <button type=\"submit\">검색</button>\r\n            </form>\r\n\r\n            {/* 결제 리스트 테이블 */}\r\n            <table border=\"1\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>결제 날짜</th>\r\n                        <th>이메일</th>\r\n                        <th>결제 방법</th>\r\n                        <th>총 결제 금액</th>\r\n                        <th>영화 제목</th>\r\n                        <th>상영일</th>\r\n                        <th>상영 시작 시간</th>\r\n                        <th>상영 종료 시간</th>\r\n                        <th>좌석</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {groupedPayments.length > 0 ? (\r\n                        groupedPayments.map((group, groupIndex) => (\r\n                            group.payments.map((payment, index) => (\r\n                                <tr key={`${groupIndex}-${index}`}>\r\n                                    {index === 0 ? (\r\n                                        <>\r\n                                            <td rowSpan={group.payments.length}>{new Date(group.createTime).toLocaleString()}</td>\r\n                                            <td rowSpan={group.payments.length}>{group.email || \"N/A\"}</td>\r\n                                            <td rowSpan={group.payments.length}>{group.paymentMethod}</td>\r\n                                            <td rowSpan={group.payments.length}>{group.totalAmount.toLocaleString()}원</td>\r\n                                        </>\r\n                                    ) : null}\r\n                                    <td>{payment.movieNm}</td>\r\n                                    <td>{payment.screeningDate}</td>\r\n                                    <td>{payment.screeningTime}</td>\r\n                                    <td>{payment.screeningEndTime}</td>\r\n                                    <td>{payment.seatNumber}</td>\r\n                                </tr>\r\n                            ))\r\n                        ))\r\n                    ) : (\r\n                        <tr>\r\n                            <td colSpan=\"9\">결제 내역이 없습니다.</td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n            {/* 페이지네이션 */}\r\n            <div className=\"pagination\">\r\n        <button onClick={() => handlePageChange(0)} disabled={page === 0}>\r\n          처음\r\n        </button>\r\n        <button onClick={() => handlePageChange(page - 1)} disabled={page === 0}>\r\n          이전\r\n        </button>\r\n\r\n        {pageNumbers.map((pageNum) => (\r\n          <button\r\n            key={pageNum}\r\n            onClick={() => handlePageChange(pageNum)}\r\n            className={page === pageNum ? \"active\" : \"\"}\r\n          >\r\n            {pageNum + 1}\r\n          </button>\r\n        ))}\r\n\r\n        <button onClick={() => handlePageChange(page + 1)} disabled={page === totalPages - 1}>\r\n          다음\r\n        </button>\r\n        <button onClick={() => handlePageChange(totalPages - 1)} disabled={page === totalPages - 1}>\r\n          마지막\r\n        </button>\r\n      </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PaymentList;\r\n","import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\n\r\nconst jwtAxios=axios.create()\r\n\r\nconst refreshJWT= async (accessToken, refreshToken)=>{\r\n    const header= {headers: {\"Authorization\": `Bearer ${accessToken}`}}\r\n    const res = await axios.get(`http://43.201.20.172:8090/api/member/refresh?refreshToken=${refreshToken}`, header)\r\n\r\n    return res.data\r\n}\r\n\r\nconst beforeReq= (config) =>{\r\n    const memberInfo=getCookie(\"member\")\r\n    if(!memberInfo){\r\n        return Promise.reject(\r\n            {response:\r\n             {data: \r\n              {error: \"REQUIRE_LOGIN\"}\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const {accessToken} = memberInfo\r\n    config.headers.Authorization= `Bearer ${accessToken}`\r\n    return config\r\n}\r\n\r\nconst requestFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\nconst beforeRes=async (res)=>{\r\n\r\n    const data= res.data\r\n    if(data && data.error ==='ERROR_ACCESS_TOKEN'){\r\n        const memberCookieValue=getCookie(\"member\")\r\n        const result=await refreshJWT(memberCookieValue.accessToken,\r\n            memberCookieValue.refreshToken)\r\n        memberCookieValue.accessToken=result.accessToken\r\n        memberCookieValue.refreshToken=result.refreshToken\r\n\r\n        setCookie(\"member\", JSON.stringify(memberCookieValue), 1)\r\n\r\n        const originalRequest=res.config\r\n        originalRequest.headers.Authorization= `Bearer ${result.accessToken}`\r\n\r\n        return await axios(originalRequest)\r\n    }\r\n\r\n\r\n    return res\r\n}\r\n\r\nconst responseFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\njwtAxios.interceptors.request.use( beforeReq, requestFail)\r\njwtAxios.interceptors.response.use(beforeRes,responseFail)\r\n\r\nexport default jwtAxios"],"names":["PaymentList","groupedPayments","setGroupedPayments","useState","searchType","setSearchType","searchValue","setSearchValue","page","setPage","size","totalPages","setTotalPages","useEffect","fetchPayments","async","params","trim","email","paymentMethod","response","jwtAxios","get","groupPayments","data","content","error","console","payments","grouped","reduce","acc","payment","key","Date","createTime","toLocaleString","totalAmount","push","Object","values","handlePageChange","newPage","startPage","Math","max","endPage","min","pageNumbers","i","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","value","onChange","target","type","placeholder","border","length","map","group","groupIndex","index","_Fragment","rowSpan","movieNm","screeningDate","screeningTime","screeningEndTime","seatNumber","colSpan","onClick","disabled","pageNum","axios","create","interceptors","request","use","config","memberInfo","getCookie","Promise","reject","accessToken","headers","Authorization","err","res","memberCookieValue","result","refreshToken","header","refreshJWT","setCookie","JSON","stringify","originalRequest"],"sourceRoot":""}