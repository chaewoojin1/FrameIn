{"version":3,"file":"static/js/357.de67006d.chunk.js","mappings":"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","sources":["components/Header.jsx","layout/MainLayout.jsx","components/ws/Komoran.jsx","components/Footer.jsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\nimport \"../css/Header.css\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout } from \"../slices/loginSlice\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Hangul from \"es-hangul\";\r\n\r\nexport default function Header({\r\n  isDarkMode,\r\n  setIsDarkMode,\r\n  isMemberInfoActive,\r\n  setIsMemberInfoActive,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const memberInfoRef = useRef(null);\r\n  const memberNameRef = useRef(null);\r\n  const loginState = useSelector((state) => state.loginSlice);\r\n  const isLoggedIn = !!loginState.email;\r\n\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [isNavOpen, setIsNavOpen] = useState(false);\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 1023);\r\n\r\n  const isChosungOnly = (text) => /^[ㄱ-ㅎ]+$/.test(text);\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logout());\r\n    alert(\"로그아웃되었습니다\");\r\n    navigate(\"/\", { replace: true });\r\n    window.location.reload();\r\n  };\r\n\r\n  const memberInfoOnClick = () => setIsMemberInfoActive(!isMemberInfoActive);\r\n\r\n  // 햄버거 메뉴 닫는 함수\r\n  const closeNav = () => setIsNavOpen(false);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      // 헤더 내 특정 요소를 제외하고 클릭 시 메뉴 닫기\r\n      if (\r\n        memberInfoRef.current &&\r\n        !document.querySelector(\"header\").contains(event.target)\r\n      ) {\r\n        setIsNavOpen(false); // 메뉴 닫기\r\n      }\r\n    };\r\n  \r\n    const adjustFontSize = () => {\r\n      const span = memberNameRef.current;\r\n      if (!span) return;\r\n      const parentWidth = span.parentElement.offsetWidth;\r\n      const spanWidth = span.offsetWidth;\r\n      let fontSize = 16;\r\n      if (parentWidth < spanWidth) {\r\n        fontSize = Math.floor((parentWidth / spanWidth) * 16);\r\n      }\r\n      if (fontSize > 16) fontSize = 16;\r\n      span.style.fontSize = `${fontSize}px`;\r\n    };\r\n  \r\n    const handleResize = () => setIsMobile(window.innerWidth <= 1023);\r\n  \r\n    adjustFontSize();\r\n    window.addEventListener(\"resize\", adjustFontSize);\r\n    window.addEventListener(\"resize\", handleResize);\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n  \r\n    return () => {\r\n      window.removeEventListener(\"resize\", adjustFontSize);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [loginState.nickname, setIsMemberInfoActive]);\r\n  \r\n\r\n  const handleSearch = (e) => {\r\n    if (e.type === \"click\" || (e.type === \"keydown\" && e.key === \"Enter\")) {\r\n      if (searchQuery.trim()) {\r\n        const isChosung = isChosungOnly(searchQuery.trim());\r\n        const queryToUse = isChosung\r\n          ? Hangul.getChoseong(searchQuery.trim())\r\n          : searchQuery.trim();\r\n        const searchType = isChosung ? \"chosung\" : \"normal\";\r\n\r\n        navigate(\r\n          `/movie/search?query=${encodeURIComponent(\r\n            queryToUse\r\n          )}&searchType=${searchType}`\r\n        );\r\n      }\r\n      closeNav(); // 메뉴 닫기\r\n    }\r\n  };\r\n\r\n  const toggleNav = () => setIsNavOpen(!isNavOpen);\r\n\r\n  const renderMemberInfo = () => (\r\n    <div\r\n      className=\"member-info\"\r\n      ref={memberInfoRef}\r\n      onClick={memberInfoOnClick}\r\n    >\r\n      <img\r\n        className=\"member-info-img\"\r\n        src=\"/image/person.svg\"\r\n        alt=\"member-info\"\r\n      />\r\n      {isLoggedIn && <span ref={memberNameRef}>{loginState.nickname}님</span>}\r\n      <div className={`member-info-con ${isMemberInfoActive ? \"active\" : \"\"}`}>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Link to=\"/member/detail\" onClick={closeNav}>내 정보</Link>\r\n            <Link to=\"/cart/myCartList\" onClick={closeNav}>장바구니</Link>\r\n            <Link to=\"/member/myPaymentList\" onClick={closeNav}>결제내역</Link>\r\n            <Link to=\"/chatroom\" onClick={closeNav}>실시간채팅</Link>\r\n            <Link to=\"/member/myChatList\" onClick={closeNav}>채팅내역</Link>\r\n            <span onClick={handleLogout}>로그아웃</span>\r\n          </>\r\n        ) : (\r\n          <Link to=\"/member/login\" onClick={closeNav}>로그인</Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <header>\r\n      <nav className=\"nav\">\r\n        <Link to=\"/\" onClick={closeNav}>\r\n          <div className=\"logo\">\r\n            <div className=\"logo-con\">\r\n              <img src=\"/image/logo.png\" alt=\"logo\" id=\"logo\" />\r\n              <span>Frame In</span>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n        {!isMobile && (\r\n          <div className={`nav-menu ${isNavOpen ? \"open\" : \"\"}`}>\r\n            <Link to=\"/\" className=\"nav-link\" onClick={closeNav}>\r\n              홈\r\n            </Link>\r\n            <Link to=\"/board\" className=\"nav-link\" onClick={closeNav}>\r\n              게시판\r\n            </Link>\r\n            <Link to=\"/movie/search\" className=\"nav-link\" onClick={closeNav}>\r\n              영화 검색\r\n            </Link>\r\n            <Link to=\"/movie/map\" className=\"nav-link\" onClick={closeNav}>\r\n              영화관\r\n            </Link>\r\n            {isLoggedIn && loginState.roleNames?.includes(\"ADMIN\") && (\r\n              <Link to=\"/admin\" className=\"nav-link\" onClick={closeNav}>\r\n                ADMIN\r\n              </Link>\r\n            )}\r\n          </div>\r\n        )}\r\n      </nav>\r\n      {isMobile && (\r\n        <div className={`mobile-nav ${isNavOpen ? \"open\" : \"\"}`}>\r\n          <div className=\"search-container\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"search\"\r\n              id=\"search\"\r\n              placeholder=\"영화 검색\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              onKeyDown={handleSearch}\r\n            />\r\n            <img\r\n              src=\"/image/search.svg\"\r\n              alt=\"search\"\r\n              className=\"search-icon\"\r\n              onClick={handleSearch}\r\n            />\r\n          </div>\r\n          <div className=\"nav-menu\">\r\n            <Link to=\"/\" className=\"nav-link\" onClick={closeNav}>\r\n              홈\r\n            </Link>\r\n            <Link to=\"/board\" className=\"nav-link\" onClick={closeNav}>\r\n              게시판\r\n            </Link>\r\n            <Link to=\"/movie/search\" className=\"nav-link\" onClick={closeNav}>\r\n              영화 검색\r\n            </Link>\r\n            <Link to=\"/movie/map\" className=\"nav-link\" onClick={closeNav}>\r\n              영화관\r\n            </Link>\r\n            {isLoggedIn && loginState.roleNames?.includes(\"ADMIN\") && (\r\n              <Link to=\"/admin\" className=\"nav-link\" onClick={closeNav}>\r\n                ADMIN\r\n              </Link>\r\n            )}\r\n          </div>\r\n          {renderMemberInfo()}\r\n        </div>\r\n      )}\r\n      <div className=\"bar\">\r\n        {!isMobile && (\r\n          <div className=\"search-container\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"search\"\r\n              id=\"search\"\r\n              placeholder=\"영화 검색\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              onKeyDown={handleSearch}\r\n            />\r\n            <img\r\n              src=\"/image/search.svg\"\r\n              alt=\"search\"\r\n              className=\"search-icon\"\r\n              onClick={handleSearch}\r\n            />\r\n          </div>\r\n        )}\r\n        {!isMobile && renderMemberInfo()}\r\n        <div\r\n          onClick={() => setIsDarkMode((prev) => !prev)}\r\n          className=\"toggle-button\"\r\n          role=\"button\"\r\n          tabIndex={0}\r\n          onKeyPress={(e) =>\r\n            e.key === \"Enter\" && setIsDarkMode((prev) => !prev)\r\n          }\r\n        >\r\n          {isDarkMode ? (\r\n            <img src=\"/image/light.svg\" alt=\"lightMode\" id=\"lightMode\" />\r\n          ) : (\r\n            <img src=\"/image/dark.svg\" alt=\"darkMode\" id=\"darkMode\" />\r\n          )}\r\n        </div>\r\n        <div className=\"hamburger-menu\" onClick={toggleNav}>\r\n          <img\r\n            src={isNavOpen ? \"/image/close.svg\" : \"/image/list.svg\"}\r\n            alt={isNavOpen ? \"close\" : \"menu\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  isDarkMode: PropTypes.bool.isRequired,\r\n  setIsDarkMode: PropTypes.func.isRequired,\r\n  isMemberInfoActive: PropTypes.bool.isRequired,\r\n  setIsMemberInfoActive: PropTypes.func.isRequired,\r\n};\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Outlet, useLocation } from \"react-router-dom\";\r\nimport Header from \"../components/Header\";\r\nimport Footer from \"../components/Footer\";\r\nimport Komoran from \"../components/ws/Komoran\";\r\nimport \"../css/main.css\";\r\n\r\n \r\nconst MainLayout = () => {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const [isMemberInfoActive, setIsMemberInfoActive] = useState(false);\r\n  const [isHeaderActive, setIsHeaderActive] = useState(false);\r\n  const [isChatOpen, setIsChatOpen] = useState(false); // 채팅창 상태 초기값 설정\r\n  const location = useLocation();\r\n\r\n  const updateHeaderStyle = useCallback(() => {\r\n    const scrolled = window.scrollY > 0;\r\n    const isMainPage = location.pathname === \"/\";\r\n    const isLightMode = document.body.classList.contains(\"light\");\r\n    const isDarkMode = document.body.classList.contains(\"dark\");\r\n    const isMobile = window.innerWidth <= 1023;\r\n  \r\n    setIsHeaderActive(scrolled);\r\n  \r\n    const backgroundColor = isHeaderActive || isMobile\r\n      ? isLightMode\r\n        ? \"var(--color-light-2)\"\r\n        : \"var(--color-dark-2)\"\r\n      : \"transparent\";\r\n    const textColor =\r\n      isMainPage && !scrolled && !isMobile\r\n        ? \"var(--color-dark-text)\"\r\n        : \"var(--color-light-text)\";\r\n    const imgFilter = isMainPage && !scrolled && !isMobile ? \"invert(100%)\" : \"invert(0%)\";\r\n    const spanColor = isLightMode ? textColor : \"var(--color-dark-text)\";\r\n  \r\n    const header = document.querySelector(\"header\");\r\n    if (header) {\r\n      header.style.backgroundColor = backgroundColor;\r\n    }\r\n    document\r\n      .querySelectorAll(\"header a, header .bar img, header span\")\r\n      .forEach((el) => {\r\n        switch (el.tagName) {\r\n          case \"A\":\r\n            el.style.color = isLightMode ? textColor : \"var(--color-dark-text)\";\r\n            break;\r\n          case \"IMG\":\r\n            el.style.filter = isLightMode ? imgFilter : \"invert(100%)\";\r\n            el.style.opacity = \"0.5\";\r\n            break;\r\n          case \"SPAN\":\r\n            el.style.color = spanColor;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n  }, [location.pathname, isHeaderActive]);\r\n\r\n  useEffect(() => {\r\n    document.body.classList.toggle(\"dark\", !isDarkMode);\r\n    document.body.classList.toggle(\"light\", isDarkMode);\r\n\r\n    const handleScroll = () => {\r\n      updateHeaderStyle();\r\n    };\r\n\r\n    handleScroll();\r\n    updateHeaderStyle();\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  }, [isDarkMode, location.pathname, updateHeaderStyle, isHeaderActive]);\r\n\r\n  const toggleChat = () => {\r\n    setIsChatOpen(!isChatOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        isDarkMode={isDarkMode}\r\n        setIsDarkMode={setIsDarkMode}\r\n        isMemberInfoActive={isMemberInfoActive}\r\n        setIsMemberInfoActive={setIsMemberInfoActive}\r\n        isHeaderActive={isHeaderActive}\r\n      />\r\n      <div className=\"container\">\r\n        <Outlet />\r\n      </div>\r\n      <Footer />\r\n      {/* 채팅 창 */}\r\n      {isChatOpen && <Komoran isOpen={isChatOpen} onClose={toggleChat} />}\r\n\r\n      {/* 채팅 버튼 */}\r\n      <div className=\"chat-float-button\" onClick={toggleChat}>\r\n        <img\r\n          className=\"chat-icon\"\r\n          src={isChatOpen ? \"/image/close.svg\" : \"/image/chat.svg\"}\r\n          alt={isChatOpen ? \"닫기\" : \"채팅\"}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport \"../../css/Komoran.css\";\r\n\r\n// 지도 영역 렌더링 컴포넌트\r\nconst MapPlaceholder = React.memo(({ mapRef, isKomoranOpen, cinemas, lastLocation, markers, onMapRendered }) => {\r\n  useEffect(() => {\r\n    if (mapRef.current) {\r\n      mapRef.current.style.width = \"500px\";\r\n      mapRef.current.style.height = \"300px\";\r\n      mapRef.current.style.display = isKomoranOpen ? \"block\" : \"none\";\r\n\r\n      if (window.kakao?.maps) {\r\n        const options = {\r\n          center: new window.kakao.maps.LatLng(37.5665, 126.9780), // 기본 위치 (서울)\r\n          level: 7,\r\n        };\r\n\r\n        const map = new window.kakao.maps.Map(mapRef.current, options);\r\n\r\n        if (cinemas.length > 0) {\r\n          const { lat, lon } = cinemas[0];\r\n          map.setCenter(new window.kakao.maps.LatLng(lat, lon));\r\n\r\n          cinemas.forEach((cinema) => {\r\n            const position = new window.kakao.maps.LatLng(cinema.lat, cinema.lon);\r\n            const marker = new window.kakao.maps.Marker({ position });\r\n            marker.setMap(map);\r\n\r\n            const infowindow = new window.kakao.maps.InfoWindow({\r\n              content: `<div>${cinema.cinemaName}<br>${cinema.address}</div>`,\r\n            });\r\n\r\n            window.kakao.maps.event.addListener(marker, \"click\", () => {\r\n              infowindow.open(map, marker);\r\n            });\r\n          });\r\n        } else if (lastLocation) {\r\n          const { lat, lon } = lastLocation;\r\n          map.setCenter(new window.kakao.maps.LatLng(lat, lon));\r\n\r\n          markers.forEach((markerInfo) => {\r\n            const position = new window.kakao.maps.LatLng(markerInfo.lat, markerInfo.lon);\r\n            const marker = new window.kakao.maps.Marker({ position });\r\n            marker.setMap(map);\r\n\r\n            const infowindow = new window.kakao.maps.InfoWindow({\r\n              content: `<div>${markerInfo.cinemaName}<br>${markerInfo.address}</div>`,\r\n            });\r\n\r\n            window.kakao.maps.event.addListener(marker, \"click\", () => {\r\n              infowindow.open(map, marker);\r\n            });\r\n          });\r\n        }\r\n\r\n        // 지도가 렌더링된 후 스크롤을 조정합니다.\r\n        if (onMapRendered) {\r\n          onMapRendered();\r\n        }\r\n      }\r\n    }\r\n  }, [mapRef, isKomoranOpen, cinemas, lastLocation, markers, onMapRendered]);\r\n\r\n  return <div id=\"map\" ref={mapRef}></div>;\r\n});\r\n\r\n// 채팅 메시지 컴포넌트 (불필요한 리렌더링 최소화를 위해 React.memo 사용)\r\nconst Message = React.memo(({ sender, content, isLastBotMessage, isLatestMap, isFirstMessage, mapRef, isKomoranOpen, cinemas, lastLocation, markers, onMapRendered, showTime }) => {\r\n  const renderContent = () => {\r\n    if (content === \"map\") {\r\n      if (!isLatestMap) {\r\n        return <p>지도가 업데이트 되었습니다.</p>;\r\n      }\r\n      return <MapPlaceholder mapRef={mapRef} isKomoranOpen={isKomoranOpen} cinemas={cinemas} lastLocation={lastLocation} markers={markers} onMapRendered={onMapRendered} />;\r\n    }\r\n    return <p className=\"message-content\" dangerouslySetInnerHTML={{ __html: content }}></p>;\r\n  };\r\n\r\n  return (\r\n    <div className={`${sender}-chat`} style={isFirstMessage ? { display: \"none\" } : {}}>\r\n      {showTime && <div className=\"time-display\"><p>{showTime}</p></div>}\r\n      <div className=\"message\">\r\n        <div className=\"part\">\r\n          {sender === \"bot\" && isLastBotMessage && (\r\n            <div className=\"chat-body-logo\">\r\n              <img src=\"/image/logo.png\" alt=\"logo\" id=\"logo\" />\r\n            </div>\r\n          )}\r\n          {renderContent()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst Komoran = () => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [movieDetails, setMovieDetails] = useState(null);\r\n  const [cinemaList, setCinemaList] = useState([]);\r\n  const [lastLocation, setLastLocation] = useState(null);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [mapLoaded, setMapLoaded] = useState(false);\r\n  const [isKomoranOpen, setIsKomoranOpen] = useState(true);\r\n  const [messages, setMessages] = useState([]);\r\n  const [lastBotMessageIndex, setLastBotMessageIndex] = useState(null);\r\n  const bodyRef = useRef(null);\r\n  const mapRef = useRef(null); // Ref to track the map div\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  }, []);\r\n\r\n  // 카카오맵 스크립트 로드\r\n  const loadKakaoMapScript = useCallback(() => {\r\n    if (window.kakao?.maps) {\r\n      setMapLoaded(true);\r\n      return;\r\n    }\r\n    const script = document.createElement(\"script\");\r\n    script.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_MAP_API_KEY_3}&autoload=false&libraries=services`;\r\n    script.async = true;\r\n    script.onload = () => {\r\n      window.kakao.maps.load(() => {\r\n        setMapLoaded(true);\r\n        console.log(\"카카오맵 API 로드 성공\");\r\n      });\r\n    };\r\n    script.onerror = () => console.error(\"카카오맵 API 로드 실패\");\r\n    document.head.appendChild(script);\r\n  }, []);\r\n\r\n  // 채팅 영역 스크롤 자동 조정\r\n  const scrollToBottom = useCallback(() => {\r\n    if (bodyRef.current) {\r\n      bodyRef.current.scrollTop = bodyRef.current.scrollHeight;\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages, scrollToBottom]);\r\n\r\n  // 초기 로드 시 카카오맵 스크립트 로드 및 인사말 전송\r\n  useEffect(() => {\r\n    loadKakaoMapScript();\r\n    handleSendMessage(\"안녕\");\r\n  }, [loadKakaoMapScript]);\r\n\r\n  // 영화 정보 또는 영화관 목록이 변경되면 해당 내용을 채팅에 표시\r\n  useEffect(() => {\r\n    if (movieDetails) {\r\n      const { poster_path, movieNm, openDt, audiAcc, overview } = movieDetails;\r\n      const posterImage = poster_path\r\n        ? `<img src=\"${poster_path}\" alt=\"${movieNm} 포스터\" class=\"movie-poster\" />`\r\n        : \"포스터 이미지 없음\";\r\n\r\n      showMessage(posterImage);\r\n      showMessage(`영화 이름: ${movieNm}`);\r\n      showMessage(`개봉일: ${openDt}`);\r\n      showMessage(`누적 관객수: ${Number(audiAcc).toLocaleString(\"ko-KR\")}명`);\r\n      showMessage(`줄거리: ${overview}`);\r\n    }\r\n    if (cinemaList.length > 0 && mapLoaded) {\r\n      // 일정 시간 딜레이를 준 후 지도를 렌더링\r\n      setTimeout(() => {\r\n        showMessage(\"map\");\r\n      }, 100); // 10ms 지연\r\n    }\r\n  }, [movieDetails, cinemaList, mapLoaded]);\r\n\r\n  // 메시지 추가 (bot)\r\n  const showMessage = useCallback((msgContent) => {\r\n    if (!msgContent) return;\r\n    setMessages((prev) => {\r\n      const newMessages = [...prev, { sender: \"bot\", content: msgContent, time: new Date() }];\r\n      setLastBotMessageIndex(newMessages.length - 1);\r\n      return newMessages;\r\n    });\r\n  }, []);\r\n\r\n  // 백엔드로 메시지 전송\r\n  const sendMessageToBackend = useCallback(\r\n    async (msg) => {\r\n      try {\r\n        const response = await fetch(\"http://43.201.20.172:8090/botController\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          },\r\n          body: new URLSearchParams({ message: msg }),\r\n        });\r\n        const responseData = await response.json();\r\n        const { answer } = responseData;\r\n\r\n        // 상태 초기화 전에 마지막 위치와 마커 저장\r\n        if (cinemaList.length > 0) {\r\n          const { lat, lon } = cinemaList[0];\r\n          setLastLocation({ lat, lon });\r\n          setMarkers(cinemaList.map(cinema => ({\r\n            lat: cinema.lat,\r\n            lon: cinema.lon,\r\n            cinemaName: cinema.cinemaName,\r\n            address: cinema.address\r\n          })));\r\n        }\r\n\r\n        // 상태 초기화\r\n        setCinemaList([]);\r\n        setMovieDetails(null);\r\n\r\n        if (Array.isArray(answer.message)) {\r\n          answer.message.forEach((msgObj) => showMessage(msgObj.message));\r\n        } else {\r\n          showMessage(answer.message);\r\n        }\r\n\r\n        if (answer.cinemaList && answer.cinemaList.length > 0) {\r\n          setCinemaList(answer.cinemaList);\r\n        } else if (answer.movie) {\r\n          setMovieDetails(answer.movie);\r\n        }\r\n        if (answer.content) {\r\n          showMessage(answer.content);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error sending message:\", error);\r\n      }\r\n    },\r\n    [cinemaList, showMessage]\r\n  );\r\n\r\n  // 메시지 전송 (사용자 입력)\r\n  const handleSendMessage = useCallback(\r\n    async (msg) => {\r\n      const trimmedMsg = msg.trim();\r\n      if (trimmedMsg.length < 2) return;\r\n      setMessages((prev) => [...prev, { sender: \"user\", content: trimmedMsg, time: new Date() }]);\r\n      setMessage(\"\");\r\n\r\n      // mapRef 초기화\r\n      if (mapRef.current) {\r\n        mapRef.current.innerHTML = \"\"; // 내용 비우기\r\n        mapRef.current.style.width = \"0px\"; // 초기 스타일 설정\r\n        mapRef.current.style.height = \"0px\"; // 초기 스타일 설정\r\n      }\r\n\r\n      await sendMessageToBackend(trimmedMsg);\r\n    },\r\n    [sendMessageToBackend]\r\n  );\r\n\r\n  // 채팅 입력 버튼 클릭 시 처리\r\n  const handleButtonClick = () => {\r\n    handleSendMessage(message);\r\n  };\r\n\r\n  // 채팅창 열고 닫기 토글\r\n  const toggleKomoran = () => {\r\n    setIsKomoranOpen((prev) => !prev);\r\n  };\r\n\r\n  // 현재 시간 계산\r\n  const getTime = (date) => {\r\n    const now = date || new Date();\r\n    let hours = now.getHours();\r\n    const ampm = hours >= 12 ? \"오후\" : \"오전\";\r\n    hours = hours % 12 || 12;\r\n    const minutes = now.getMinutes();\r\n    return `${ampm} ${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`komoran-container ${isKomoranOpen ? \"open\" : \"closed\"}`}>\r\n        <div className=\"komoran-header\">\r\n          <div className=\"chat-header-logo\">\r\n            <img src=\"/image/logo.png\" alt=\"logo\" id=\"logo\" />\r\n          </div>\r\n          <div className=\"header-title\">Frame In</div>\r\n        </div>\r\n\r\n        <div className=\"komoran-body\" ref={bodyRef}>\r\n          <div id=\"default\">\r\n            <div className=\"default-img\">\r\n              <img src=\"/image/logo.png\" alt=\"logo\" id=\"logo\" />\r\n            </div>\r\n            <p>\r\n              <b>Frame In에 문의하기</b>\r\n            </p>\r\n          </div>\r\n          {messages.map((msg, index) => {\r\n            let isLatestMap = false;\r\n            if (msg.content === \"map\") {\r\n              const lastMapIndex = messages\r\n                .map((m) => m.content)\r\n                .lastIndexOf(\"map\");\r\n              isLatestMap = index === lastMapIndex;\r\n            }\r\n\r\n            const isFirstMessage = index === 0 && msg.content === \"안녕\";\r\n\r\n            const showTime = index === 0 || (index > 0 && getTime(msg.time) !== getTime(messages[index - 1].time));\r\n\r\n            // isLastBotMessage 설정\r\n            const isLastBotMessage = msg.sender === \"bot\" && (index === messages.length - 1 || messages[index + 1]?.sender === \"user\");\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                {showTime && (\r\n                  <div className=\"time-display\">\r\n                    <p>{getTime(msg.time)}</p>\r\n                  </div>\r\n                )}\r\n                <Message\r\n                  sender={msg.sender}\r\n                  content={msg.content}\r\n                  isLastBotMessage={isLastBotMessage}\r\n                  isLatestMap={isLatestMap}\r\n                  isFirstMessage={isFirstMessage}\r\n                  mapRef={mapRef}\r\n                  isKomoranOpen={isKomoranOpen}\r\n                  cinemas={cinemaList}\r\n                  lastLocation={lastLocation}\r\n                  markers={markers}\r\n                  onMapRendered={scrollToBottom}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"message-input\">\r\n          <input\r\n            type=\"text\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                handleSendMessage(message);\r\n              }\r\n            }}\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleButtonClick}>전송</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-float-button\" onClick={toggleKomoran}>\r\n        채팅\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Komoran;","import React from \"react\";\r\nimport \"../css/Footer.css\"; // CSS 파일 임포트\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <p>어벤저스 팀</p>  \r\n      <p>서울특별시 노원구 상계동 340-6</p>\r\n      <p>대표이메일:ex@example.com</p>\r\n      <p>© Movie. All Rights Reserved</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n"],"names":["Header","_ref","_loginState$roleNames","_loginState$roleNames2","isDarkMode","setIsDarkMode","isMemberInfoActive","setIsMemberInfoActive","dispatch","useDispatch","navigate","useNavigate","memberInfoRef","useRef","memberNameRef","loginState","useSelector","state","loginSlice","isLoggedIn","email","searchQuery","setSearchQuery","useState","isNavOpen","setIsNavOpen","isMobile","setIsMobile","window","innerWidth","handleLogout","logout","alert","replace","location","reload","memberInfoOnClick","closeNav","useEffect","handleClickOutside","event","current","document","querySelector","contains","target","adjustFontSize","span","parentWidth","parentElement","offsetWidth","spanWidth","fontSize","Math","floor","style","handleResize","addEventListener","removeEventListener","nickname","handleSearch","e","type","key","trim","isChosung","text","test","queryToUse","Hangul","searchType","encodeURIComponent","renderMemberInfo","_jsxs","className","ref","onClick","children","_jsx","src","alt","_Fragment","Link","to","id","roleNames","includes","name","placeholder","value","onChange","onKeyDown","prev","role","tabIndex","onKeyPress","toggleNav","MainLayout","isHeaderActive","setIsHeaderActive","isChatOpen","setIsChatOpen","useLocation","updateHeaderStyle","useCallback","scrolled","scrollY","isMainPage","pathname","isLightMode","body","classList","backgroundColor","textColor","imgFilter","spanColor","header","querySelectorAll","forEach","el","tagName","color","filter","opacity","toggle","handleScroll","toggleChat","Outlet","Footer","Komoran","isOpen","onClose","MapPlaceholder","React","mapRef","isKomoranOpen","cinemas","lastLocation","markers","onMapRendered","_window$kakao","width","height","display","kakao","maps","options","center","LatLng","level","map","Map","length","lat","lon","setCenter","cinema","position","marker","Marker","setMap","infowindow","InfoWindow","content","cinemaName","address","addListener","open","markerInfo","Message","_ref2","sender","isLastBotMessage","isLatestMap","isFirstMessage","showTime","dangerouslySetInnerHTML","__html","message","setMessage","movieDetails","setMovieDetails","cinemaList","setCinemaList","setLastLocation","setMarkers","mapLoaded","setMapLoaded","setIsKomoranOpen","messages","setMessages","lastBotMessageIndex","setLastBotMessageIndex","bodyRef","inputRef","focus","loadKakaoMapScript","_window$kakao2","script","createElement","async","onload","load","console","log","onerror","error","head","appendChild","scrollToBottom","scrollTop","scrollHeight","handleSendMessage","poster_path","movieNm","openDt","audiAcc","overview","showMessage","Number","toLocaleString","setTimeout","msgContent","newMessages","time","Date","sendMessageToBackend","response","fetch","method","headers","URLSearchParams","msg","responseData","json","answer","Array","isArray","msgObj","movie","trimmedMsg","innerHTML","getTime","date","now","hours","getHours","ampm","minutes","getMinutes","index","_messages","m","lastIndexOf","handleButtonClick","toggleKomoran"],"sourceRoot":""}