{"version":3,"file":"static/js/577.7d2129c0.chunk.js","mappings":"wMAQA,MA+aA,EA/amBA,KAAO,IAADC,EACvB,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAmBC,IAAwBJ,EAAAA,EAAAA,UAAS,KACpDK,EAAcC,IAAmBN,EAAAA,EAAAA,UAAS,UAC1CO,EAAaC,IAAkBR,EAAAA,EAAAA,UAAS,IACxCS,IAAmBT,EAAAA,EAAAA,UAAS,KAC5BU,EAAkBC,IAAuBX,EAAAA,EAAAA,UAAS,OAEnDY,IADWC,EAAAA,EAAAA,OACEC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,eACzCC,EAAWC,IAAgBlB,EAAAA,EAAAA,WAAS,IACpCmB,EAAeC,IAAoBpB,EAAAA,EAAAA,UAAS,OAC5CqB,EAAMC,IAAWtB,EAAAA,EAAAA,UAAS,IAC1BuB,EAAUC,IAAexB,EAAAA,EAAAA,UAAS,CACvCyB,MAAO,GACPC,QAAS,GACTC,SAAU,GACVC,MAAO,GACPC,SAAU,QAGZC,EAAAA,EAAAA,YAAU,KACeC,WACrB,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,wCACjCnC,EAAaiC,EAASG,MACtB/B,EAAqB4B,EAASG,KAChC,CAAE,MAAOC,GACPC,QAAQC,MAAM,8EAAmBF,EACnC,GAEFG,EAAgB,GACf,IAGH,MAAMC,EAAcC,IAClB,MAAMC,EAAO,IAAIC,KAAKF,GAChBG,EAAOF,EAAKG,cACZC,EAAQC,OAAOL,EAAKM,WAAa,GAAGC,SAAS,EAAG,KAChDC,EAAMH,OAAOL,EAAKS,WAAWF,SAAS,EAAG,KACzCG,EAAQL,OAAOL,EAAKW,YAAYJ,SAAS,EAAG,KAC5CK,EAAUP,OAAOL,EAAKa,cAAcN,SAAS,EAAG,KAChDO,EAAUT,OAAOL,EAAKe,cAAcR,SAAS,EAAG,KACtD,OAAGL,EAAK,IACC,KAEF,GAAGA,KAAQE,KAASI,KAAOE,KAASE,KAAWE,GAAS,EAI3DE,EAAwB/B,IAC5BU,QAAQsB,IAAI,+CAAahC,GACzBhB,EAAoBgB,GACpB,IAAIiC,EAAW,GAEbA,EADe,QAAbjC,EACS7B,EAEAA,EAAU+D,QAAQC,GAAUA,EAAMnC,WAAaA,IAE5DvB,EAAqBwD,GACrBpD,EAAe,EAAE,EAgDbuD,EAAqBxD,EAAcE,EACnCuD,EAAsBD,EAAqBtD,EAC3CwD,EACJ9D,EAAkB+D,MAAMF,EAAqBD,IAAuB,GAEhEI,EAAoBC,IACxB5D,EAAe4D,EAAW,EAGtBC,EAAgBlE,EAAkBmE,QAAU,EAC5CC,EAAaC,KAAKC,KAAKJ,EAAgB5D,IAUvC,WAAEiE,EAAU,SAAEC,GAROC,MACzB,MACMF,EADY,EAEhBF,KAAKK,OAAOtE,EAAc,GAFV,GAEwC,EAE1D,MAAO,CAAEmE,aAAYC,SADJH,KAAKM,IAAIJ,EAHR,EAGiC,EAAGH,GACvB,EAGAK,GAE3BG,EAAqBC,IACzB,MAAM,KAAEC,EAAI,MAAEC,EAAK,MAAEC,GAAUH,EAAEI,OAE/B5D,EADW,aAATyD,EACWI,IAAI,IAAWA,EAAMxD,SAAUsD,EAAM,KAChC,aAATF,EAEII,IAAI,IAAWA,EAAMC,SAAUJ,IAE/BG,IAAI,IAAWA,EAAM,CAACJ,GAAOC,IAC5C,EAiBIK,EAAYf,KAAKgB,IAAI,EAAGnE,EAAO,GAC/BoE,EAAUjB,KAAKM,IAAIP,EAAa,EAAGlD,EAAO,GAC1CqE,EAAc,GACpB,IAAK,IAAIC,EAAIJ,EAAWI,GAAKF,EAASE,IACpCD,EAAYE,KAAKD,GAiDnB,OACEE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2CAGJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAMvC,EAAqB,OACpCoC,UAAgC,QAArBpF,EAA6B,kBAAoB,GAAGqF,SAChE,qCAGDC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAMvC,EAAqB,kCACpCoC,UAAgC,mCAArBpF,EAA+B,kBAAoB,GAAGqF,SAClE,oCAGDC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAMvC,EAAqB,kCACpCoC,UAAgC,mCAArBpF,EAA+B,kBAAoB,GAAGqF,SAClE,oCAGDC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAMvC,EAAqB,kCACpCoC,UAAgC,mCAArBpF,EAA+B,kBAAoB,GAAGqF,SAClE,oCAGDC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAMvC,EAAqB,4BACpCoC,UAAgC,6BAArBpF,EAA8B,kBAAoB,GAAGqF,SACjE,iCAMHF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,UACEX,MAAO7E,EACP6F,SAAWlB,GAAM1E,EAAgB0E,EAAEI,OAAOF,OAAQa,SAAA,EAElDC,EAAAA,EAAAA,KAAA,UAAQd,MAAM,QAAOa,SAAC,kBACtBC,EAAAA,EAAAA,KAAA,UAAQd,MAAM,UAASa,SAAC,kBACxBC,EAAAA,EAAAA,KAAA,UAAQd,MAAM,QAAOa,SAAC,2BAExBC,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLC,YAAY,0DACZlB,MAAOjF,EACPiG,SAAWlB,GAAM9E,EAAe8E,EAAEI,OAAOF,UAE3Cc,EAAAA,EAAAA,KAAA,UAAQC,QAtMOI,KACnB,MAAMC,EAAexG,EAAU+D,QAAQC,IACrC,OAAQzD,GACN,IAAK,QACH,OAAOyD,EAAMrC,MAAM8E,cAAcC,SAASvG,EAAYsG,eACxD,IAAK,UACH,OAAOzC,EAAMpC,QACV6E,cACAC,SAASvG,EAAYsG,eAC1B,IAAK,QACH,OAAOzC,EAAMlC,MAAM2E,cAAcC,SAASvG,EAAYsG,eACxD,QACE,OAAO,EACX,IAIF,IAAIE,EACmB,QAArB/F,EACI4F,EAAazC,QAAQC,GAAUA,EAAMnC,WAAajB,IAClD4F,EACNlG,EAAqBqG,GACrBjG,EAAe,EAAE,EAgLiBuF,SAAC,iBAAY,QAI7CF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,QACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,8BACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACG9B,EAAgByC,KAAK5C,IACpB+B,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKjC,EAAM6C,MACXX,EAAAA,EAAAA,KAAA,MAAIF,UAAU,kBAAiBC,SAAEjC,EAAMrC,SACvCuE,EAAAA,EAAAA,KAAA,MAAAD,SAAKjC,EAAMnC,YACXqE,EAAAA,EAAAA,KAAA,MAAAD,SAAKjC,EAAM8C,kBACXZ,EAAAA,EAAAA,KAAA,MAAAD,SAAKjC,EAAM+C,OACXb,EAAAA,EAAAA,KAAA,MAAAD,SAAKjC,EAAMgD,cACXjB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACG,IACAjC,EAAMiD,YACLf,EAAAA,EAAAA,KAAA,OACEgB,IAAK,oCAAoClD,EAAMiD,aAC/CE,IAAKnD,EAAMoD,aAGb,mBAGJlB,EAAAA,EAAAA,KAAA,MAAAD,SAAKvD,EAAWsB,EAAMqD,eACtBnB,EAAAA,EAAAA,KAAA,MAAAD,SAAKvD,EAAWsB,EAAMsD,eACtBpB,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,QAAMC,QAASA,IA/GJnC,KAEvBtC,EAAY,CACVmF,GAAI7C,EAAM6C,GACVlF,MAAOqC,EAAMrC,MACbC,QAASoC,EAAMpC,QACfC,SAAUmC,EAAMnC,SAChBC,MAAOkC,EAAMlC,MACb0D,SAAUxB,EAAM8C,eAChB/E,SAAU,OAEZT,EAAiB0C,GACjB5C,GAAa,EAAK,EAmGemG,CAAgBvD,GAAOiC,SAAC,sBArBxCjC,EAAM6C,YA4BrBd,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAM9B,EAAiB,GAAImD,SAAmB,IAATjG,EAAW0E,SAAC,kBAGlEC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAM9B,EAAiB9C,EAAO,GACvCiG,SAAmB,IAATjG,EAAW0E,SACtB,iBAIAL,EAAYgB,KAAKa,IAChBvB,EAAAA,EAAAA,KAAA,UAEEC,QAASA,IAAM9B,EAAiBoD,GAChCzB,UAAWzE,IAASkG,EAAU,SAAW,GAAGxB,SAE3CwB,EAAU,GAJNA,MAQTvB,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAM9B,EAAiB9C,EAAO,GACvCiG,SAAUjG,IAASkD,EAAa,EAAEwB,SACnC,kBAGDC,EAAAA,EAAAA,KAAA,UACEC,QAASA,IAAM9B,EAAiBI,EAAa,GAC7C+C,SAAUjG,IAASkD,EAAa,EAAEwB,SACnC,0BAIF9E,IACC+E,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qCACJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,wBACNC,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLlB,KAAK,WACLC,MAAO3D,EAAS+D,SAChBY,SAAUnB,QAGdc,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,kBACNC,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLlB,KAAK,QACLC,MAAO3D,EAASE,MAChByE,SAAUnB,QAGdc,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,8BACNF,EAAAA,EAAAA,MAAA,UACEX,MAAO3D,EAASI,SAChBuE,SAAUnB,EACVE,KAAK,WAAUc,SAAA,EAEfC,EAAAA,EAAAA,KAAA,UAAQd,MAAM,iCAAOa,SAAC,oCACtBC,EAAAA,EAAAA,KAAA,UAAQd,MAAM,iCAAOa,SAAC,oCACtBC,EAAAA,EAAAA,KAAA,UAAQd,MAAM,iCAAOa,SAAC,mCACD,QAApBlG,EAAAe,EAAW4G,iBAAS,IAAA3H,GAApBA,EAAsB2G,SAAS,UAC9BR,EAAAA,EAAAA,KAAA,UAAQd,MAAM,2BAAMa,SAAC,8BAErBC,EAAAA,EAAAA,KAAAyB,EAAAA,SAAA,WAIN5B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,kBACNC,EAAAA,EAAAA,KAAA,YACEf,KAAK,UACLC,MAAO3D,EAASG,QAChBwE,SAAUnB,QAGdc,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,kBACNC,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLQ,GAAG,cACHe,MAAO,CAAEC,QAAS,QAClBzB,SArTYlB,IACxB,MAAM4C,EAAO5C,EAAEI,OAAOD,MAAM,GAE5B,GAAIyC,EAAM,CACR,MAAMC,EAAoB,CAAC,MAAO,OAAQ,MAAO,MAAO,MAAO,OACzDC,EAAgBF,EAAK3C,KAAK8C,MAAM,KAAKC,MAAMzB,cAEjD,IAAKsB,EAAkBrB,SAASsB,GAI9B,OAHAG,MAAM,sFACNjD,EAAEI,OAAOF,MAAQ,QACjB1D,GAAa6D,IAAI,IAAWA,EAAMxD,SAAU,SAI9CL,GAAa6D,IAAI,IAAWA,EAAMxD,SAAU+F,KAC9C,MAwSU/B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SAAOkC,QAAQ,cAAcpC,UAAU,aAAYC,SAAC,+BAGpDC,EAAAA,EAAAA,KAAA,QAAMW,GAAG,oBAAmBZ,SACzBxE,EAASM,SACNN,EAASM,SAASoD,KACL,OAAb9D,QAAa,IAAbA,GAAAA,EAAe+F,WACf/F,EAAc+F,WACd,wDAIVrB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,UAAQC,QAjRClE,UACnB,UACQoG,EAAAA,EAASC,OACb,gDAAgDjH,EAAcwF,MAEhE,MAAM3E,QAAiBC,EAAAA,EAAMC,IAAI,wCACjCnC,EAAaiC,EAASG,MACtB/B,EAAqB4B,EAASG,MAC9BjB,GAAa,EACf,CAAE,MAAOoB,GACPD,QAAQC,MAAM,6BAAUA,EAC1B,GAsQwCyD,SAAC,kBAC/BC,EAAAA,EAAAA,KAAA,UAAQC,QA7PClE,UACnB,MAAMsG,EAAiB,IAAIC,SAC3BD,EAAeE,OAAO,KAAMhH,EAASoF,IACrC0B,EAAeE,OAAO,QAAShH,EAASE,OACxC4G,EAAeE,OAAO,UAAWhH,EAASG,SAC1C2G,EAAeE,OAAO,WAAYhH,EAASI,UAC3C0G,EAAeE,OAAO,QAAShH,EAASK,OAGpCL,EAASM,UACXwG,EAAeE,OAAO,WAAYhH,EAASM,UAG7C,UACQsG,EAAAA,EAASK,KACb,+CACAH,GAIF,MAAMrG,QAAiBC,EAAAA,EAAMC,IAAI,wCACjCnC,EAAaiC,EAASG,MACtB/B,EAAqB4B,EAASG,MAC9BjB,GAAa,EACf,CAAE,MAAOoB,GACPD,QAAQC,MAAM,4DAAgBA,EAChC,GAmOwCyD,SAAC,kBAC/BC,EAAAA,EAAAA,KAAA,QACEF,UAAU,kBACVG,QAASA,IAAM/E,GAAa,GAAO6E,SACpC,qBAOL,C,sEChbV,MAAMoC,EAASlG,EAAAA,EAAMwG,SAuDrBN,EAASO,aAAaC,QAAQC,KA9CZC,IACd,MAAMC,GAAWC,EAAAA,EAAAA,IAAU,UAC3B,IAAID,EACA,OAAOE,QAAQC,OACX,CAACjH,SACA,CAACG,KACA,CAACG,MAAO,oBAKlB,MAAM,YAAC4G,GAAeJ,EAEtB,OADAD,EAAOM,QAAQC,cAAe,UAAUF,IACjCL,CAAM,IAGEzG,GACR4G,QAAQC,OAAO7G,KA8B1B+F,EAASO,aAAa1G,SAAS4G,KA3Bf7G,UAEZ,MAAMI,EAAMkH,EAAIlH,KAChB,GAAGA,GAAsB,uBAAdA,EAAKG,MAA8B,CAC1C,MAAMgH,GAAkBP,EAAAA,EAAAA,IAAU,UAC5BQ,OAhCIxH,OAAOmH,EAAaM,KAClC,MAAMC,EAAQ,CAACN,QAAS,CAAC,cAAiB,UAAUD,MAGpD,aAFkBjH,EAAAA,EAAMC,IAAI,6DAA6DsH,IAAgBC,IAE9FtH,IAAI,EA4BQuH,CAAWJ,EAAkBJ,YAC5CI,EAAkBE,cACtBF,EAAkBJ,YAAYK,EAAOL,YACrCI,EAAkBE,aAAaD,EAAOC,cAEtCG,EAAAA,EAAAA,IAAU,SAAUC,KAAKC,UAAUP,GAAoB,GAEvD,MAAMQ,EAAgBT,EAAIR,OAG1B,OAFAiB,EAAgBX,QAAQC,cAAe,UAAUG,EAAOL,oBAE3CjH,EAAAA,EAAAA,GAAM6H,EACvB,CAGA,OAAOT,CAAG,IAGMjH,GACT4G,QAAQC,OAAO7G,KAM1B,S","sources":["components/admin/board/AdminBoard.jsx","util/jwtUtil.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport \"../../../css/admin/Cinemas.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport jwtAxios from \"../../../util/jwtUtil\";\r\nimport \"../../../css/admin/BoardList.css\";\r\n\r\nconst AdminBoard = () => {\r\n  const [boardList, setBoardList] = useState([]); // 전체 게시글 리스트 상태\r\n  const [searchQuery, setSearchQuery] = useState(\"\"); // 검색어 상태\r\n  const [filteredBoardList, setFilteredBoardList] = useState([]); // 필터링된 게시글 리스트\r\n  const [searchOption, setSearchOption] = useState(\"title\"); // 검색 항목 (제목, 내용, 글쓴이)\r\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지\r\n  const [messagesPerPage] = useState(10); // 페이지당 게시글 수\r\n  const [selectedCategory, setSelectedCategory] = useState(\"all\"); // 선택된 카테고리\r\n  const navigate = useNavigate();\r\n  const loginState = useSelector((state) => state.loginSlice);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [selectedBoard, setSelectedBoard] = useState(null);\r\n  const [page, setPage] = useState(0);\r\n  const [formData, setFormData] = useState({\r\n    title: \"\",\r\n    content: \"\",\r\n    category: \"\",\r\n    email: \"\",\r\n    itemFile: null, // 파일 상태 추가\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchBoardList = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://43.201.20.172:8090/board/List\");\r\n        setBoardList(response.data); // 받아온 데이터로 상태 업데이트\r\n        setFilteredBoardList(response.data); // 초기에는 모든 게시글을 표시\r\n      } catch (err) {\r\n        console.error(\"아이템 리스트 불러오기 실패\", err);\r\n      }\r\n    };\r\n    fetchBoardList();\r\n  }, []);\r\n\r\n  // 날짜 포맷 함수\r\n  const formatDate = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    const hours = String(date.getHours()).padStart(2, \"0\");\r\n    const minutes = String(date.getMinutes()).padStart(2, \"0\");\r\n    const seconds = String(date.getSeconds()).padStart(2, \"0\");\r\n    if(year<2000) {\r\n      return null;\r\n    }\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n  };\r\n\r\n  // 카테고리 버튼 클릭 시 카테고리 필터링\r\n  const handleCategoryFilter = (category) => {\r\n    console.log(\"선택된 카테고리:\", category); // 카테고리 값 출력\r\n    setSelectedCategory(category);\r\n    let filtered = [];\r\n    if (category === \"all\") {\r\n      filtered = boardList; // 모든 게시글을 다시 표시\r\n    } else {\r\n      filtered = boardList.filter((board) => board.category === category);\r\n    }\r\n    setFilteredBoardList(filtered);\r\n    setCurrentPage(1); // 카테고리 필터링 후 첫 페이지로 이동\r\n  };\r\n  \r\n\r\n  // 검색 버튼 클릭 시 필터링된 게시글 리스트 설정\r\n  const handleSearch = () => {\r\n    const filteredList = boardList.filter((board) => {\r\n      switch (searchOption) {\r\n        case \"title\":\r\n          return board.title.toLowerCase().includes(searchQuery.toLowerCase());\r\n        case \"content\":\r\n          return board.content\r\n            .toLowerCase()\r\n            .includes(searchQuery.toLowerCase());\r\n        case \"email\":\r\n          return board.email.toLowerCase().includes(searchQuery.toLowerCase());\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n\r\n    // 카테고리가 필터링되었다면 그 카테고리에 맞는 리스트만 필터링\r\n    let finalFilteredList =\r\n      selectedCategory !== \"all\"\r\n        ? filteredList.filter((board) => board.category === selectedCategory)\r\n        : filteredList;\r\n    setFilteredBoardList(finalFilteredList); // 정렬된 게시글 리스트 상태 업데이트\r\n    setCurrentPage(1); // 검색 후 첫 페이지로 이동\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n\r\n    if (file) {\r\n      const allowedExtensions = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"svg\"];\r\n      const fileExtension = file.name.split(\".\").pop().toLowerCase();\r\n\r\n      if (!allowedExtensions.includes(fileExtension)) {\r\n        alert(\"허용되지 않은 파일 형식입니다.\");\r\n        e.target.value = \"\";\r\n        setFormData((prev) => ({ ...prev, itemFile: null }));\r\n        return;\r\n      }\r\n\r\n      setFormData((prev) => ({ ...prev, itemFile: file }));\r\n    }\r\n  };\r\n\r\n  const indexOfLastMessage = currentPage * messagesPerPage;\r\n  const indexOfFirstMessage = indexOfLastMessage - messagesPerPage;\r\n  const currentMessages =\r\n    filteredBoardList.slice(indexOfFirstMessage, indexOfLastMessage) || [];\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  const totalMessages = filteredBoardList.length || 0;\r\n  const totalPages = Math.ceil(totalMessages / messagesPerPage);\r\n\r\n  const getPaginationRange = () => {\r\n    const pageLimit = 5;\r\n    const rangeStart =\r\n      Math.floor((currentPage - 1) / pageLimit) * pageLimit + 1;\r\n    const rangeEnd = Math.min(rangeStart + pageLimit - 1, totalPages);\r\n    return { rangeStart, rangeEnd };\r\n  };\r\n\r\n  const { rangeStart, rangeEnd } = getPaginationRange();\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, files } = e.target;\r\n    if (name === \"itemFile\") {\r\n      setFormData((prev) => ({ ...prev, itemFile: files[0] }));\r\n    } else if (name === \"nickname\") {\r\n      // nickname 처리\r\n      setFormData((prev) => ({ ...prev, nickname: value }));\r\n    } else {\r\n      setFormData((prev) => ({ ...prev, [name]: value }));\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    try {\r\n      await jwtAxios.delete(\r\n        `http://43.201.20.172:8090/admin/board/delete/${selectedBoard.id}`\r\n      );\r\n      const response = await axios.get(\"http://43.201.20.172:8090/board/List\");\r\n      setBoardList(response.data); // 받아온 데이터로 상태 업데이트\r\n      setFilteredBoardList(response.data); // 초기에는 모든 게시글을 표시\r\n      setShowModal(false);\r\n    } catch (error) {\r\n      console.error(\"삭제 실패:\", error);\r\n    }\r\n  };\r\n\r\n  const startPage = Math.max(0, page - 2);\r\n  const endPage = Math.min(totalPages - 1, page + 2);\r\n  const pageNumbers = [];\r\n  for (let i = startPage; i <= endPage; i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  const handleUpdate = async () => {\r\n    const formDataToSend = new FormData();\r\n    formDataToSend.append(\"id\", formData.id);\r\n    formDataToSend.append(\"title\", formData.title);\r\n    formDataToSend.append(\"content\", formData.content);\r\n    formDataToSend.append(\"category\", formData.category);  // 카테고리만 추가\r\n    formDataToSend.append(\"email\", formData.email);\r\n  \r\n    // 파일이 있으면 함께 추가\r\n    if (formData.itemFile) {\r\n      formDataToSend.append(\"itemFile\", formData.itemFile);\r\n    }\r\n  \r\n    try {\r\n      await jwtAxios.post(\r\n        `http://43.201.20.172:8090/admin/board/update`,\r\n        formDataToSend\r\n      );\r\n  \r\n      // 업데이트 후 게시글 리스트를 새로고침\r\n      const response = await axios.get(\"http://43.201.20.172:8090/board/List\");\r\n      setBoardList(response.data);\r\n      setFilteredBoardList(response.data);\r\n      setShowModal(false); // 모달 닫기\r\n    } catch (error) {\r\n      console.error(\"게시글 업데이트 실패:\", error);\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  const handleEditClick = (board) => {\r\n    // 선택된 게시글 데이터를 폼에 채워 넣기\r\n    setFormData({\r\n      id: board.id,\r\n      title: board.title,\r\n      content: board.content,\r\n      category: board.category,\r\n      email: board.email,\r\n      nickname: board.memberNickName,\r\n      itemFile: null, // 파일을 초기화. 파일 수정이 아니라면 null로 설정\r\n    });\r\n    setSelectedBoard(board); // 선택된 게시글 정보 저장\r\n    setShowModal(true); // 모달 표시\r\n  };\r\n\r\n  return (\r\n    <div className=\"board-list\">\r\n      <h2>게시글 리스트</h2>\r\n\r\n      {/* 카테고리 선택 버튼 추가 */}\r\n      <div className=\"category\">\r\n        <button\r\n          onClick={() => handleCategoryFilter(\"all\")}\r\n          className={selectedCategory === \"all\" ? \"active-category\" : \"\"}\r\n        >\r\n          전체 게시판\r\n        </button>\r\n        <button\r\n          onClick={() => handleCategoryFilter(\"문의게시판\")}\r\n          className={selectedCategory === \"문의게시판\" ? \"active-category\" : \"\"}\r\n        >\r\n          문의게시판\r\n        </button>\r\n        <button\r\n          onClick={() => handleCategoryFilter(\"자유게시판\")}\r\n          className={selectedCategory === \"자유게시판\" ? \"active-category\" : \"\"}\r\n        >\r\n          자유게시판\r\n        </button>\r\n        <button\r\n          onClick={() => handleCategoryFilter(\"영화게시판\")}\r\n          className={selectedCategory === \"영화게시판\" ? \"active-category\" : \"\"}\r\n        >\r\n          영화게시판\r\n        </button>\r\n        <button\r\n          onClick={() => handleCategoryFilter(\"공지사항\")}\r\n          className={selectedCategory === \"공지사항\" ? \"active-category\" : \"\"}\r\n        >\r\n          공지사항\r\n        </button>\r\n      </div>\r\n\r\n      {/* 검색 기능 */}\r\n      <div className=\"search-form\">\r\n        <select\r\n          value={searchOption}\r\n          onChange={(e) => setSearchOption(e.target.value)} // 검색 옵션 상태 업데이트\r\n        >\r\n          <option value=\"title\">제목</option>\r\n          <option value=\"content\">내용</option>\r\n          <option value=\"email\">글쓴이</option>\r\n        </select>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"검색어를 입력하세요\"\r\n          value={searchQuery}\r\n          onChange={(e) => setSearchQuery(e.target.value)} // 검색어 상태 업데이트\r\n        />\r\n        <button onClick={handleSearch}>검색</button>{\" \"}\r\n        {/* 검색 버튼 클릭 시 handleSearch 실행 */}\r\n      </div>\r\n\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>제목</th>\r\n            <th>카테고리</th>\r\n            <th>글쓴이</th>\r\n            <th>조회수</th>\r\n            <th>댓글수</th>\r\n            <th>파일</th>\r\n            <th>createTime</th>\r\n            <th>updateTime</th>\r\n            <th>수정</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {currentMessages.map((board) => (\r\n            <tr key={board.id}>\r\n              <td>{board.id}</td>\r\n              <td className=\"boardList_title\">{board.title}</td>\r\n              <td>{board.category}</td>\r\n              <td>{board.memberNickName}</td>\r\n              <td>{board.hit}</td>\r\n              <td>{board.replyCount}</td>\r\n              <td>\r\n                {\" \"}\r\n                {board.newImgName ? (\r\n                  <img\r\n                    src={`http://43.201.20.172:8090/upload/${board.newImgName}`}\r\n                    alt={board.oldImgName}\r\n                  />\r\n                ) : (\r\n                  \"없음\"\r\n                )}\r\n              </td>\r\n              <td>{formatDate(board.createTime)}</td>\r\n              <td>{formatDate(board.updateTime)}</td>\r\n              <td>\r\n                <span onClick={() => handleEditClick(board)}> 수정</span>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {/* 페이징 처리 */}\r\n      <div className=\"pagination\">\r\n        <button onClick={() => handlePageChange(0)} disabled={page === 0}>\r\n          처음\r\n        </button>\r\n        <button\r\n          onClick={() => handlePageChange(page - 1)}\r\n          disabled={page === 0}\r\n        >\r\n          이전\r\n        </button>\r\n\r\n        {pageNumbers.map((pageNum) => (\r\n          <button\r\n            key={pageNum}\r\n            onClick={() => handlePageChange(pageNum)}\r\n            className={page === pageNum ? \"active\" : \"\"}\r\n          >\r\n            {pageNum + 1}\r\n          </button>\r\n        ))}\r\n\r\n        <button\r\n          onClick={() => handlePageChange(page + 1)}\r\n          disabled={page === totalPages - 1}\r\n        >\r\n          다음\r\n        </button>\r\n        <button\r\n          onClick={() => handlePageChange(totalPages - 1)}\r\n          disabled={page === totalPages - 1}\r\n        >\r\n          마지막\r\n        </button>\r\n      </div>\r\n      {showModal && (\r\n        <div className=\"admin-modal\">\r\n          <div className=\"admin-modal-content\">\r\n            <h3>게시글 수정</h3>\r\n            <div className=\"board-memberNickName\">\r\n              <span>작성자</span>\r\n              <input\r\n                type=\"text\"\r\n                name=\"nickname\" // nickname 처리\r\n                value={formData.nickname}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"board-title\">\r\n              <span>제목</span>\r\n              <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={formData.title}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"board-category\">\r\n              <span>카테고리</span>\r\n              <select\r\n                value={formData.category}\r\n                onChange={handleInputChange}\r\n                name=\"category\"\r\n              >\r\n                <option value=\"영화게시판\">영화게시판</option>\r\n                <option value=\"자유게시판\">자유게시판</option>\r\n                <option value=\"문의게시판\">문의게시판</option>\r\n                {loginState.roleNames?.includes(\"ADMIN\") ? (\r\n                  <option value=\"공지사항\">공지사항</option>\r\n                ) : (\r\n                  <></>\r\n                )}\r\n              </select>\r\n            </div>\r\n            <div className=\"board-content\">\r\n              <span>내용</span>\r\n              <textarea\r\n                name=\"content\"\r\n                value={formData.content}\r\n                onChange={handleInputChange}\r\n              ></textarea>\r\n            </div>\r\n            <div className=\"board-upload\">\r\n              <span>파일</span>\r\n              <input\r\n                type=\"file\"\r\n                id=\"file-upload\"\r\n                style={{ display: \"none\" }}\r\n                onChange={handleFileChange}\r\n              />\r\n              <div className=\"file-upload\">\r\n                <label htmlFor=\"file-upload\" className=\"upload-btn\">\r\n                  파일 선택\r\n                </label>\r\n                <span id=\"file-name-display\">\r\n                  {formData.itemFile\r\n                    ? formData.itemFile.name\r\n                    : selectedBoard?.oldImgName\r\n                    ? selectedBoard.oldImgName\r\n                    : \"선택된 파일 없음\"}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"modal-actions\">\r\n              <button onClick={handleDelete}>삭제</button>\r\n              <button onClick={handleUpdate}>수정</button>\r\n              <span\r\n                className=\"modal-close-btn\"\r\n                onClick={() => setShowModal(false)}\r\n              >\r\n                ✖\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminBoard;\r\n","import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\n\r\nconst jwtAxios=axios.create()\r\n\r\nconst refreshJWT= async (accessToken, refreshToken)=>{\r\n    const header= {headers: {\"Authorization\": `Bearer ${accessToken}`}}\r\n    const res = await axios.get(`http://43.201.20.172:8090/api/member/refresh?refreshToken=${refreshToken}`, header)\r\n\r\n    return res.data\r\n}\r\n\r\nconst beforeReq= (config) =>{\r\n    const memberInfo=getCookie(\"member\")\r\n    if(!memberInfo){\r\n        return Promise.reject(\r\n            {response:\r\n             {data: \r\n              {error: \"REQUIRE_LOGIN\"}\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const {accessToken} = memberInfo\r\n    config.headers.Authorization= `Bearer ${accessToken}`\r\n    return config\r\n}\r\n\r\nconst requestFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\nconst beforeRes=async (res)=>{\r\n\r\n    const data= res.data\r\n    if(data && data.error ==='ERROR_ACCESS_TOKEN'){\r\n        const memberCookieValue=getCookie(\"member\")\r\n        const result=await refreshJWT(memberCookieValue.accessToken,\r\n            memberCookieValue.refreshToken)\r\n        memberCookieValue.accessToken=result.accessToken\r\n        memberCookieValue.refreshToken=result.refreshToken\r\n\r\n        setCookie(\"member\", JSON.stringify(memberCookieValue), 1)\r\n\r\n        const originalRequest=res.config\r\n        originalRequest.headers.Authorization= `Bearer ${result.accessToken}`\r\n\r\n        return await axios(originalRequest)\r\n    }\r\n\r\n\r\n    return res\r\n}\r\n\r\nconst responseFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\njwtAxios.interceptors.request.use( beforeReq, requestFail)\r\njwtAxios.interceptors.response.use(beforeRes,responseFail)\r\n\r\nexport default jwtAxios"],"names":["AdminBoard","_loginState$roleNames","boardList","setBoardList","useState","searchQuery","setSearchQuery","filteredBoardList","setFilteredBoardList","searchOption","setSearchOption","currentPage","setCurrentPage","messagesPerPage","selectedCategory","setSelectedCategory","loginState","useNavigate","useSelector","state","loginSlice","showModal","setShowModal","selectedBoard","setSelectedBoard","page","setPage","formData","setFormData","title","content","category","email","itemFile","useEffect","async","response","axios","get","data","err","console","error","fetchBoardList","formatDate","dateStr","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","handleCategoryFilter","log","filtered","filter","board","indexOfLastMessage","indexOfFirstMessage","currentMessages","slice","handlePageChange","pageNumber","totalMessages","length","totalPages","Math","ceil","rangeStart","rangeEnd","getPaginationRange","floor","min","handleInputChange","e","name","value","files","target","prev","nickname","startPage","max","endPage","pageNumbers","i","push","_jsxs","className","children","_jsx","onClick","onChange","type","placeholder","handleSearch","filteredList","toLowerCase","includes","finalFilteredList","map","id","memberNickName","hit","replyCount","newImgName","src","alt","oldImgName","createTime","updateTime","handleEditClick","disabled","pageNum","roleNames","_Fragment","style","display","file","allowedExtensions","fileExtension","split","pop","alert","htmlFor","jwtAxios","delete","formDataToSend","FormData","append","post","create","interceptors","request","use","config","memberInfo","getCookie","Promise","reject","accessToken","headers","Authorization","res","memberCookieValue","result","refreshToken","header","refreshJWT","setCookie","JSON","stringify","originalRequest"],"sourceRoot":""}