{"version":3,"file":"static/js/413.1cd749e9.chunk.js","mappings":"0KAKA,MA6JA,EA7JaA,KACX,MAAOC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,KACpCC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,IAAIG,MAChDC,EAAOC,IAAYL,EAAAA,EAAAA,UAAS,IAC7BM,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KACeC,WACrB,IACE,MAAMC,QAAiBC,EAAAA,EAASC,IAC9B,iDAEFC,QAAQC,IAAI,oBAAWJ,EAASK,MAC5BC,MAAMC,QAAQP,EAASK,MACzBhB,EAAaW,EAASK,MAEtBhB,EAAa,GAEjB,CAAE,MAAOmB,GACPL,QAAQT,MAAM,kEAAiBc,GAC/BnB,EAAa,GACf,GAGFoB,EAAgB,GACf,IAEH,MA4DMC,EAAatB,EAChBuB,QAAQC,GAASrB,EAAcsB,IAAID,EAAKE,MACxCC,QAAO,CAACC,EAAKJ,IAASI,EAAMJ,EAAKK,OAAO,GAErCC,EACJ9B,EAAU+B,OAAS,GAAK5B,EAAc6B,OAAShC,EAAU+B,OAE3D,OACEE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,uDACH7B,IAAS2B,EAAAA,EAAAA,KAAA,OAAKI,MAAO,CAAEC,MAAO,oBAAqBH,SAAE7B,IACrDN,EAAU+B,OAAS,GAClBK,EAAAA,EAAAA,MAAAG,EAAAA,SAAA,CAAAJ,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,QAAAE,SAAOL,EAAc,uCAAW,8BAChCG,EAAAA,EAAAA,KAAA,SACEO,KAAK,WACLC,QAASX,EACTY,SAnEUC,KAClBxC,EAAc6B,OAAShC,EAAU+B,OACnC3B,EAAiB,IAAIC,KAErBD,EAAiB,IAAIC,IAAIL,EAAU4C,KAAKpB,GAASA,EAAKE,MACxD,OAiES1B,EAAU4C,KAAKpB,IACdY,EAAAA,EAAAA,MAAA,OAEEF,UAAW,mBAAkB/B,EAAcsB,IAAID,EAAKE,IAAM,SAAW,IAAKS,SAAA,EAE1EC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,OACEY,IAAKrB,EAAKsB,YACVC,IAAKvB,EAAKwB,QACVX,MAAO,CACLY,MAAO,QACPC,OAAQ,OACRC,aAAc,UAGlBf,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,8BAAQX,EAAK4B,eACnBhB,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,iBAAKX,EAAKK,MAAMwB,iBAAiB,aACvCjB,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,8BAAQX,EAAK8B,kBACnBlB,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,8BAAQX,EAAK+B,kBACnBnB,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,uBAAMX,EAAKgC,gBACjBpB,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,iBAAKX,EAAKwB,YAChBZ,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAM,uBAAMX,EAAKiC,qBAGrBxB,EAAAA,EAAAA,KAAA,SACEO,KAAK,WACLC,QAAStC,EAAcsB,IAAID,EAAKE,IAChCgB,SAAUA,KAAMgB,OA9GFhC,EA8GuBF,EAAKE,QA7GxDtB,GAAkBuD,IAChB,MAAMC,EAAmB,IAAIvD,IAAIsD,GAMjC,OALIC,EAAiBnC,IAAIC,GACvBkC,EAAiBC,OAAOnC,GAExBkC,EAAiBE,IAAIpC,GAEhBkC,CAAgB,IARGlC,KA8GgC,MA1B3CF,EAAKE,OA8BdU,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,wBAAOb,EAAW+B,iBAAiB,aACvCjB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,UAAQ8B,QAjGDpD,UACnB,GAA2B,IAAvBR,EAAc6B,KAKlB,IACE,MAAMpB,QAAiBC,EAAAA,EAASgD,OAC9B,4CACA,CACE5C,KAAM,CAAE+C,IAAK9C,MAAM+C,KAAK9D,MAG5B+D,MAAMtD,EAASK,MAEfhB,GAAc0D,GACZA,EAAKpC,QAAQC,IAAUrB,EAAcsB,IAAID,EAAKE,QAEhDtB,EAAiB,IAAIC,IACvB,CAAE,MAAOC,GACP4D,MAAM,+EACR,MAnBEA,MAAM,wEAmBR,EA4E0C/B,SAAC,kBAC/BF,EAAAA,EAAAA,KAAA,UAAQ8B,QA1EJI,KAChB,GAA2B,IAAvBhE,EAAc6B,KAEhB,YADAkC,MAAM,yEAIR,MAAME,EAAsBlD,MAAM+C,KAAK9D,GAEvCY,QAAQC,IAAI,kDAAgBoD,GAG5B5D,EAAS,2BAA4B,CACnC6D,MAAO,CAAEC,YAAaF,IACtB,EA6DqCjC,SAAC,uCAKlCF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,iGAGN,ECnJV,EARiBoC,KAETtC,EAAAA,EAAAA,KAAAM,EAAAA,SAAA,CAAAJ,UACIF,EAAAA,EAAAA,KAAClC,EAAI,K,0DCHjB,MAAMc,EAAS2D,EAAAA,EAAMC,SAuDrB5D,EAAS6D,aAAaC,QAAQC,KA9CZC,IACd,MAAMC,GAAWC,EAAAA,EAAAA,IAAU,UAC3B,IAAID,EACA,OAAOE,QAAQC,OACX,CAACrE,SACA,CAACK,KACA,CAACX,MAAO,oBAKlB,MAAM,YAAC4E,GAAeJ,EAEtB,OADAD,EAAOM,QAAQC,cAAe,UAAUF,IACjCL,CAAM,IAGEzD,GACR4D,QAAQC,OAAO7D,KA8B1BP,EAAS6D,aAAa9D,SAASgE,KA3BfjE,UAEZ,MAAMM,EAAMoE,EAAIpE,KAChB,GAAGA,GAAsB,uBAAdA,EAAKX,MAA8B,CAC1C,MAAMgF,GAAkBP,EAAAA,EAAAA,IAAU,UAC5BQ,OAhCI5E,OAAOuE,EAAaM,KAClC,MAAMC,EAAQ,CAACN,QAAS,CAAC,cAAiB,UAAUD,MAGpD,aAFkBV,EAAAA,EAAM1D,IAAI,6DAA6D0E,IAAgBC,IAE9FxE,IAAI,EA4BQyE,CAAWJ,EAAkBJ,YAC5CI,EAAkBE,cACtBF,EAAkBJ,YAAYK,EAAOL,YACrCI,EAAkBE,aAAaD,EAAOC,cAEtCG,EAAAA,EAAAA,IAAU,SAAUC,KAAKC,UAAUP,GAAoB,GAEvD,MAAMQ,EAAgBT,EAAIR,OAG1B,OAFAiB,EAAgBX,QAAQC,cAAe,UAAUG,EAAOL,oBAE3CV,EAAAA,EAAAA,GAAMsB,EACvB,CAGA,OAAOT,CAAG,IAGMjE,GACT4D,QAAQC,OAAO7D,KAM1B,S","sources":["components/cart/Cart.jsx","pages/cart/CartPage.jsx","util/jwtUtil.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport jwtAxios from \"../../util/jwtUtil\";\r\nimport \"../../css/Cart.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Cart = () => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [selectedItems, setSelectedItems] = useState(new Set());\r\n  const [error, setError] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchCartItems = async () => {\r\n      try {\r\n        const response = await jwtAxios.get(\r\n          \"http://43.201.20.172:8090/api/cart/myCartList\"\r\n        );\r\n        console.log(\"API 응답:\", response.data);\r\n        if (Array.isArray(response.data)) {\r\n          setCartItems(response.data);\r\n        } else {\r\n          setCartItems([]);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"장바구니 불러오기 오류:\", err);\r\n        setCartItems([]);\r\n      }\r\n    };\r\n\r\n    fetchCartItems();\r\n  }, []);\r\n\r\n  const handleCheckboxChange = (id) => {\r\n    setSelectedItems((prev) => {\r\n      const newSelectedItems = new Set(prev);\r\n      if (newSelectedItems.has(id)) {\r\n        newSelectedItems.delete(id);\r\n      } else {\r\n        newSelectedItems.add(id);\r\n      }\r\n      return newSelectedItems;\r\n    });\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    if (selectedItems.size === cartItems.length) {\r\n      setSelectedItems(new Set()); // 모든 선택 해제\r\n    } else {\r\n      setSelectedItems(new Set(cartItems.map((item) => item.id))); // 전체 선택\r\n    }\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (selectedItems.size === 0) {\r\n      alert(\"삭제할 항목을 선택하세요.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await jwtAxios.delete(\r\n        \"http://43.201.20.172:8090/api/cart/delete\",\r\n        {\r\n          data: { ids: Array.from(selectedItems) },\r\n        }\r\n      );\r\n      alert(response.data);\r\n\r\n      setCartItems((prev) =>\r\n        prev.filter((item) => !selectedItems.has(item.id))\r\n      );\r\n      setSelectedItems(new Set());\r\n    } catch (error) {\r\n      alert(\"삭제 중 오류가 발생했습니다.\");\r\n    }\r\n  };\r\n\r\n  const paymentFn = () => {\r\n    if (selectedItems.size === 0) {\r\n      alert(\"결제할 티켓을 선택하세요.\");\r\n      return;\r\n    }\r\n\r\n    const selectedCartItemIds = Array.from(selectedItems); // 선택된 ID 배열\r\n\r\n    console.log(\"선택된 장바구니 ID:\", selectedCartItemIds); // 디버깅용 콘솔 로그 추가\r\n\r\n    // 선택한 항목 ID만 Payment 페이지로 전달\r\n    navigate(\"/payment/orderSettlement\", {\r\n      state: { cartItemIds: selectedCartItemIds },\r\n    });\r\n  };\r\n\r\n  const totalPrice = cartItems\r\n    .filter((item) => selectedItems.has(item.id)) // 선택된 항목만 계산\r\n    .reduce((acc, item) => acc + item.price, 0);\r\n\r\n  const allSelected =\r\n    cartItems.length > 0 && selectedItems.size === cartItems.length;\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <div className=\"cart-con\">\r\n        <h1>내 장바구니 리스트</h1>\r\n        {error && <div style={{ color: \"var(--color-red)\" }}>{error}</div>}\r\n        {cartItems.length > 0 ? (\r\n          <>\r\n            <div className=\"select-all\">\r\n              <span>{allSelected ? \"전체선택해제\" : \"전체선택\"}</span>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={allSelected}\r\n                onChange={handleSelectAll}\r\n              />\r\n            </div>\r\n            {cartItems.map((item) => (\r\n              <div\r\n                key={item.id}\r\n                className={`cart-container ${selectedItems.has(item.id) ? \"active\" : \"\"}`}\r\n              >\r\n                <div className=\"cart-item\">\r\n                  <img\r\n                    src={item.poster_path}\r\n                    alt={item.movieNm}\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"auto\",\r\n                      borderRadius: \"5px\",\r\n                    }}\r\n                  />\r\n                  <div className=\"cart-item-info\">\r\n                    <span>좌석 번호: {item.seatNumber}</span>\r\n                    <span>가격: {item.price.toLocaleString()}원</span>\r\n                    <span>상영 날짜: {item.screeningDate}</span>\r\n                    <span>상영 시간: {item.screeningTime}</span>\r\n                    <span>상영관: {item.theaterName}</span>\r\n                    <span>영화: {item.movieNm}</span>\r\n                    <span>영화관: {item.cinemaName}</span>\r\n                  </div>\r\n                </div>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedItems.has(item.id)}\r\n                  onChange={() => handleCheckboxChange(item.id)}\r\n                />\r\n              </div>\r\n            ))}\r\n            <div className=\"cart-footer\">\r\n              <h2>총 가격: {totalPrice.toLocaleString()}원</h2>\r\n              <div className=\"button-container\">\r\n                <button onClick={handleDelete}>삭제</button>\r\n                <button onClick={paymentFn}>결제하기</button>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <span>장바구니에 담긴 항목이 없습니다.</span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React from 'react'\r\nimport Cart from '../../components/cart/Cart'\r\n\r\nconst CartPage = () => {\r\n    return (\r\n        <>\r\n            <Cart />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CartPage","import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\n\r\nconst jwtAxios=axios.create()\r\n\r\nconst refreshJWT= async (accessToken, refreshToken)=>{\r\n    const header= {headers: {\"Authorization\": `Bearer ${accessToken}`}}\r\n    const res = await axios.get(`http://43.201.20.172:8090/api/member/refresh?refreshToken=${refreshToken}`, header)\r\n\r\n    return res.data\r\n}\r\n\r\nconst beforeReq= (config) =>{\r\n    const memberInfo=getCookie(\"member\")\r\n    if(!memberInfo){\r\n        return Promise.reject(\r\n            {response:\r\n             {data: \r\n              {error: \"REQUIRE_LOGIN\"}\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const {accessToken} = memberInfo\r\n    config.headers.Authorization= `Bearer ${accessToken}`\r\n    return config\r\n}\r\n\r\nconst requestFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\nconst beforeRes=async (res)=>{\r\n\r\n    const data= res.data\r\n    if(data && data.error ==='ERROR_ACCESS_TOKEN'){\r\n        const memberCookieValue=getCookie(\"member\")\r\n        const result=await refreshJWT(memberCookieValue.accessToken,\r\n            memberCookieValue.refreshToken)\r\n        memberCookieValue.accessToken=result.accessToken\r\n        memberCookieValue.refreshToken=result.refreshToken\r\n\r\n        setCookie(\"member\", JSON.stringify(memberCookieValue), 1)\r\n\r\n        const originalRequest=res.config\r\n        originalRequest.headers.Authorization= `Bearer ${result.accessToken}`\r\n\r\n        return await axios(originalRequest)\r\n    }\r\n\r\n\r\n    return res\r\n}\r\n\r\nconst responseFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\njwtAxios.interceptors.request.use( beforeReq, requestFail)\r\njwtAxios.interceptors.response.use(beforeRes,responseFail)\r\n\r\nexport default jwtAxios"],"names":["Cart","cartItems","setCartItems","useState","selectedItems","setSelectedItems","Set","error","setError","navigate","useNavigate","useEffect","async","response","jwtAxios","get","console","log","data","Array","isArray","err","fetchCartItems","totalPrice","filter","item","has","id","reduce","acc","price","allSelected","length","size","_jsx","className","children","_jsxs","style","color","_Fragment","type","checked","onChange","handleSelectAll","map","src","poster_path","alt","movieNm","width","height","borderRadius","seatNumber","toLocaleString","screeningDate","screeningTime","theaterName","cinemaName","handleCheckboxChange","prev","newSelectedItems","delete","add","onClick","ids","from","alert","paymentFn","selectedCartItemIds","state","cartItemIds","CartPage","axios","create","interceptors","request","use","config","memberInfo","getCookie","Promise","reject","accessToken","headers","Authorization","res","memberCookieValue","result","refreshToken","header","refreshJWT","setCookie","JSON","stringify","originalRequest"],"sourceRoot":""}