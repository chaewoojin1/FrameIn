{"version":3,"file":"static/js/748.990028d9.chunk.js","mappings":"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","sources":["components/admin/chatbot/AdminChatBot.jsx","util/jwtUtil.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport jwtAxios from \"../../../util/jwtUtil\";\r\nimport \"../../../css/admin/Chatbot.css\";\r\n\r\nconst AdminChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [selectedMessage, setSelectedMessage] = useState(null);\r\n  const [editMessage, setEditMessage] = useState(\"\");\r\n  const [showAddModal, setShowAddModal] = useState(false);  // Added state for Add Modal\r\n  const [showEditModal, setShowEditModal] = useState(false);  // State for Edit Modal\r\n\r\n  const fetchMessages = async () => {\r\n    try {\r\n      const response = await jwtAxios.get(\"http://43.201.20.172:8090/api/helpMessage\");\r\n      setMessages(response.data);\r\n    } catch (error) {\r\n      console.error(\"메시지 불러오기 실패:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n  }, []);\r\n\r\n  // Handle adding new message\r\n  const handleAddMessage = async () => {\r\n    try {\r\n      await jwtAxios.post(\"http://43.201.20.172:8090/api/helpMessage\", { message: newMessage }, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n      setNewMessage(\"\");\r\n      setShowAddModal(false);\r\n      fetchMessages();\r\n    } catch (error) {\r\n      console.error(\"추가 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // Handle opening edit modal\r\n  const handleEditClick = (msg) => {\r\n    setSelectedMessage(msg);\r\n    setEditMessage(msg.message);\r\n    setShowEditModal(true);\r\n  };\r\n\r\n  // Handle updating the message\r\n  const handleUpdate = async () => {\r\n    try {\r\n      await jwtAxios.put(`http://43.201.20.172:8090/api/helpMessage/${selectedMessage.id}`, { message: editMessage }, {\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n      setShowEditModal(false);\r\n      fetchMessages();\r\n    } catch (error) {\r\n      console.error(\"수정 실패:\", error);\r\n    }\r\n  };\r\n\r\n  // Handle deleting a message\r\n  const handleDelete = async () => {\r\n    if (window.confirm(\"정말 삭제하시겠습니까?\")) {\r\n      try {\r\n        await jwtAxios.delete(`http://43.201.20.172:8090/api/helpMessage/${selectedMessage.id}`);\r\n        setShowEditModal(false);\r\n        fetchMessages();\r\n      } catch (error) {\r\n        console.error(\"삭제 실패:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-chatbot-container\">\r\n      <h2>도움말 관리</h2>\r\n\r\n      {/* 도움말 목록 */}\r\n      <ul className=\"help-messages-list\">\r\n        {messages.map((msg) => (\r\n          <li key={msg.id} className=\"help-message-item\">\r\n            {msg.message}{\" \"}\r\n            <button onClick={() => handleEditClick(msg)} className=\"edit-btn\">수정</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* 도움말 추가 버튼 */}\r\n      <button onClick={() => setShowAddModal(true)} className=\"add-message-btn\">도움말 추가하기</button>\r\n\r\n      {/* 새 도움말 추가 모달 */}\r\n      {showAddModal && (\r\n        <div className=\"admin-modal\">\r\n          <div className=\"admin-modal-content\">\r\n            <h3>새 도움말 추가</h3>\r\n            <textarea\r\n              rows=\"3\"\r\n              name=\"newMessage\"\r\n              value={newMessage}\r\n              onChange={(e) => setNewMessage(e.target.value)}\r\n              placeholder=\"메시지 입력\"\r\n              className=\"new-message-input\"\r\n            />\r\n            <div className=\"modal-actions\">\r\n              <span\r\n                className=\"modal-close-btn\"\r\n                onClick={() => setShowAddModal(false)}  // Close the add modal\r\n              >\r\n                ✖\r\n              </span>\r\n              <button onClick={handleAddMessage} className=\"add-btn\">추가</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* 수정/삭제 모달 */}\r\n      {showEditModal && (\r\n        <div className=\"admin-modal\">\r\n          <div className=\"admin-modal-content\">\r\n            <h3>도움말 수정/삭제</h3>\r\n            <textarea\r\n              rows=\"3\"\r\n              name=\"editMessage\"\r\n              value={editMessage}\r\n              onChange={(e) => setEditMessage(e.target.value)}\r\n              className=\"edit-message-input\"\r\n            />\r\n            <div className=\"modal-actions\">\r\n              <span\r\n                className=\"modal-close-btn\"\r\n                onClick={() => setShowEditModal(false)}  // Close the edit modal\r\n              >\r\n                ✖\r\n              </span>\r\n              <button onClick={handleDelete} className=\"delete-btn\">삭제</button>\r\n              <button onClick={handleUpdate} className=\"update-btn\">수정</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminChatBot;\r\n","import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\n\r\nconst jwtAxios=axios.create()\r\n\r\nconst refreshJWT= async (accessToken, refreshToken)=>{\r\n    const header= {headers: {\"Authorization\": `Bearer ${accessToken}`}}\r\n    const res = await axios.get(`http://43.201.20.172:8090/api/member/refresh?refreshToken=${refreshToken}`, header)\r\n\r\n    return res.data\r\n}\r\n\r\nconst beforeReq= (config) =>{\r\n    const memberInfo=getCookie(\"member\")\r\n    if(!memberInfo){\r\n        return Promise.reject(\r\n            {response:\r\n             {data: \r\n              {error: \"REQUIRE_LOGIN\"}\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const {accessToken} = memberInfo\r\n    config.headers.Authorization= `Bearer ${accessToken}`\r\n    return config\r\n}\r\n\r\nconst requestFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\nconst beforeRes=async (res)=>{\r\n\r\n    const data= res.data\r\n    if(data && data.error ==='ERROR_ACCESS_TOKEN'){\r\n        const memberCookieValue=getCookie(\"member\")\r\n        const result=await refreshJWT(memberCookieValue.accessToken,\r\n            memberCookieValue.refreshToken)\r\n        memberCookieValue.accessToken=result.accessToken\r\n        memberCookieValue.refreshToken=result.refreshToken\r\n\r\n        setCookie(\"member\", JSON.stringify(memberCookieValue), 1)\r\n\r\n        const originalRequest=res.config\r\n        originalRequest.headers.Authorization= `Bearer ${result.accessToken}`\r\n\r\n        return await axios(originalRequest)\r\n    }\r\n\r\n\r\n    return res\r\n}\r\n\r\nconst responseFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\njwtAxios.interceptors.request.use( beforeReq, requestFail)\r\njwtAxios.interceptors.response.use(beforeRes,responseFail)\r\n\r\nexport default jwtAxios"],"names":["AdminChatBot","messages","setMessages","useState","newMessage","setNewMessage","selectedMessage","setSelectedMessage","editMessage","setEditMessage","showAddModal","setShowAddModal","showEditModal","setShowEditModal","fetchMessages","async","response","jwtAxios","get","data","error","console","useEffect","_jsxs","className","children","_jsx","map","msg","message","onClick","handleEditClick","id","rows","name","value","onChange","e","target","placeholder","post","headers","window","confirm","delete","put","axios","create","interceptors","request","use","config","memberInfo","getCookie","Promise","reject","accessToken","Authorization","err","res","memberCookieValue","result","refreshToken","header","refreshJWT","setCookie","JSON","stringify","originalRequest"],"sourceRoot":""}