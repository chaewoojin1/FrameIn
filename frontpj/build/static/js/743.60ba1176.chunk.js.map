{"version":3,"file":"static/js/743.60ba1176.chunk.js","mappings":"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","sources":["components/board/Board.jsx","pages/board/BoardPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport \"../../css/Board.css\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst BoardList = () => {\r\n  const [boardList, setBoardList] = useState([]); // 전체 게시글 리스트 상태\r\n  const [searchQuery, setSearchQuery] = useState(\"\"); // 검색어 상태\r\n  const [filteredBoardList, setFilteredBoardList] = useState([]); // 필터링된 게시글 리스트\r\n  const [searchOption, setSearchOption] = useState(\"title\"); // 검색 항목 (제목, 내용, 글쓴이)\r\n  const [currentPage, setCurrentPage] = useState(1); // 현재 페이지\r\n  const [messagesPerPage] = useState(5); // 페이지당 게시글 수\r\n  const [selectedCategory, setSelectedCategory] = useState(\"all\"); // 선택된 카테고리\r\n  const navigate = useNavigate();\r\n  const loginState = useSelector((state) => state.loginSlice);\r\n\r\n  useEffect(() => {\r\n    const fetchBoardList = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://43.201.20.172:8090/board/List\");\r\n        const sortedBoardList = response.data.sort((a, b) => {\r\n          const timeA = a.updateTime || a.createTime; // updateTime이 있으면 updateTime을 사용\r\n          const timeB = b.updateTime || b.createTime; // updateTime이 있으면 updateTime을 사용\r\n          return new Date(timeB) - new Date(timeA); // 최신순으로 정렬\r\n        });\r\n        setBoardList(sortedBoardList); // 받아온 데이터로 상태 업데이트\r\n        setFilteredBoardList(sortedBoardList); // 초기에는 모든 게시글을 표시\r\n      } catch (err) {\r\n        console.error(\"아이템 리스트 불러오기 실패\", err);\r\n      }\r\n    };\r\n    fetchBoardList();\r\n  }, []);\r\n\r\n  // 날짜 포맷 함수\r\n  const formatRelativeTime = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    const now = new Date();\r\n    const diff = Math.floor((now - date) / 1000); // 초 단위 차이\r\n  \r\n    if (diff < 60) {\r\n      return `${diff}초 전`;\r\n    } else if (diff < 3600) {\r\n      const minutes = Math.floor(diff / 60);\r\n      return `${minutes}분 전`;\r\n    } else if (diff < 86400) {\r\n      const hours = Math.floor(diff / 3600);\r\n      return `${hours}시간 전`;\r\n    } else if (diff < 172800) {\r\n      return `어제`;\r\n    } else if (diff < 604800) {\r\n      const days = Math.floor(diff / 86400);\r\n      return `${days}일 전`;\r\n    } else {\r\n      // 일주일 넘으면 그냥 날짜로 포맷\r\n      const year = date.getFullYear();\r\n      const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n      const day = String(date.getDate()).padStart(2, \"0\");\r\n      return `${year}-${month}-${day}`;\r\n    }\r\n  };\r\n\r\n  // 카테고리 버튼 클릭 시 카테고리 필터링\r\n  const handleCategoryFilter = (category) => {\r\n    setSelectedCategory(category);\r\n    let filtered = [];\r\n    if (category === \"all\") {\r\n      filtered = boardList; // 모든 게시글을 다시 표시\r\n    } else {\r\n      filtered = boardList.filter((board) => board.category === category);\r\n    }\r\n\r\n    // 게시글을 createTime 또는 updateTime을 기준으로 최신순으로 정렬\r\n    filtered.sort((a, b) => {\r\n      const timeA = a.updateTime || a.createTime;\r\n      const timeB = b.updateTime || b.createTime;\r\n      return new Date(timeB) - new Date(timeA); // 최신순으로 정렬\r\n    });\r\n\r\n    setFilteredBoardList(filtered);\r\n    setCurrentPage(1); // 카테고리 필터링 후 첫 페이지로 이동\r\n  };\r\n\r\n  // 검색 버튼 클릭 시 필터링된 게시글 리스트 설정\r\n  const handleSearch = () => {\r\n    const filteredList = boardList.filter((board) => {\r\n      switch (searchOption) {\r\n        case \"title\":\r\n          return board.title.toLowerCase().includes(searchQuery.toLowerCase());\r\n        case \"content\":\r\n          return board.content\r\n            .toLowerCase()\r\n            .includes(searchQuery.toLowerCase());\r\n        case \"nickname\":\r\n          return board.memberNickName.toLowerCase().includes(searchQuery.toLowerCase());\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n\r\n    // 카테고리가 필터링되었다면 그 카테고리에 맞는 리스트만 필터링\r\n    let finalFilteredList =\r\n      selectedCategory !== \"all\"\r\n        ? filteredList.filter((board) => board.category === selectedCategory)\r\n        : filteredList;\r\n\r\n    finalFilteredList.sort((a, b) => {\r\n      const timeA = a.updateTime || a.createTime;\r\n      const timeB = b.updateTime || b.createTime;\r\n      return new Date(timeB) - new Date(timeA); // 최신순으로 정렬\r\n    });\r\n\r\n    setFilteredBoardList(finalFilteredList); // 정렬된 게시글 리스트 상태 업데이트\r\n    setCurrentPage(1); // 검색 후 첫 페이지로 이동\r\n  };\r\n\r\n  const indexOfLastMessage = currentPage * messagesPerPage;\r\n  const indexOfFirstMessage = indexOfLastMessage - messagesPerPage;\r\n  const currentMessages =\r\n    filteredBoardList.slice(indexOfFirstMessage, indexOfLastMessage) || [];\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  const totalMessages = filteredBoardList.length || 0;\r\n  const totalPages = Math.ceil(totalMessages / messagesPerPage);\r\n\r\n  const getPaginationRange = () => {\r\n    const pageLimit = 5;\r\n    const rangeStart =\r\n      Math.floor((currentPage - 1) / pageLimit) * pageLimit + 1;\r\n    const rangeEnd = Math.min(rangeStart + pageLimit - 1, totalPages);\r\n    return { rangeStart, rangeEnd };\r\n  };\r\n\r\n  const { rangeStart, rangeEnd } = getPaginationRange();\r\n\r\n  const handleCreatePost = () => {\r\n    if (!loginState.email) {\r\n      // 로그인되어 있지 않으면 로그인 페이지로 이동\r\n      navigate(\"/member/login\");\r\n    } else {\r\n      // 로그인되어 있으면 게시글 작성 페이지로 이동\r\n      navigate(\"/board/insert\");\r\n    }\r\n  };\r\n\r\n  console.log(boardList);\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <h2>게시판</h2>\r\n      <div className=\"create-post-button\">\r\n        <div onClick={handleCreatePost} className=\"write_btn\">\r\n          <img src=\"./../image/write.svg\" alt=\"글쓰기\" />\r\n          게시글 작성\r\n        </div>\r\n      </div>\r\n\r\n      {/* 카테고리 선택 버튼 추가 */}\r\n      <div className=\"category\">\r\n        <button\r\n          onClick={() => handleCategoryFilter(\"all\")}\r\n          className={selectedCategory === \"all\" ? \"active-category\" : \"\"}\r\n        >\r\n          전체 게시판\r\n        </button>\r\n        <button\r\n          onClick={() => handleCategoryFilter(\"문의게시판\")}\r\n          className={selectedCategory === \"문의게시판\" ? \"active-category\" : \"\"}\r\n        >\r\n          문의게시판\r\n        </button>\r\n        <button\r\n          onClick={() => handleCategoryFilter(\"자유게시판\")}\r\n          className={selectedCategory === \"자유게시판\" ? \"active-category\" : \"\"}\r\n        >\r\n          자유게시판\r\n        </button>\r\n        <button\r\n          onClick={() => handleCategoryFilter(\"영화게시판\")}\r\n          className={selectedCategory === \"영화게시판\" ? \"active-category\" : \"\"}\r\n        >\r\n          영화게시판\r\n        </button>\r\n        <button\r\n          onClick={() => handleCategoryFilter(\"공지사항\")}\r\n          className={selectedCategory === \"공지사항\" ? \"active-category\" : \"\"}\r\n        >\r\n          공지사항\r\n        </button>\r\n      </div>\r\n\r\n      {/* 검색 기능 */}\r\n      <div className=\"boardSearch\">\r\n        <select\r\n          value={searchOption}\r\n          onChange={(e) => setSearchOption(e.target.value)} // 검색 옵션 상태 업데이트\r\n        >\r\n          <option value=\"title\">제목</option>\r\n          <option value=\"content\">내용</option>\r\n          <option value=\"nickname\">글쓴이</option>\r\n        </select>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"검색어를 입력하세요\"\r\n          value={searchQuery}\r\n          onChange={(e) => setSearchQuery(e.target.value)} // 검색어 상태 업데이트\r\n        />\r\n        <button onClick={handleSearch}>검색</button>{\" \"}\r\n        {/* 검색 버튼 클릭 시 handleSearch 실행 */}\r\n      </div>\r\n\r\n      {filteredBoardList.length === 0 ? (\r\n        <p>등록된 게시글이 없습니다.</p>\r\n      ) : (\r\n        <>\r\n          <ul className=\"boardList\">\r\n            <li className=\"boardItem_head\">\r\n              <span className=\"board_num\">No</span>\r\n              <span className=\"board_title\">제목</span>\r\n              <span className=\"board_writer\">글쓴이</span>\r\n              <span className=\"board_date\">작성일자</span>\r\n              <span className=\"board_hit\">조회수</span>\r\n            </li>\r\n            {currentMessages.map((board, idx) => (\r\n              <li key={board.id} className=\"boardItem\" onClick={() => navigate(`/board/detail/${board.id}`)}>\r\n                <span className=\"board_num\">{idx + 1}</span>\r\n                <div className=\"board_title\">\r\n                  <span>{board.category}</span>\r\n                  <span>{board.title.length > 16 ? board.title.slice(0, 16) + '...' : board.title}</span>\r\n                  <span>{board.replyCount}</span>\r\n                  {(board.newImgName || board.oldImgName) && <span>🔗</span>}\r\n                </div>\r\n                <span className=\"board_writer\">{board.memberNickName}</span>\r\n                {board.updateTime !== null ? (\r\n                  <span className=\"board_date\">{formatRelativeTime(board.updateTime)}</span>\r\n                ) : (\r\n                  <span className=\"board_date\">{formatRelativeTime(board.createTime)}</span>\r\n                )}\r\n                <span className=\"board_hit\">{board.hit}</span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n\r\n          {/* 페이징 처리 */}\r\n          <div className=\"pagination\">\r\n            <button\r\n              onClick={() => handlePageChange(1)}\r\n              disabled={currentPage === 1}\r\n            >\r\n              처음\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => handlePageChange(currentPage - 1)}\r\n              disabled={currentPage === 1}\r\n            >\r\n              이전\r\n            </button>\r\n\r\n            {[...Array(rangeEnd - rangeStart + 1)].map((_, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => handlePageChange(rangeStart + index)}\r\n                className={currentPage === rangeStart + index ? \"active\" : \"\"}\r\n              >\r\n                {rangeStart + index}\r\n              </button>\r\n            ))}\r\n\r\n            <button\r\n              onClick={() => handlePageChange(currentPage + 1)}\r\n              disabled={currentPage === totalPages}\r\n            >\r\n              다음\r\n            </button>\r\n\r\n            <button\r\n              onClick={() => handlePageChange(totalPages)}\r\n              disabled={currentPage === totalPages}\r\n            >\r\n              마지막\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardList;\r\n","import React from 'react'\r\nimport Board from '../../components/board/Board'\r\n\r\nconst BoardPage = () => {\r\n  return (\r\n    <Board/>\r\n)\r\n}\r\n\r\nexport default BoardPage"],"names":["BoardList","boardList","setBoardList","useState","searchQuery","setSearchQuery","filteredBoardList","setFilteredBoardList","searchOption","setSearchOption","currentPage","setCurrentPage","messagesPerPage","selectedCategory","setSelectedCategory","navigate","useNavigate","loginState","useSelector","state","loginSlice","useEffect","async","sortedBoardList","axios","get","data","sort","a","b","timeA","updateTime","createTime","timeB","Date","err","console","error","fetchBoardList","formatRelativeTime","dateStr","date","now","diff","Math","floor","getFullYear","String","getMonth","padStart","getDate","handleCategoryFilter","category","filtered","filter","board","indexOfLastMessage","indexOfFirstMessage","currentMessages","slice","handlePageChange","pageNumber","totalMessages","length","totalPages","ceil","rangeStart","rangeEnd","getPaginationRange","min","log","_jsxs","className","children","_jsx","onClick","handleCreatePost","email","src","alt","value","onChange","e","target","type","placeholder","handleSearch","filteredList","title","toLowerCase","includes","content","memberNickName","finalFilteredList","_Fragment","map","idx","id","replyCount","newImgName","oldImgName","hit","disabled","Array","_","index","BoardPage","Board"],"sourceRoot":""}