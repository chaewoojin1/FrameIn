{"version":3,"file":"static/js/434.72546d0b.chunk.js","mappings":"oLAMA,MA8OA,EA9OsBA,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAC1B,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,GAC7BC,GAAWC,EAAAA,EAAAA,OACVC,EAAaC,IAAkBJ,EAAAA,EAAAA,WACtB,QAAdT,EAAAU,EAASI,aAAK,IAAAd,OAAA,EAAdA,EAAgBY,cAAe,OAE3B,YAAEG,IAAgBC,EAAAA,EAAAA,KAClBC,GAAWC,EAAAA,EAAAA,MACXC,EAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC3CC,EAAOC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,CAACC,EAAGC,IAAMA,EAAI,KAE/CC,EAAWC,IAAgBlB,EAAAA,EAAAA,aAC3BmB,EAAeC,IAAoBpB,EAAAA,EAAAA,UAAS,KAC5CqB,EAAeC,IAAoBtB,EAAAA,EAAAA,UAAS,KAC5CuB,EAAUC,IAAexB,EAAAA,EAAAA,UAASyB,OAAOC,YAAc,MACxDC,GAAmBC,EAAAA,EAAAA,QAAO,OAEhCC,EAAAA,EAAAA,YAAU,KAER,KADmBC,EAAAA,EAAAA,IAAU,UAI3B,OAFAC,MAAM,iEACNvB,EAAS,gBAAiB,CAAEwB,SAAS,IAGvCC,IACAC,GAAoB,GACnB,CAAC5B,EAAaE,KAEjBqB,EAAAA,EAAAA,YAAU,KACJN,GAAYI,EAAiBQ,UAC/BR,EAAiBQ,QAAQC,WAAa,EACxC,GACC,CAACb,IAEJ,MAAMU,EAAqBI,UACzB,IACE,MAAMC,QAAiBC,EAAAA,EAASC,IAC9B,gDAAgDlC,KAElDY,EAAaoB,EAASG,MACtBC,QAAQC,IAAI,kBAAmBL,EAASG,KAC1C,CAAE,MAAOG,GACPF,QAAQE,MAAM,6FAAwBA,GACtC1B,EAAa,KACf,GAGIgB,EAAqBG,UACzB,IACE,MAAMC,QAAiBC,EAAAA,EAASC,IAC9B,oDAAoDlC,KAEhDuC,EAAQjC,MAAMkC,QAAQR,EAASG,MAAQH,EAASG,KAAO,GAC7DC,QAAQC,IAAI,kBAAmBE,GAC/BvB,EAAiBuB,EACnB,CAAE,MAAOD,GACPF,QAAQE,MAAM,6FAAwBA,GACtCtB,EAAiB,GACnB,GAGIyB,EAAcC,IACd3B,EAAc4B,SAASD,IAC3B5B,GAAkB8B,GAChBA,EAAkBD,SAASD,GACvBE,EAAkBC,QAAQC,GAASA,IAASJ,IAC5C,IAAIE,EAAmBF,IAC5B,EAGGK,EAAgBL,GAChBpC,MAAMkC,QAAQzB,IAAkBA,EAAc4B,SAASD,GAClD,gBACF7B,EAAc8B,SAASD,GAC1B,gBACA,iBA4BAM,EAAUC,OAAkB,OAAXpD,QAAW,IAAXA,OAAW,EAAXA,EAAamD,UAAY,EAEhD,OACEE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UACtBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UACtBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,OACEI,IAAKzD,EAAY0D,YACjBC,IAAK3D,EAAY4D,QACjBN,UAAU,YAGZE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJF,EAAAA,EAAAA,KAAA,QAAAE,SAAOvD,EAAY4D,cAErBJ,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,wBACJF,EAAAA,EAAAA,KAAA,QAAAE,SAAOvD,EAAY6D,aAErBL,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAOvD,EAAY8D,KAAK,gBAE1BN,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,sCACJC,EAAAA,EAAAA,MAAA,QAAAD,SAAA,CAAOJ,EAAQY,eAAe,SAAS,gBAEzCP,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJF,EAAAA,EAAAA,KAAA,QAAAE,SAAOvD,EAAYgE,aAErBR,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJF,EAAAA,EAAAA,KAAA,QAAAE,SAAOvD,EAAYiE,uBAK3BT,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAmBC,SAAA,EAChCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAAA,MAAAE,SAAKvD,EAAY4D,aAGjBxC,IACAoC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYC,SAAA,CAAC,iDACb,IACF,OAATzC,QAAS,IAATA,GAAwB,QAAfzB,EAATyB,EAAWoD,qBAAa,IAAA7E,GAAc,QAAdC,EAAxBD,EAA0B8E,oBAAY,IAAA7E,OAA7B,EAATA,EAAwC8E,WAAW,yBAAQ,IAClD,OAATtD,QAAS,IAATA,GAAwB,QAAfvB,EAATuB,EAAWoD,qBAAa,IAAA3E,OAAf,EAATA,EAA0B8E,KAAK,8CAAc,IACpC,OAATvD,QAAS,IAATA,OAAS,EAATA,EAAWwD,cAAc,IAAW,OAATxD,QAAS,IAATA,OAAS,EAATA,EAAWyD,kBAEzClB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQC,SAAC,YACxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAiBkB,IAAKhD,EAAiB+B,SACnDhD,EAAKkE,KAAKC,IACTlB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,EAClBF,EAAAA,EAAAA,KAAA,QAAAE,SAAOmB,KACPrB,EAAAA,EAAAA,KAAA,OAAeC,UAAU,WAAUC,SAChC/C,EAAKiE,KAAKE,IACT,MAAM9B,EAAa,GAAG6B,IAAMC,IAC5B,OACEtB,EAAAA,EAAAA,KAAAuB,EAAAA,SAAA,CAAArB,UACEF,EAAAA,EAAAA,KAAA,OAEEC,UAAWJ,EAAaL,GACxBgC,QAASA,IAAMjC,EAAWC,GAAYU,SAErCoB,GAJI9B,IAMN,KAZC6B,IAgBVrB,EAAAA,EAAAA,KAAA,QAAAE,SAAOmB,cAMhBtD,IACGoC,EAAAA,EAAAA,MAAA,OACEF,UAAU,qBAAoBC,SAAA,EAE9BC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,aAAYC,SAAA,CAAC,iDACb,IACF,OAATzC,QAAS,IAATA,GAAwB,QAAftB,EAATsB,EAAWoD,qBAAa,IAAA1E,GAAc,QAAdC,EAAxBD,EAA0B2E,oBAAY,IAAA1E,OAA7B,EAATA,EAAwC2E,WAAW,0BACrC,OAATtD,QAAS,IAATA,GAAwB,QAAfpB,EAAToB,EAAWoD,qBAAa,IAAAxE,OAAf,EAATA,EAA0B2E,KAAK,8CAAc,IACzC,OAATvD,QAAS,IAATA,OAAS,EAATA,EAAWwD,cAAc,IAAW,OAATxD,QAAS,IAATA,OAAS,EAATA,EAAWyD,kBAEzClB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQC,SAAC,YACxBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAiBkB,IAAKhD,EAAiB+B,SACnDhD,EAAKkE,KAAKC,IACTrB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAKC,UAClBF,EAAAA,EAAAA,KAAA,OAAeC,UAAU,WAAUC,SAChC/C,EAAKiE,KAAKE,IACT,MAAM9B,EAAa,GAAG6B,IAAMC,IAC5B,OACEtB,EAAAA,EAAAA,KAAAuB,EAAAA,SAAA,CAAArB,UACEF,EAAAA,EAAAA,KAAA,OAEEC,UAAWJ,EAAaL,GACxBgC,QAASA,IAAMjC,EAAWC,GAAYU,SAErCoB,GAJI9B,IAMN,KAZC6B,aAqBtBlB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,oCACHvC,EAAcL,OAAS,GACtB0C,EAAAA,EAAAA,KAAA,KAAAE,SAAIvC,EAAc8D,KAAK,SAEvBzB,EAAAA,EAAAA,KAAA,KAAAE,SAAG,wEAGPF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UACtBF,EAAAA,EAAAA,KAAA,UAAQwB,QAvJL3C,UACb,GAA6B,IAAzBlB,EAAcL,OAEhB,YADAiB,MAAM,2DAIR,MAAMmD,EAAU,CACd5E,YAAaiD,OAAOjD,GACpBuC,MAAO1B,GAETuB,QAAQC,IAAI,oBAAqBuC,GAEjC,IACE,MAAM5C,QAAiBC,EAAAA,EAAS4C,KAC9B,4CACAD,GAEFnD,MAAMO,EAASG,MACfjC,EAAS,mBACX,CAAE,MAAOoC,GAAQ,IAADwC,EAAAC,EACd3C,QAAQE,MAAM,eAA8B,QAAhBwC,EAAExC,EAAMN,gBAAQ,IAAA8C,OAAA,EAAdA,EAAgB3C,MAC9CV,OAAoB,QAAdsD,EAAAzC,EAAMN,gBAAQ,IAAA+C,OAAA,EAAdA,EAAgB5C,OAAQ,uGAChC,GAiIkCiB,SAAC,wCAK7B,ECpOV,EAT0B4B,KAElB9B,EAAAA,EAAAA,KAAA,OAAAE,UACIF,EAAAA,EAAAA,KAAClE,EAAa,K,0DCH1B,MAAMiD,EAASgD,EAAAA,EAAMC,SAuDrBjD,EAASkD,aAAaC,QAAQC,KA9CZC,IACd,MAAMC,GAAW/D,EAAAA,EAAAA,IAAU,UAC3B,IAAI+D,EACA,OAAOC,QAAQC,OACX,CAACzD,SACA,CAACG,KACA,CAACG,MAAO,oBAKlB,MAAM,YAACoD,GAAeH,EAEtB,OADAD,EAAOK,QAAQC,cAAe,UAAUF,IACjCJ,CAAM,IAGEO,GACRL,QAAQC,OAAOI,KA8B1B5D,EAASkD,aAAanD,SAASqD,KA3BftD,UAEZ,MAAMI,EAAM2D,EAAI3D,KAChB,GAAGA,GAAsB,uBAAdA,EAAKG,MAA8B,CAC1C,MAAMyD,GAAkBvE,EAAAA,EAAAA,IAAU,UAC5BwE,OAhCIjE,OAAO2D,EAAaO,KAClC,MAAMC,EAAQ,CAACP,QAAS,CAAC,cAAiB,UAAUD,MAGpD,aAFkBT,EAAAA,EAAM/C,IAAI,6DAA6D+D,IAAgBC,IAE9F/D,IAAI,EA4BQgE,CAAWJ,EAAkBL,YAC5CK,EAAkBE,cACtBF,EAAkBL,YAAYM,EAAON,YACrCK,EAAkBE,aAAaD,EAAOC,cAEtCG,EAAAA,EAAAA,IAAU,SAAUC,KAAKC,UAAUP,GAAoB,GAEvD,MAAMQ,EAAgBT,EAAIR,OAG1B,OAFAiB,EAAgBZ,QAAQC,cAAe,UAAUI,EAAON,oBAE3CT,EAAAA,EAAAA,GAAMsB,EACvB,CAGA,OAAOT,CAAG,IAGMD,GACTL,QAAQC,OAAOI,KAM1B,S","sources":["components/screeningSeat/ScreeningSeat.jsx","pages/screeningSeat/ScreeningSeatPage.jsx","util/jwtUtil.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport \"../../css/ScreeningSeat.css\";\r\nimport jwtAxios from \"../../util/jwtUtil\";\r\nimport { getCookie } from \"../../util/cookieUtil\";\r\n\r\nconst ScreeningSeat = () => {\r\n  const [scale, setScale] = useState(1);\r\n  const location = useLocation();\r\n  const [movieEntity, setMovieEntity] = useState(\r\n    location.state?.movieEntity || null\r\n  );\r\n  const { screeningId } = useParams();\r\n  const navigate = useNavigate();\r\n  const rows = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"];\r\n  const cols = Array.from({ length: 24 }, (_, i) => i + 1);\r\n\r\n  const [screening, setScreening] = useState();\r\n  const [selectedSeats, setSelectedSeats] = useState([]);\r\n  const [disabledSeats, setDisabledSeats] = useState([]);\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 1023);\r\n  const seatContainerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const memberInfo = getCookie(\"member\");\r\n    if (!memberInfo) {\r\n      alert(\"로그인이 필요합니다.\");\r\n      navigate(\"/member/login\", { replace: true });\r\n      return;\r\n    }\r\n    fetchScreeningInfo();\r\n    fetchDisabledSeats();\r\n  }, [screeningId, navigate]);\r\n\r\n  useEffect(() => {\r\n    if (isMobile && seatContainerRef.current) {\r\n      seatContainerRef.current.scrollLeft = 0; // 초기 스크롤 위치를 0으로 설정\r\n    }\r\n  }, [isMobile]);\r\n\r\n  const fetchScreeningInfo = async () => {\r\n    try {\r\n      const response = await jwtAxios.get(\r\n        `http://43.201.20.172:8090/api/screening/info/${screeningId}`\r\n      );\r\n      setScreening(response.data);\r\n      console.log(\"Screening info:\", response.data);\r\n    } catch (error) {\r\n      console.error(\"상영 정보를 불러오는 중 오류 발생:\", error);\r\n      setScreening(null);\r\n    }\r\n  };\r\n\r\n  const fetchDisabledSeats = async () => {\r\n    try {\r\n      const response = await jwtAxios.get(\r\n        `http://43.201.20.172:8090/api/cart/disabledSeats/${screeningId}`\r\n      );\r\n      const seats = Array.isArray(response.data) ? response.data : [];\r\n      console.log(\"Disabled seats:\", seats);\r\n      setDisabledSeats(seats);\r\n    } catch (error) {\r\n      console.error(\"좌석 정보를 불러오는 중 오류 발생:\", error);\r\n      setDisabledSeats([]);\r\n    }\r\n  };\r\n\r\n  const toggleSeat = (seatNumber) => {\r\n    if (disabledSeats.includes(seatNumber)) return;\r\n    setSelectedSeats((prevSelectedSeats) =>\r\n      prevSelectedSeats.includes(seatNumber)\r\n        ? prevSelectedSeats.filter((seat) => seat !== seatNumber)\r\n        : [...prevSelectedSeats, seatNumber]\r\n    );\r\n  };\r\n\r\n  const getSeatClass = (seatNumber) => {\r\n    if (Array.isArray(disabledSeats) && disabledSeats.includes(seatNumber))\r\n      return \"seat disabled\";\r\n    return selectedSeats.includes(seatNumber)\r\n      ? \"seat selected\"\r\n      : \"seat available\";\r\n  };\r\n\r\n  const cartFn = async () => {\r\n    if (selectedSeats.length === 0) {\r\n      alert(\"좌석을 선택해주세요\");\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      screeningId: Number(screeningId),\r\n      seats: selectedSeats,\r\n    };\r\n    console.log(\" Payload to POST:\", payload);\r\n\r\n    try {\r\n      const response = await jwtAxios.post(\r\n        \"http://43.201.20.172:8090/api/cart/insert\",\r\n        payload\r\n      );\r\n      alert(response.data);\r\n      navigate(\"/cart/myCartList\");\r\n    } catch (error) {\r\n      console.error(\" POST Error:\", error.response?.data);\r\n      alert(error.response?.data || \"장바구니 추가 중 오류가 발생했습니다\");\r\n    }\r\n  };\r\n\r\n  const audiAcc = Number(movieEntity?.audiAcc) || 0;\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"main\">\r\n        <div className=\"main-con\">\r\n          <div className=\"leftBar\">\r\n            <div className=\"leftBar-con\">\r\n              <img\r\n                src={movieEntity.poster_path}\r\n                alt={movieEntity.movieNm}\r\n                className=\"poster\"\r\n              />\r\n\r\n              <div className=\"movie-info\">\r\n                <div>\r\n                  <h3>제목</h3>\r\n                  <span>{movieEntity.movieNm}</span>\r\n                </div>\r\n                <div>\r\n                  <h3>개봉일</h3>\r\n                  <span>{movieEntity.openDt}</span>\r\n                </div>\r\n                <div>\r\n                  <h3>순위</h3>\r\n                  <span>{movieEntity.rank}등</span>\r\n                </div>\r\n                <div>\r\n                  <h3>누적 관객 수</h3>\r\n                  <span>{audiAcc.toLocaleString(\"ko-KR\")}명</span>\r\n                </div>\r\n                <div>\r\n                  <h3>장르</h3>\r\n                  <span>{movieEntity.genres}</span>\r\n                </div>\r\n                <div>\r\n                  <h3>감독</h3>\r\n                  <span>{movieEntity.director}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"screening-content\">\r\n            <div className=\"movie-title\">\r\n              <h1>{movieEntity.movieNm}</h1>\r\n            </div>\r\n\r\n            {!isMobile && (\r\n              <div className=\"seat-selection-con\">\r\n                <h1 className=\"seat-title\">\r\n                  좌석 선택 (영화관:{\" \"}\r\n                  {screening?.theaterEntity?.cinemaEntity?.cinemaName} / 상영관:{\" \"}\r\n                  {screening?.theaterEntity?.name}) / 상영 날짜/시간:{\" \"}\r\n                  {screening?.screeningDate} {screening?.screeningTime}\r\n                </h1>\r\n                <div className=\"screen\">SCREEN</div>\r\n                <div className=\"seat-container\" ref={seatContainerRef}>\r\n                  {rows.map((row) => (\r\n                    <div className=\"row\">\r\n                      <span>{row}</span>\r\n                      <div key={row} className=\"seat-row\">\r\n                        {cols.map((col) => {\r\n                          const seatNumber = `${row}${col}`;\r\n                          return (\r\n                            <>\r\n                              <div\r\n                                key={seatNumber}\r\n                                className={getSeatClass(seatNumber)}\r\n                                onClick={() => toggleSeat(seatNumber)}\r\n                              >\r\n                                {col}\r\n                              </div>\r\n                            </>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                      <span>{row}</span>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n            {isMobile && (\r\n                <div\r\n                  className=\"seat-selection-con\"\r\n                >\r\n                  <h1 className=\"seat-title\">\r\n                    좌석 선택 (영화관:{\" \"}\r\n                    {screening?.theaterEntity?.cinemaEntity?.cinemaName} /\r\n                    상영관: {screening?.theaterEntity?.name}) / 상영 날짜/시간:{\" \"}\r\n                    {screening?.screeningDate} {screening?.screeningTime}\r\n                  </h1>\r\n                  <div className=\"screen\">SCREEN</div>\r\n                  <div className=\"seat-container\" ref={seatContainerRef}>\r\n                    {rows.map((row) => (\r\n                      <div className=\"row\">\r\n                        <div key={row} className=\"seat-row\">\r\n                          {cols.map((col) => {\r\n                            const seatNumber = `${row}${col}`;\r\n                            return (\r\n                              <>\r\n                                <div\r\n                                  key={seatNumber}\r\n                                  className={getSeatClass(seatNumber)}\r\n                                  onClick={() => toggleSeat(seatNumber)}\r\n                                >\r\n                                  {col}\r\n                                </div>\r\n                              </>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n            )}\r\n            <div className=\"selected-seats\">\r\n              <h2>선택된 좌석</h2>\r\n              {selectedSeats.length > 0 ? (\r\n                <p>{selectedSeats.join(\", \")}</p>\r\n              ) : (\r\n                <p>선택된 좌석이 없습니다.</p>\r\n              )}\r\n            </div>\r\n            <div className=\"cart-go\">\r\n              <button onClick={cartFn}>장바구니</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScreeningSeat;","import React from 'react'\r\nimport ScreeningSeat from '../../components/screeningSeat/ScreeningSeat'\r\n\r\nconst ScreeningSeatPage = () => {\r\n    return (\r\n        <div>\r\n            <ScreeningSeat />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ScreeningSeatPage","import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\n\r\nconst jwtAxios=axios.create()\r\n\r\nconst refreshJWT= async (accessToken, refreshToken)=>{\r\n    const header= {headers: {\"Authorization\": `Bearer ${accessToken}`}}\r\n    const res = await axios.get(`http://43.201.20.172:8090/api/member/refresh?refreshToken=${refreshToken}`, header)\r\n\r\n    return res.data\r\n}\r\n\r\nconst beforeReq= (config) =>{\r\n    const memberInfo=getCookie(\"member\")\r\n    if(!memberInfo){\r\n        return Promise.reject(\r\n            {response:\r\n             {data: \r\n              {error: \"REQUIRE_LOGIN\"}\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const {accessToken} = memberInfo\r\n    config.headers.Authorization= `Bearer ${accessToken}`\r\n    return config\r\n}\r\n\r\nconst requestFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\nconst beforeRes=async (res)=>{\r\n\r\n    const data= res.data\r\n    if(data && data.error ==='ERROR_ACCESS_TOKEN'){\r\n        const memberCookieValue=getCookie(\"member\")\r\n        const result=await refreshJWT(memberCookieValue.accessToken,\r\n            memberCookieValue.refreshToken)\r\n        memberCookieValue.accessToken=result.accessToken\r\n        memberCookieValue.refreshToken=result.refreshToken\r\n\r\n        setCookie(\"member\", JSON.stringify(memberCookieValue), 1)\r\n\r\n        const originalRequest=res.config\r\n        originalRequest.headers.Authorization= `Bearer ${result.accessToken}`\r\n\r\n        return await axios(originalRequest)\r\n    }\r\n\r\n\r\n    return res\r\n}\r\n\r\nconst responseFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\njwtAxios.interceptors.request.use( beforeReq, requestFail)\r\njwtAxios.interceptors.response.use(beforeRes,responseFail)\r\n\r\nexport default jwtAxios"],"names":["ScreeningSeat","_location$state","_screening$theaterEnt","_screening$theaterEnt2","_screening$theaterEnt3","_screening$theaterEnt4","_screening$theaterEnt5","_screening$theaterEnt6","scale","setScale","useState","location","useLocation","movieEntity","setMovieEntity","state","screeningId","useParams","navigate","useNavigate","rows","cols","Array","from","length","_","i","screening","setScreening","selectedSeats","setSelectedSeats","disabledSeats","setDisabledSeats","isMobile","setIsMobile","window","innerWidth","seatContainerRef","useRef","useEffect","getCookie","alert","replace","fetchScreeningInfo","fetchDisabledSeats","current","scrollLeft","async","response","jwtAxios","get","data","console","log","error","seats","isArray","toggleSeat","seatNumber","includes","prevSelectedSeats","filter","seat","getSeatClass","audiAcc","Number","_jsx","className","children","_jsxs","src","poster_path","alt","movieNm","openDt","rank","toLocaleString","genres","director","theaterEntity","cinemaEntity","cinemaName","name","screeningDate","screeningTime","ref","map","row","col","_Fragment","onClick","join","payload","post","_error$response","_error$response2","ScreeningSeatPage","axios","create","interceptors","request","use","config","memberInfo","Promise","reject","accessToken","headers","Authorization","err","res","memberCookieValue","result","refreshToken","header","refreshJWT","setCookie","JSON","stringify","originalRequest"],"sourceRoot":""}