{"version":3,"file":"static/js/445.a8d44059.chunk.js","mappings":"0IAGA,MAAMA,EAASC,EAAAA,EAAMC,SAuDrBF,EAASG,aAAaC,QAAQC,KA9CZC,IACd,MAAMC,GAAWC,EAAAA,EAAAA,IAAU,UAC3B,IAAID,EACA,OAAOE,QAAQC,OACX,CAACC,SACA,CAACC,KACA,CAACC,MAAO,oBAKlB,MAAM,YAACC,GAAeP,EAEtB,OADAD,EAAOS,QAAQC,cAAe,UAAUF,IACjCR,CAAM,IAGEW,GACRR,QAAQC,OAAOO,KA8B1BjB,EAASG,aAAaQ,SAASN,KA3Bfa,UAEZ,MAAMN,EAAMO,EAAIP,KAChB,GAAGA,GAAsB,uBAAdA,EAAKC,MAA8B,CAC1C,MAAMO,GAAkBZ,EAAAA,EAAAA,IAAU,UAC5Ba,OAhCIH,OAAOJ,EAAaQ,KAClC,MAAMC,EAAQ,CAACR,QAAS,CAAC,cAAiB,UAAUD,MAGpD,aAFkBb,EAAAA,EAAMuB,IAAI,6DAA6DF,IAAgBC,IAE9FX,IAAI,EA4BQa,CAAWL,EAAkBN,YAC5CM,EAAkBE,cACtBF,EAAkBN,YAAYO,EAAOP,YACrCM,EAAkBE,aAAaD,EAAOC,cAEtCI,EAAAA,EAAAA,IAAU,SAAUC,KAAKC,UAAUR,GAAoB,GAEvD,MAAMS,EAAgBV,EAAIb,OAG1B,OAFAuB,EAAgBd,QAAQC,cAAe,UAAUK,EAAOP,oBAE3Cb,EAAAA,EAAAA,GAAM4B,EACvB,CAGA,OAAOV,CAAG,IAGMF,GACTR,QAAQC,OAAOO,KAM1B,S,oGCtDA,MAwKA,EAxKoBa,KAAO,IAADC,EACxB,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,KACTC,GAAWC,EAAAA,EAAAA,OAGVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,KAChCK,EAAUC,IAAeN,EAAAA,EAAAA,UAAS,OAClCO,EAASC,IAAcR,EAAAA,EAAAA,UAAS,KAChCS,EAASC,IAAcV,EAAAA,EAAAA,WAAS,IAChCzB,EAAOoC,IAAYX,EAAAA,EAAAA,UAAS,OAC5BY,EAAgBC,IAAqBb,EAAAA,EAAAA,UAAS,IAG/Cc,GAAaC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,cAGhDC,EAAAA,EAAAA,YAAU,KACR,GAAIxB,EAAI,CACmBd,WACvB,IACE,MAAMP,QAAiBX,EAAAA,EAASwB,IAC9B,0CAA0CQ,KAE5CK,EAAS1B,EAASC,KAAKwB,OACvBI,EAAY7B,EAASC,KAAK2B,UAC1BG,EAAW/B,EAASC,KAAK6B,SACzBG,EAAYjC,EAASC,KAAK+B,UAC1BQ,EAAkBxC,EAASC,KAAK+B,UAChCK,GAAW,EACb,CAAE,MAAO/B,GACPwC,QAAQ5C,MAAM,qFAAqBI,GACnCgC,EAAS,4HACTD,GAAW,EACb,GAEFU,EACF,MACEV,GAAW,EACb,GACC,CAAChB,IAiDJ,OAAIe,GACKY,EAAAA,EAAAA,KAAA,KAAAC,SAAG,2BAGR/C,GACK8C,EAAAA,EAAAA,KAAA,KAAAC,SAAI/C,KAIXgD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EAC1BD,EAAAA,EAAAA,KAAA,MAAAC,SAAK5B,EAAK,kCAAW,qCACrB6B,EAAAA,EAAAA,MAAA,QAAME,SAvCW7C,UACnB8C,EAAEC,iBAGF,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,KAAMpC,GACtBkC,EAASE,OAAO,QAAShC,GACzB8B,EAASE,OAAO,UAAW3B,GAC3ByB,EAASE,OAAO,WAAY7B,GAC5B2B,EAASE,OAAO,QAAShB,EAAWiB,OAChC1B,GACFuB,EAASE,OAAO,WAAYzB,GAC7BuB,EAASE,OAAO,iBAAkBlB,GAEnC,IAEE,MAAMvC,QAAiBX,EAAAA,EAASsE,KAC9B,yCACAJ,GAEFpB,EAAWnC,EAASC,KACtB,CAAE,MAAOC,GACPiC,EAAW,+EACXW,QAAQ5C,MAAM,SAAUA,EAC1B,CACAqB,EAAS,SAAS,EAca0B,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EAC1BD,EAAAA,EAAAA,KAAA,QAAAC,SAAM,kBACND,EAAAA,EAAAA,KAAA,SACEY,KAAK,OACLC,MAAOpC,EACPqC,SAAWT,GAAM3B,EAAS2B,EAAEU,OAAOF,OACnCG,UAAQ,QAGZd,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBF,SAAA,EAC7BD,EAAAA,EAAAA,KAAA,QAAAC,SAAM,8BACNC,EAAAA,EAAAA,MAAA,UACEW,MAAOjC,EACPkC,SAAWT,GAAMxB,EAAYwB,EAAEU,OAAOF,OACtCG,UAAQ,EAAAf,SAAA,EAERD,EAAAA,EAAAA,KAAA,UAAQa,MAAM,GAAEZ,SAAC,2CACjBD,EAAAA,EAAAA,KAAA,UAAQa,MAAM,iCAAOZ,SAAC,oCACtBD,EAAAA,EAAAA,KAAA,UAAQa,MAAM,iCAAOZ,SAAC,oCACtBD,EAAAA,EAAAA,KAAA,UAAQa,MAAM,iCAAOZ,SAAC,mCACD,QAApB7B,EAAAqB,EAAWwB,iBAAS,IAAA7C,GAApBA,EAAsB8C,SAAS,UAC9BlB,EAAAA,EAAAA,KAAA,UAAQa,MAAM,2BAAMZ,SAAC,8BAErBD,EAAAA,EAAAA,KAAAmB,EAAAA,SAAA,WAINjB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeF,SAAA,EAC5BD,EAAAA,EAAAA,KAAA,QAAAC,SAAM,kBACND,EAAAA,EAAAA,KAAA,YACEa,MAAO/B,EACPgC,SAAWT,GAAMtB,EAAWsB,EAAEU,OAAOF,OACrCG,UAAQ,QAGZd,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcF,SAAA,EAC3BD,EAAAA,EAAAA,KAAA,QAAAC,SAAM,kBACND,EAAAA,EAAAA,KAAA,SACEY,KAAK,OACLvC,GAAG,cACHyC,SAnGgBT,IACxB,MAAMe,EAAOf,EAAEU,OAAOM,MAAM,GAE5B,GAAID,EAAM,CACR,MAAME,EAAoB,CAAC,MAAO,OAAQ,MAAO,MAAO,MAAO,OACzDC,EAAgBH,EAAKI,KAAKC,MAAM,KAAKC,MAAMC,cAEjD,IAAKL,EAAkBJ,SAASK,GAI9B,OAHAK,MAAM,sFACNvB,EAAEU,OAAOF,MAAQ,QACjB5B,EAAY,MAIdA,EAAYmC,EACd,GAqFQS,MAAO,CAAEC,QAAS,WAEpB5B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaF,SAAA,EAC1BD,EAAAA,EAAAA,KAAA,SAAO+B,QAAQ,cAAc5B,UAAU,aAAYF,SAAC,+BAGpDD,EAAAA,EAAAA,KAAA,QAAM3B,GAAG,oBAAmB4B,SACzBjB,EACG,GAAGA,EAASwC,OACZjC,EACA,GAAGA,IACH,YAKVS,EAAAA,EAAAA,KAAA,UAAQY,KAAK,SAAST,UAAU,eAAcF,SAC3C5B,EAAK,kCAAW,uCAGpBa,IAAWc,EAAAA,EAAAA,KAAA,QAAAC,SAAOf,MACf,EClKV,EANwB8C,KAEpBhC,EAAAA,EAAAA,KAAC7B,EAAW,G","sources":["util/jwtUtil.js","components/board/BoardUpdate.jsx","pages/board/BoardUpdatePage.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\n\r\nconst jwtAxios=axios.create()\r\n\r\nconst refreshJWT= async (accessToken, refreshToken)=>{\r\n    const header= {headers: {\"Authorization\": `Bearer ${accessToken}`}}\r\n    const res = await axios.get(`http://43.201.20.172:8090/api/member/refresh?refreshToken=${refreshToken}`, header)\r\n\r\n    return res.data\r\n}\r\n\r\nconst beforeReq= (config) =>{\r\n    const memberInfo=getCookie(\"member\")\r\n    if(!memberInfo){\r\n        return Promise.reject(\r\n            {response:\r\n             {data: \r\n              {error: \"REQUIRE_LOGIN\"}\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const {accessToken} = memberInfo\r\n    config.headers.Authorization= `Bearer ${accessToken}`\r\n    return config\r\n}\r\n\r\nconst requestFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\nconst beforeRes=async (res)=>{\r\n\r\n    const data= res.data\r\n    if(data && data.error ==='ERROR_ACCESS_TOKEN'){\r\n        const memberCookieValue=getCookie(\"member\")\r\n        const result=await refreshJWT(memberCookieValue.accessToken,\r\n            memberCookieValue.refreshToken)\r\n        memberCookieValue.accessToken=result.accessToken\r\n        memberCookieValue.refreshToken=result.refreshToken\r\n\r\n        setCookie(\"member\", JSON.stringify(memberCookieValue), 1)\r\n\r\n        const originalRequest=res.config\r\n        originalRequest.headers.Authorization= `Bearer ${result.accessToken}`\r\n\r\n        return await axios(originalRequest)\r\n    }\r\n\r\n\r\n    return res\r\n}\r\n\r\nconst responseFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\njwtAxios.interceptors.request.use( beforeReq, requestFail)\r\njwtAxios.interceptors.response.use(beforeRes,responseFail)\r\n\r\nexport default jwtAxios","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport jwtAxios from \"../../util/jwtUtil\";\r\nimport \"../../css/BoardUpdate.css\";\r\n\r\nconst BoardUpdate = () => {\r\n  const { id } = useParams(); // Get the id from the URL params (for edit scenario)\r\n  const navigate = useNavigate();\r\n\r\n  // State variables\r\n  const [title, setTitle] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\"); // Category state\r\n  const [content, setContent] = useState(\"\");\r\n  const [itemFile, setItemFile] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(true); // For loading state\r\n  const [error, setError] = useState(null); // For error state\r\n  const [originFileName, setOriginFileName] = useState(\"\");\r\n\r\n  // Redux state (login details)\r\n  const loginState = useSelector((state) => state.loginSlice);\r\n\r\n  // Fetch the board detail if it's an edit scenario\r\n  useEffect(() => {\r\n    if (id) {\r\n      const fetchBoardDetail = async () => {\r\n        try {\r\n          const response = await jwtAxios.get(\r\n            `http://43.201.20.172:8090/board/detail/${id}`\r\n          );\r\n          setTitle(response.data.title);\r\n          setCategory(response.data.category);\r\n          setContent(response.data.content);\r\n          setItemFile(response.data.itemFile); // If there's an existing file\r\n          setOriginFileName(response.data.itemFile);\r\n          setLoading(false);\r\n        } catch (err) {\r\n          console.error(\"게시글 상세 정보 불러오기 실패\", err);\r\n          setError(\"게시글 상세 정보를 불러오는 데 실패했습니다.\");\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchBoardDetail();\r\n    } else {\r\n      setLoading(false); // If there's no id, stop loading\r\n    }\r\n  }, [id]);\r\n\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n  \r\n    if (file) {\r\n      const allowedExtensions = [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"svg\"];\r\n      const fileExtension = file.name.split(\".\").pop().toLowerCase();\r\n  \r\n      if (!allowedExtensions.includes(fileExtension)) {\r\n        alert(\"허용되지 않은 파일 형식입니다.\");\r\n        e.target.value = \"\";\r\n        setItemFile(null);\r\n        return;\r\n      }\r\n  \r\n      setItemFile(file); // 상태 업데이트만!\r\n    }\r\n  };\r\n\r\n  // Form submission handler\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Prepare FormData\r\n    const formData = new FormData();\r\n    formData.append(\"id\", id);\r\n    formData.append(\"title\", title);\r\n    formData.append(\"content\", content);\r\n    formData.append(\"category\", category);\r\n    formData.append(\"email\", loginState.email); // Email from login state\r\n    if (itemFile) {\r\n      formData.append(\"itemFile\", itemFile); // Add the file if any\r\n    }formData.append(\"originFileName\", originFileName);\r\n\r\n    try {\r\n      // Send data to the server (Content-Type handled automatically by FormData)\r\n      const response = await jwtAxios.post(\r\n        \"http://43.201.20.172:8090/board/update\",\r\n        formData\r\n      );\r\n      setMessage(response.data);\r\n    } catch (error) {\r\n      setMessage(\"게시글 수정에 실패했습니다.\");\r\n      console.error(\"Error:\", error);\r\n    }\r\n    navigate(\"/board\");\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>로딩 중...</p>; // Loading state\r\n  }\r\n\r\n  if (error) {\r\n    return <p>{error}</p>; // Error state\r\n  }\r\n\r\n  return (\r\n    <div className=\"boardUpdate\">\r\n      <h2>{id ? \"게시글 수정\" : \"게시글 추가\"}</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"board-title\">\r\n          <span>제목</span>\r\n          <input\r\n            type=\"text\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"board-category\">\r\n          <span>카테고리</span>\r\n          <select\r\n            value={category}\r\n            onChange={(e) => setCategory(e.target.value)}\r\n            required\r\n          >\r\n            <option value=\"\">카테고리 선택</option>\r\n            <option value=\"영화게시판\">영화게시판</option>\r\n            <option value=\"자유게시판\">자유게시판</option>\r\n            <option value=\"문의게시판\">문의게시판</option>\r\n            {loginState.roleNames?.includes(\"ADMIN\") ? (\r\n              <option value=\"공지사항\">공지사항</option>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </select>\r\n        </div>\r\n        <div className=\"board-content\">\r\n          <span>내용</span>\r\n          <textarea\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n            required\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"board-upload\">\r\n          <span>파일</span>\r\n          <input\r\n            type=\"file\"\r\n            id=\"file-upload\"\r\n            onChange={handleFileChange}\r\n            style={{ display: \"none\" }} // input 숨기기\r\n          />\r\n          <div className=\"file-upload\">\r\n            <label htmlFor=\"file-upload\" className=\"upload-btn\">\r\n              파일 선택\r\n            </label>\r\n            <span id=\"file-name-display\">\r\n              {itemFile\r\n                ? `${itemFile.name}`\r\n                : originFileName\r\n                ? `${originFileName}`\r\n                : \"\"}\r\n            </span>\r\n\r\n          </div>\r\n        </div>\r\n        <button type=\"submit\" className=\"board-submit\">\r\n          {id ? \"게시글 수정\" : \"게시글 추가\"}\r\n        </button>\r\n      </form>\r\n      {message && <span>{message}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardUpdate;\r\n","import React from 'react'\r\nimport BoardUpdate from '../../components/board/BoardUpdate'\r\n\r\nconst BoardUpdatePage = () => {\r\n  return (\r\n    <BoardUpdate/>\r\n  )\r\n}\r\n\r\nexport default BoardUpdatePage"],"names":["jwtAxios","axios","create","interceptors","request","use","config","memberInfo","getCookie","Promise","reject","response","data","error","accessToken","headers","Authorization","err","async","res","memberCookieValue","result","refreshToken","header","get","refreshJWT","setCookie","JSON","stringify","originalRequest","BoardUpdate","_loginState$roleNames","id","useParams","navigate","useNavigate","title","setTitle","useState","category","setCategory","content","setContent","itemFile","setItemFile","message","setMessage","loading","setLoading","setError","originFileName","setOriginFileName","loginState","useSelector","state","loginSlice","useEffect","console","fetchBoardDetail","_jsx","children","_jsxs","className","onSubmit","e","preventDefault","formData","FormData","append","email","post","type","value","onChange","target","required","roleNames","includes","_Fragment","file","files","allowedExtensions","fileExtension","name","split","pop","toLowerCase","alert","style","display","htmlFor","BoardUpdatePage"],"sourceRoot":""}