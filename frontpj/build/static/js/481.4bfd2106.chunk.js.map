{"version":3,"file":"static/js/481.4bfd2106.chunk.js","mappings":"gKAKA,MAAMA,EAAcC,IAChB,MAAMC,EAAO,IAAIC,KAAKF,GAQtB,MAAO,GAPMC,EAAKE,iBACJC,OAAOH,EAAKI,WAAa,GAAGC,SAAS,EAAG,QAC1CF,OAAOH,EAAKM,WAAWD,SAAS,EAAG,QACjCF,OAAOH,EAAKO,YAAYF,SAAS,EAAG,QAClCF,OAAOH,EAAKQ,cAAcH,SAAS,EAAG,QACtCF,OAAOH,EAAKS,cAAcJ,SAAS,EAAG,MAES,EAiDnE,EA9CmBK,KACf,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,IAsBzC,OANAC,QAAQC,IAAIJ,IAEZK,EAAAA,EAAAA,YAAU,KAhBcC,WACpB,IACI,MACMC,SADiBC,EAAAA,EAASC,IAAI,gDACJC,KAAKC,qBAAuB,GAG5DJ,EAAeK,MAAK,CAACC,EAAGC,IAAM,IAAIxB,KAAKwB,EAAEC,YAAc,IAAIzB,KAAKuB,EAAEE,cAElEd,EAAYM,EAChB,CAAE,MAAOS,GACLb,QAAQa,MAAM,6FAAwBA,EAC1C,GAMAC,EAAiB,GAClB,KAGCC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACrBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oCACHpB,EAASsB,OAAS,GACfD,EAAAA,EAAAA,KAAA,MAAAD,SACKpB,EAASuB,KAAI,CAACC,EAASC,KACpBJ,EAAAA,EAAAA,KAAA,MAAAD,UACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,iBAAgBC,SAAEI,EAAQE,WAC1CL,EAAAA,EAAAA,KAAA,QAAMF,UAAU,cAAaC,SACxBI,EAAQT,WAAa5B,EAAWqC,EAAQT,YAAc,+CAJ1DU,QAWjBJ,EAAAA,EAAAA,KAAA,KAAAD,SAAG,yDAEL,EChDd,EARuBO,KAEfN,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,CAAAR,UACIC,EAAAA,EAAAA,KAACtB,EAAU,K,0DCHvB,MAAMS,EAASqB,EAAAA,EAAMC,SAuDrBtB,EAASuB,aAAaC,QAAQC,KA9CZC,IACd,MAAMC,GAAWC,EAAAA,EAAAA,IAAU,UAC3B,IAAID,EACA,OAAOE,QAAQC,OACX,CAACC,SACA,CAAC7B,KACA,CAACM,MAAO,oBAKlB,MAAM,YAACwB,GAAeL,EAEtB,OADAD,EAAOO,QAAQC,cAAe,UAAUF,IACjCN,CAAM,IAGES,GACRN,QAAQC,OAAOK,KA8B1BnC,EAASuB,aAAaQ,SAASN,KA3Bf3B,UAEZ,MAAMI,EAAMkC,EAAIlC,KAChB,GAAGA,GAAsB,uBAAdA,EAAKM,MAA8B,CAC1C,MAAM6B,GAAkBT,EAAAA,EAAAA,IAAU,UAC5BU,OAhCIxC,OAAOkC,EAAaO,KAClC,MAAMC,EAAQ,CAACP,QAAS,CAAC,cAAiB,UAAUD,MAGpD,aAFkBX,EAAAA,EAAMpB,IAAI,6DAA6DsC,IAAgBC,IAE9FtC,IAAI,EA4BQuC,CAAWJ,EAAkBL,YAC5CK,EAAkBE,cACtBF,EAAkBL,YAAYM,EAAON,YACrCK,EAAkBE,aAAaD,EAAOC,cAEtCG,EAAAA,EAAAA,IAAU,SAAUC,KAAKC,UAAUP,GAAoB,GAEvD,MAAMQ,EAAgBT,EAAIV,OAG1B,OAFAmB,EAAgBZ,QAAQC,cAAe,UAAUI,EAAON,oBAE3CX,EAAAA,EAAAA,GAAMwB,EACvB,CAGA,OAAOT,CAAG,IAGMD,GACTN,QAAQC,OAAOK,KAM1B,S","sources":["components/member/MyChatList.jsx","pages/member/MyChatListPage.jsx","util/jwtUtil.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport jwtAxios from \"../../util/jwtUtil\";\r\nimport \"../../css/MyChatList.css\"; // CSS 파일 import\r\n\r\n// 날짜 포맷 함수\r\nconst formatDate = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(date.getDate()).padStart(2, \"0\");\r\n    const hours = String(date.getHours()).padStart(2, \"0\");\r\n    const minutes = String(date.getMinutes()).padStart(2, \"0\");\r\n    const seconds = String(date.getSeconds()).padStart(2, \"0\");\r\n\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\nconst MyChatList = () => {\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const fetchMemberInfo = async () => {\r\n        try {\r\n            const response = await jwtAxios.get(\"http://43.201.20.172:8090/api/myinfo/detail\");\r\n            const sortedMessages = response.data.chatMessageEntities || [];\r\n\r\n            // createTime을 기준으로 내림차순 정렬\r\n            sortedMessages.sort((a, b) => new Date(b.createTime) - new Date(a.createTime));\r\n\r\n            setMessages(sortedMessages);\r\n        } catch (error) {\r\n            console.error(\"메시지 목록 가져오는 중 오류 발생:\", error);\r\n        }\r\n    };\r\n\r\n    console.log(messages);\r\n\r\n    useEffect(() => {\r\n        fetchMemberInfo();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"chatList\">\r\n            <h3>메시지 목록</h3>\r\n            {messages.length > 0 ? (\r\n                <ul>\r\n                    {messages.map((message, index) => (\r\n                        <li key={index}>\r\n                            <div className=\"message\">\r\n                                <span className=\"messageContent\">{message.content}</span>\r\n                                <span className=\"messageTime\">\r\n                                    {message.createTime ? formatDate(message.createTime) : \"시간 정보 없음\"}\r\n                                </span>\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>메시지가 없습니다.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyChatList;\r\n","import React from 'react'\r\nimport MyChatList from '../../components/member/MyChatList'\r\n\r\nconst MyChatListPage = () => {\r\n    return (\r\n        <>\r\n            <MyChatList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyChatListPage","import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\n\r\nconst jwtAxios=axios.create()\r\n\r\nconst refreshJWT= async (accessToken, refreshToken)=>{\r\n    const header= {headers: {\"Authorization\": `Bearer ${accessToken}`}}\r\n    const res = await axios.get(`http://43.201.20.172:8090/api/member/refresh?refreshToken=${refreshToken}`, header)\r\n\r\n    return res.data\r\n}\r\n\r\nconst beforeReq= (config) =>{\r\n    const memberInfo=getCookie(\"member\")\r\n    if(!memberInfo){\r\n        return Promise.reject(\r\n            {response:\r\n             {data: \r\n              {error: \"REQUIRE_LOGIN\"}\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const {accessToken} = memberInfo\r\n    config.headers.Authorization= `Bearer ${accessToken}`\r\n    return config\r\n}\r\n\r\nconst requestFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\nconst beforeRes=async (res)=>{\r\n\r\n    const data= res.data\r\n    if(data && data.error ==='ERROR_ACCESS_TOKEN'){\r\n        const memberCookieValue=getCookie(\"member\")\r\n        const result=await refreshJWT(memberCookieValue.accessToken,\r\n            memberCookieValue.refreshToken)\r\n        memberCookieValue.accessToken=result.accessToken\r\n        memberCookieValue.refreshToken=result.refreshToken\r\n\r\n        setCookie(\"member\", JSON.stringify(memberCookieValue), 1)\r\n\r\n        const originalRequest=res.config\r\n        originalRequest.headers.Authorization= `Bearer ${result.accessToken}`\r\n\r\n        return await axios(originalRequest)\r\n    }\r\n\r\n\r\n    return res\r\n}\r\n\r\nconst responseFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\njwtAxios.interceptors.request.use( beforeReq, requestFail)\r\njwtAxios.interceptors.response.use(beforeRes,responseFail)\r\n\r\nexport default jwtAxios"],"names":["formatDate","dateStr","date","Date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","MyChatList","messages","setMessages","useState","console","log","useEffect","async","sortedMessages","jwtAxios","get","data","chatMessageEntities","sort","a","b","createTime","error","fetchMemberInfo","_jsxs","className","children","_jsx","length","map","message","index","content","MyChatListPage","_Fragment","axios","create","interceptors","request","use","config","memberInfo","getCookie","Promise","reject","response","accessToken","headers","Authorization","err","res","memberCookieValue","result","refreshToken","header","refreshJWT","setCookie","JSON","stringify","originalRequest"],"sourceRoot":""}