{"version":3,"file":"static/js/828.f9891ba6.chunk.js","mappings":"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","sources":["components/member/MyMemberInfo.jsx","pages/member/MyMemberInfoPage.jsx","util/jwtUtil.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"../../css/MyMemberInfo.css\";\r\nimport jwtAxios from \"../../util/jwtUtil\";\r\n\r\nconst MyMemberInfo = () => {\r\n  const navigate = useNavigate();\r\n  const [member, setMember] = useState(null);\r\n  const [showUpdateModal, setShowUpdateModal] = useState(false);\r\n  const [isVerified, setIsVerified] = useState(false);\r\n  const [currentPassword, setCurrentPassword] = useState(\"\");\r\n  const [showCurrentPw, setShowCurrentPw] = useState(false);\r\n  const [showNewPw, setShowNewPw] = useState(false);\r\n  const [showConfirmPw, setShowConfirmPw] = useState(false);\r\n  const [updateForm, setUpdateForm] = useState({\r\n    nickname: \"\",\r\n    newPassword: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n  const inputRef = useRef(null);\r\n  const [formErrors, setFormErrors] = useState({\r\n    nickname: \"\",\r\n    newPassword: \"\",\r\n    confirmPassword: \"\",\r\n    currentPassword:\"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (showUpdateModal && inputRef.current && !isVerified) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [showUpdateModal, isVerified]);\r\n\r\n  const fetchMemberInfo = async () => {\r\n    try {\r\n      const response = await jwtAxios.get(\r\n        \"http://43.201.20.172:8090/api/myinfo/detail\"\r\n      );\r\n      setMember(response.data);\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 401) {\r\n        alert(\"로그인이 필요합니다.\");\r\n        navigate(\"/member/login\", { replace: true });\r\n      } else {\r\n        console.error(\"사용자 정보를 가져오는 중 오류 발생:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMemberInfo();\r\n  }, []);\r\n\r\n  const handleOpenUpdateModal = () => {\r\n    setShowUpdateModal(true);\r\n    setIsVerified(false);\r\n    setCurrentPassword(\"\");\r\n    setUpdateForm({\r\n      nickname: member ? member.nickname : \"\",\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n    });\r\n    setFormErrors({\r\n      nickname: \"\",\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n      currentPassword: \"\",\r\n    });\r\n  };\r\n\r\n  const handleVerifyPassword = async () => {\r\n    try {\r\n      const response = await jwtAxios.post(\"http://43.201.20.172:8090/api/auth/verify-password\", {\r\n        currentPassword: currentPassword,\r\n      });\r\n      if (response.data.verified) {\r\n        setIsVerified(true);\r\n      } else {\r\n        setFormErrors({ ...formErrors, currentPassword: \"현재 비밀번호가 올바르지 않습니다.\" });\r\n      }\r\n    } catch (error) {\r\n      setFormErrors({ ...formErrors, currentPassword: \"현재 비밀번호가 올바르지 않습니다.\" });\r\n    }\r\n  };\r\n\r\n  const handleUpdateMember = async () => {\r\n    let errors = {};\r\n    let isValid = true;\r\n  \r\n    console.log(\"업데이트 폼 데이터:\", updateForm);  // 데이터 확인\r\n  \r\n    if (!updateForm.nickname) {\r\n      errors.nickname = \"닉네임을 입력해주세요.\";\r\n      isValid = false;\r\n    } else if (updateForm.nickname.length < 2) {\r\n      errors.nickname = \"닉네임은 최소 2자 이상이어야 합니다.\";\r\n      isValid = false;\r\n    }\r\n  \r\n    // 닉네임 비교\r\n    if (updateForm.nickname === member.nickname) {\r\n      errors.nickname = \"새 닉네임이 기존 닉네임과 동일합니다.\";\r\n      isValid = false;\r\n    }\r\n  \r\n    if (updateForm.newPassword) {\r\n      const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d).{8,20}$/;\r\n      if (!passwordRegex.test(updateForm.newPassword)) {\r\n        errors.newPassword = \"비밀번호는 영문과 숫자를 포함한 8~20자여야 합니다.\";\r\n        isValid = false;\r\n      }\r\n      if (updateForm.newPassword !== updateForm.confirmPassword) {\r\n        errors.confirmPassword = \"새 비밀번호와 확인 비밀번호가 일치하지 않습니다.\";\r\n        isValid = false;\r\n      }\r\n    }\r\n  \r\n    if (!isValid) {\r\n      setFormErrors(errors);\r\n      return;\r\n    }\r\n  \r\n    const dataToUpdate = {\r\n      nickname: updateForm.nickname,\r\n      pw: updateForm.newPassword,\r\n    };\r\n  \r\n    try {\r\n      const response = await jwtAxios.put(\"http://43.201.20.172:8090/api/myinfo/update\", dataToUpdate);\r\n      alert(\"정보가 업데이트되었습니다.\");\r\n      setShowUpdateModal(false);\r\n      fetchMemberInfo();\r\n    } catch (error) {\r\n      if (error.response && error.response.data) {\r\n        alert(error.response.data);\r\n      } else {\r\n        alert(\"정보 업데이트에 실패했습니다.\");\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"memberInfo\">\r\n      <div className=\"userTitle\">\r\n        <span>안녕하세요!</span>\r\n        <span>{member ? member.nickname : \"\"}님</span>\r\n      </div>\r\n\r\n      {member ? (\r\n        <div className=\"memberInfoContent\">\r\n          <button className=\"memberUpdateBtn\" onClick={handleOpenUpdateModal}>\r\n            정보 수정하기\r\n          </button>\r\n          <div className=\"email\">\r\n            <span>이메일</span>\r\n            <span>{member.email}</span>\r\n          </div>\r\n          <div className=\"social\">\r\n            <span>소셜 계정</span>\r\n            <span>{member.social ? \"사용 중\" : \"사용 안 함\"}</span>\r\n          </div>\r\n          <div className=\"role\">\r\n            <span>권한</span>\r\n            <span>{member.roleNames.join(\", \")}</span>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <span>사용자 정보를 불러오는 중입니다...</span>\r\n      )}\r\n\r\n      {showUpdateModal && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-close\">\r\n              <img src=\"./../image/close.svg\" alt=\"close\" onClick={() => setShowUpdateModal(false)} />\r\n            </div>\r\n            {!isVerified ? (\r\n              <div>\r\n                <div className=\"password\">\r\n                  <span>현재 비밀번호</span>\r\n                  <div>\r\n                    <input\r\n                      id=\"currentPw\"\r\n                      type={showCurrentPw ? \"text\" : \"password\"}\r\n                      value={currentPassword}\r\n                      placeholder=\"현재 비밀번호를 입력하세요.\"\r\n                      onChange={(e) => setCurrentPassword(e.target.value)}\r\n                      ref={inputRef}\r\n                      onKeyDown={(e) => {\r\n                        if (e.key === \"Enter\") handleVerifyPassword();\r\n                      }}\r\n                    />\r\n                    <div\r\n                      className=\"eye\"\r\n                      onClick={() => setShowCurrentPw((prev) => !prev)}\r\n                    >\r\n                      <img\r\n                        src={\r\n                          showCurrentPw\r\n                            ? \"/image/eye.svg\"\r\n                            : \"/image/eye-slash.svg\"\r\n                        }\r\n                        alt=\"toggle-pw\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {formErrors.currentPassword && (\r\n                    <div className=\"error\">{formErrors.currentPassword}</div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"modal-actions\">\r\n                  <button onClick={handleVerifyPassword}>확인</button>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"updateForm\">\r\n                <h2>정보 수정</h2>\r\n                <span>닉네임 변경</span>\r\n                <input\r\n                  type=\"text\"\r\n                  value={updateForm.nickname}\r\n                  onChange={(e) =>\r\n                    setUpdateForm({ ...updateForm, nickname: e.target.value })\r\n                  }\r\n                />\r\n                {formErrors.nickname && <div className=\"error\">{formErrors.nickname}</div>}\r\n                <div className=\"password\">\r\n                  <span>새 비밀번호</span>\r\n                  <div>\r\n                    <input\r\n                      id=\"newPw\"\r\n                      type={showNewPw ? \"text\" : \"password\"}\r\n                      value={updateForm.newPassword}\r\n                      placeholder=\"새 비밀번호를 입력하세요.\"\r\n                      onChange={(e) =>\r\n                        setUpdateForm({\r\n                          ...updateForm,\r\n                          newPassword: e.target.value,\r\n                        })\r\n                      }\r\n                    />\r\n                    <div\r\n                      className=\"eye\"\r\n                      onClick={() => setShowNewPw((prev) => !prev)}\r\n                    >\r\n                      <img\r\n                        src={\r\n                          showNewPw ? \"/image/eye.svg\" : \"/image/eye-slash.svg\"\r\n                        }\r\n                        alt=\"toggle-pw\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {formErrors.newPassword && (\r\n                    <div className=\"error\">{formErrors.newPassword}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"password\">\r\n                  <span>새 비밀번호 확인</span>\r\n                  <div>\r\n                    <input\r\n                      id=\"confirmPw\"\r\n                      type={showConfirmPw ? \"text\" : \"password\"}\r\n                      value={updateForm.confirmPassword}\r\n                      placeholder=\"새 비밀번호를 다시 입력하세요.\"\r\n                      onChange={(e) =>\r\n                        setUpdateForm({\r\n                          ...updateForm,\r\n                          confirmPassword: e.target.value,\r\n                        })\r\n                      }\r\n                    />\r\n                    <div\r\n                      className=\"eye\"\r\n                      onClick={() => setShowConfirmPw((prev) => !prev)}\r\n                    >\r\n                      <img\r\n                        src={\r\n                          showConfirmPw\r\n                            ? \"/image/eye.svg\"\r\n                            : \"/image/eye-slash.svg\"\r\n                        }\r\n                        alt=\"toggle-pw\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  {formErrors.confirmPassword && (\r\n                    <div className=\"error\">{formErrors.confirmPassword}</div>\r\n                  )}\r\n                </div>\r\n                <div className=\"modal-actions\">\r\n                  <button onClick={handleUpdateMember}>수정</button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyMemberInfo;\r\n","import React from 'react'\r\nimport MyMemberInfo from '../../components/member/MyMemberInfo'\r\n\r\nconst MyMemberInfoPage = () => {\r\n    return (\r\n        <>\r\n            <MyMemberInfo />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyMemberInfoPage","import axios from \"axios\";\r\nimport { getCookie, setCookie } from \"./cookieUtil\";\r\n\r\nconst jwtAxios=axios.create()\r\n\r\nconst refreshJWT= async (accessToken, refreshToken)=>{\r\n    const header= {headers: {\"Authorization\": `Bearer ${accessToken}`}}\r\n    const res = await axios.get(`http://43.201.20.172:8090/api/member/refresh?refreshToken=${refreshToken}`, header)\r\n\r\n    return res.data\r\n}\r\n\r\nconst beforeReq= (config) =>{\r\n    const memberInfo=getCookie(\"member\")\r\n    if(!memberInfo){\r\n        return Promise.reject(\r\n            {response:\r\n             {data: \r\n              {error: \"REQUIRE_LOGIN\"}\r\n                }\r\n            }\r\n        )\r\n    }\r\n    const {accessToken} = memberInfo\r\n    config.headers.Authorization= `Bearer ${accessToken}`\r\n    return config\r\n}\r\n\r\nconst requestFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\nconst beforeRes=async (res)=>{\r\n\r\n    const data= res.data\r\n    if(data && data.error ==='ERROR_ACCESS_TOKEN'){\r\n        const memberCookieValue=getCookie(\"member\")\r\n        const result=await refreshJWT(memberCookieValue.accessToken,\r\n            memberCookieValue.refreshToken)\r\n        memberCookieValue.accessToken=result.accessToken\r\n        memberCookieValue.refreshToken=result.refreshToken\r\n\r\n        setCookie(\"member\", JSON.stringify(memberCookieValue), 1)\r\n\r\n        const originalRequest=res.config\r\n        originalRequest.headers.Authorization= `Bearer ${result.accessToken}`\r\n\r\n        return await axios(originalRequest)\r\n    }\r\n\r\n\r\n    return res\r\n}\r\n\r\nconst responseFail=(err)=>{\r\n    return Promise.reject(err)\r\n}\r\n\r\njwtAxios.interceptors.request.use( beforeReq, requestFail)\r\njwtAxios.interceptors.response.use(beforeRes,responseFail)\r\n\r\nexport default jwtAxios"],"names":["MyMemberInfo","navigate","useNavigate","member","setMember","useState","showUpdateModal","setShowUpdateModal","isVerified","setIsVerified","currentPassword","setCurrentPassword","showCurrentPw","setShowCurrentPw","showNewPw","setShowNewPw","showConfirmPw","setShowConfirmPw","updateForm","setUpdateForm","nickname","newPassword","confirmPassword","inputRef","useRef","formErrors","setFormErrors","useEffect","current","focus","fetchMemberInfo","async","response","jwtAxios","get","data","error","status","alert","replace","console","handleVerifyPassword","post","verified","_jsxs","className","children","_jsx","onClick","handleOpenUpdateModal","email","social","roleNames","join","src","alt","type","value","onChange","e","target","id","placeholder","prev","errors","isValid","log","length","test","dataToUpdate","pw","put","ref","onKeyDown","key","MyMemberInfoPage","_Fragment","axios","create","interceptors","request","use","config","memberInfo","getCookie","Promise","reject","accessToken","headers","Authorization","err","res","memberCookieValue","result","refreshToken","header","refreshJWT","setCookie","JSON","stringify","originalRequest"],"sourceRoot":""}