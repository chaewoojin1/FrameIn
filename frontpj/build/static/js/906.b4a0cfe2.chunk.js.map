{"version":3,"file":"static/js/906.b4a0cfe2.chunk.js","mappings":"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","sources":["components/ws/Komoran.jsx","pages/ws/KomoranPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport \"../../css/Komoran.css\";\r\n\r\n// 지도 영역 렌더링 컴포넌트\r\nconst MapPlaceholder = React.memo(({ mapRef, isKomoranOpen, cinemas, lastLocation, markers, onMapRendered }) => {\r\n  useEffect(() => {\r\n    if (mapRef.current) {\r\n      mapRef.current.style.width = \"500px\";\r\n      mapRef.current.style.height = \"300px\";\r\n      mapRef.current.style.display = isKomoranOpen ? \"block\" : \"none\";\r\n\r\n      if (window.kakao?.maps) {\r\n        const options = {\r\n          center: new window.kakao.maps.LatLng(37.5665, 126.9780), // 기본 위치 (서울)\r\n          level: 7,\r\n        };\r\n\r\n        const map = new window.kakao.maps.Map(mapRef.current, options);\r\n\r\n        if (cinemas.length > 0) {\r\n          const { lat, lon } = cinemas[0];\r\n          map.setCenter(new window.kakao.maps.LatLng(lat, lon));\r\n\r\n          cinemas.forEach((cinema) => {\r\n            const position = new window.kakao.maps.LatLng(cinema.lat, cinema.lon);\r\n            const marker = new window.kakao.maps.Marker({ position });\r\n            marker.setMap(map);\r\n\r\n            const infowindow = new window.kakao.maps.InfoWindow({\r\n              content: `<div>${cinema.cinemaName}<br>${cinema.address}</div>`,\r\n            });\r\n\r\n            window.kakao.maps.event.addListener(marker, \"click\", () => {\r\n              infowindow.open(map, marker);\r\n            });\r\n          });\r\n        } else if (lastLocation) {\r\n          const { lat, lon } = lastLocation;\r\n          map.setCenter(new window.kakao.maps.LatLng(lat, lon));\r\n\r\n          markers.forEach((markerInfo) => {\r\n            const position = new window.kakao.maps.LatLng(markerInfo.lat, markerInfo.lon);\r\n            const marker = new window.kakao.maps.Marker({ position });\r\n            marker.setMap(map);\r\n\r\n            const infowindow = new window.kakao.maps.InfoWindow({\r\n              content: `<div>${markerInfo.cinemaName}<br>${markerInfo.address}</div>`,\r\n            });\r\n\r\n            window.kakao.maps.event.addListener(marker, \"click\", () => {\r\n              infowindow.open(map, marker);\r\n            });\r\n          });\r\n        }\r\n\r\n        // 지도가 렌더링된 후 스크롤을 조정합니다.\r\n        if (onMapRendered) {\r\n          onMapRendered();\r\n        }\r\n      }\r\n    }\r\n  }, [mapRef, isKomoranOpen, cinemas, lastLocation, markers, onMapRendered]);\r\n\r\n  return <div id=\"map\" ref={mapRef}></div>;\r\n});\r\n\r\n// 채팅 메시지 컴포넌트 (불필요한 리렌더링 최소화를 위해 React.memo 사용)\r\nconst Message = React.memo(({ sender, content, isLastBotMessage, isLatestMap, isFirstMessage, mapRef, isKomoranOpen, cinemas, lastLocation, markers, onMapRendered, showTime }) => {\r\n  const renderContent = () => {\r\n    if (content === \"map\") {\r\n      if (!isLatestMap) {\r\n        return <p>지도가 업데이트 되었습니다.</p>;\r\n      }\r\n      return <MapPlaceholder mapRef={mapRef} isKomoranOpen={isKomoranOpen} cinemas={cinemas} lastLocation={lastLocation} markers={markers} onMapRendered={onMapRendered} />;\r\n    }\r\n    return <p className=\"message-content\" dangerouslySetInnerHTML={{ __html: content }}></p>;\r\n  };\r\n\r\n  return (\r\n    <div className={`${sender}-chat`} style={isFirstMessage ? { display: \"none\" } : {}}>\r\n      {showTime && <div className=\"time-display\"><p>{showTime}</p></div>}\r\n      <div className=\"message\">\r\n        <div className=\"part\">\r\n          {sender === \"bot\" && isLastBotMessage && (\r\n            <div className=\"chat-body-logo\">\r\n              <img src=\"/image/logo.png\" alt=\"logo\" id=\"logo\" />\r\n            </div>\r\n          )}\r\n          {renderContent()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst Komoran = () => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [movieDetails, setMovieDetails] = useState(null);\r\n  const [cinemaList, setCinemaList] = useState([]);\r\n  const [lastLocation, setLastLocation] = useState(null);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [mapLoaded, setMapLoaded] = useState(false);\r\n  const [isKomoranOpen, setIsKomoranOpen] = useState(true);\r\n  const [messages, setMessages] = useState([]);\r\n  const [lastBotMessageIndex, setLastBotMessageIndex] = useState(null);\r\n  const bodyRef = useRef(null);\r\n  const mapRef = useRef(null); // Ref to track the map div\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  }, []);\r\n\r\n  // 카카오맵 스크립트 로드\r\n  const loadKakaoMapScript = useCallback(() => {\r\n    if (window.kakao?.maps) {\r\n      setMapLoaded(true);\r\n      return;\r\n    }\r\n    const script = document.createElement(\"script\");\r\n    script.src = `https://dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_MAP_API_KEY_3}&autoload=false&libraries=services`;\r\n    script.async = true;\r\n    script.onload = () => {\r\n      window.kakao.maps.load(() => {\r\n        setMapLoaded(true);\r\n        console.log(\"카카오맵 API 로드 성공\");\r\n      });\r\n    };\r\n    script.onerror = () => console.error(\"카카오맵 API 로드 실패\");\r\n    document.head.appendChild(script);\r\n  }, []);\r\n\r\n  // 채팅 영역 스크롤 자동 조정\r\n  const scrollToBottom = useCallback(() => {\r\n    if (bodyRef.current) {\r\n      bodyRef.current.scrollTop = bodyRef.current.scrollHeight;\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages, scrollToBottom]);\r\n\r\n  // 초기 로드 시 카카오맵 스크립트 로드 및 인사말 전송\r\n  useEffect(() => {\r\n    loadKakaoMapScript();\r\n    handleSendMessage(\"안녕\");\r\n  }, [loadKakaoMapScript]);\r\n\r\n  // 영화 정보 또는 영화관 목록이 변경되면 해당 내용을 채팅에 표시\r\n  useEffect(() => {\r\n    if (movieDetails) {\r\n      const { poster_path, movieNm, openDt, audiAcc, overview } = movieDetails;\r\n      const posterImage = poster_path\r\n        ? `<img src=\"${poster_path}\" alt=\"${movieNm} 포스터\" class=\"movie-poster\" />`\r\n        : \"포스터 이미지 없음\";\r\n\r\n      showMessage(posterImage);\r\n      showMessage(`영화 이름: ${movieNm}`);\r\n      showMessage(`개봉일: ${openDt}`);\r\n      showMessage(`누적 관객수: ${Number(audiAcc).toLocaleString(\"ko-KR\")}명`);\r\n      showMessage(`줄거리: ${overview}`);\r\n    }\r\n    if (cinemaList.length > 0 && mapLoaded) {\r\n      // 일정 시간 딜레이를 준 후 지도를 렌더링\r\n      setTimeout(() => {\r\n        showMessage(\"map\");\r\n      }, 100); // 10ms 지연\r\n    }\r\n  }, [movieDetails, cinemaList, mapLoaded]);\r\n\r\n  // 메시지 추가 (bot)\r\n  const showMessage = useCallback((msgContent) => {\r\n    if (!msgContent) return;\r\n    setMessages((prev) => {\r\n      const newMessages = [...prev, { sender: \"bot\", content: msgContent, time: new Date() }];\r\n      setLastBotMessageIndex(newMessages.length - 1);\r\n      return newMessages;\r\n    });\r\n  }, []);\r\n\r\n  // 백엔드로 메시지 전송\r\n  const sendMessageToBackend = useCallback(\r\n    async (msg) => {\r\n      try {\r\n        const response = await fetch(\"http://43.201.20.172:8090/botController\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n          },\r\n          body: new URLSearchParams({ message: msg }),\r\n        });\r\n        const responseData = await response.json();\r\n        const { answer } = responseData;\r\n\r\n        // 상태 초기화 전에 마지막 위치와 마커 저장\r\n        if (cinemaList.length > 0) {\r\n          const { lat, lon } = cinemaList[0];\r\n          setLastLocation({ lat, lon });\r\n          setMarkers(cinemaList.map(cinema => ({\r\n            lat: cinema.lat,\r\n            lon: cinema.lon,\r\n            cinemaName: cinema.cinemaName,\r\n            address: cinema.address\r\n          })));\r\n        }\r\n\r\n        // 상태 초기화\r\n        setCinemaList([]);\r\n        setMovieDetails(null);\r\n\r\n        if (Array.isArray(answer.message)) {\r\n          answer.message.forEach((msgObj) => showMessage(msgObj.message));\r\n        } else {\r\n          showMessage(answer.message);\r\n        }\r\n\r\n        if (answer.cinemaList && answer.cinemaList.length > 0) {\r\n          setCinemaList(answer.cinemaList);\r\n        } else if (answer.movie) {\r\n          setMovieDetails(answer.movie);\r\n        }\r\n        if (answer.content) {\r\n          showMessage(answer.content);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error sending message:\", error);\r\n      }\r\n    },\r\n    [cinemaList, showMessage]\r\n  );\r\n\r\n  // 메시지 전송 (사용자 입력)\r\n  const handleSendMessage = useCallback(\r\n    async (msg) => {\r\n      const trimmedMsg = msg.trim();\r\n      if (trimmedMsg.length < 2) return;\r\n      setMessages((prev) => [...prev, { sender: \"user\", content: trimmedMsg, time: new Date() }]);\r\n      setMessage(\"\");\r\n\r\n      // mapRef 초기화\r\n      if (mapRef.current) {\r\n        mapRef.current.innerHTML = \"\"; // 내용 비우기\r\n        mapRef.current.style.width = \"0px\"; // 초기 스타일 설정\r\n        mapRef.current.style.height = \"0px\"; // 초기 스타일 설정\r\n      }\r\n\r\n      await sendMessageToBackend(trimmedMsg);\r\n    },\r\n    [sendMessageToBackend]\r\n  );\r\n\r\n  // 채팅 입력 버튼 클릭 시 처리\r\n  const handleButtonClick = () => {\r\n    handleSendMessage(message);\r\n  };\r\n\r\n  // 채팅창 열고 닫기 토글\r\n  const toggleKomoran = () => {\r\n    setIsKomoranOpen((prev) => !prev);\r\n  };\r\n\r\n  // 현재 시간 계산\r\n  const getTime = (date) => {\r\n    const now = date || new Date();\r\n    let hours = now.getHours();\r\n    const ampm = hours >= 12 ? \"오후\" : \"오전\";\r\n    hours = hours % 12 || 12;\r\n    const minutes = now.getMinutes();\r\n    return `${ampm} ${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={`komoran-container ${isKomoranOpen ? \"open\" : \"closed\"}`}>\r\n        <div className=\"komoran-header\">\r\n          <div className=\"chat-header-logo\">\r\n            <img src=\"/image/logo.png\" alt=\"logo\" id=\"logo\" />\r\n          </div>\r\n          <div className=\"header-title\">Frame In</div>\r\n        </div>\r\n\r\n        <div className=\"komoran-body\" ref={bodyRef}>\r\n          <div id=\"default\">\r\n            <div className=\"default-img\">\r\n              <img src=\"/image/logo.png\" alt=\"logo\" id=\"logo\" />\r\n            </div>\r\n            <p>\r\n              <b>Frame In에 문의하기</b>\r\n            </p>\r\n          </div>\r\n          {messages.map((msg, index) => {\r\n            let isLatestMap = false;\r\n            if (msg.content === \"map\") {\r\n              const lastMapIndex = messages\r\n                .map((m) => m.content)\r\n                .lastIndexOf(\"map\");\r\n              isLatestMap = index === lastMapIndex;\r\n            }\r\n\r\n            const isFirstMessage = index === 0 && msg.content === \"안녕\";\r\n\r\n            const showTime = index === 0 || (index > 0 && getTime(msg.time) !== getTime(messages[index - 1].time));\r\n\r\n            // isLastBotMessage 설정\r\n            const isLastBotMessage = msg.sender === \"bot\" && (index === messages.length - 1 || messages[index + 1]?.sender === \"user\");\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                {showTime && (\r\n                  <div className=\"time-display\">\r\n                    <p>{getTime(msg.time)}</p>\r\n                  </div>\r\n                )}\r\n                <Message\r\n                  sender={msg.sender}\r\n                  content={msg.content}\r\n                  isLastBotMessage={isLastBotMessage}\r\n                  isLatestMap={isLatestMap}\r\n                  isFirstMessage={isFirstMessage}\r\n                  mapRef={mapRef}\r\n                  isKomoranOpen={isKomoranOpen}\r\n                  cinemas={cinemaList}\r\n                  lastLocation={lastLocation}\r\n                  markers={markers}\r\n                  onMapRendered={scrollToBottom}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"message-input\">\r\n          <input\r\n            type=\"text\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                handleSendMessage(message);\r\n              }\r\n            }}\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleButtonClick}>전송</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-float-button\" onClick={toggleKomoran}>\r\n        채팅\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Komoran;","import React from 'react'\r\nimport Komoran from '../../components/ws/Komoran'\r\n\r\nconst KomoranPage = () => {\r\n  return (\r\n    <Komoran/>\r\n  )\r\n}\r\n\r\nexport default KomoranPage"],"names":["MapPlaceholder","React","_ref","mapRef","isKomoranOpen","cinemas","lastLocation","markers","onMapRendered","useEffect","_window$kakao","current","style","width","height","display","window","kakao","maps","options","center","LatLng","level","map","Map","length","lat","lon","setCenter","forEach","cinema","position","marker","Marker","setMap","infowindow","InfoWindow","content","cinemaName","address","event","addListener","open","markerInfo","_jsx","id","ref","Message","_ref2","sender","isLastBotMessage","isLatestMap","isFirstMessage","showTime","_jsxs","className","children","src","alt","dangerouslySetInnerHTML","__html","Komoran","message","setMessage","useState","movieDetails","setMovieDetails","cinemaList","setCinemaList","setLastLocation","setMarkers","mapLoaded","setMapLoaded","setIsKomoranOpen","messages","setMessages","lastBotMessageIndex","setLastBotMessageIndex","bodyRef","useRef","inputRef","focus","loadKakaoMapScript","useCallback","_window$kakao2","script","document","createElement","async","onload","load","console","log","onerror","error","head","appendChild","scrollToBottom","scrollTop","scrollHeight","handleSendMessage","poster_path","movieNm","openDt","audiAcc","overview","showMessage","Number","toLocaleString","setTimeout","msgContent","prev","newMessages","time","Date","sendMessageToBackend","response","fetch","method","headers","body","URLSearchParams","msg","responseData","json","answer","Array","isArray","msgObj","movie","trimmedMsg","trim","innerHTML","getTime","date","now","hours","getHours","ampm","minutes","getMinutes","_Fragment","index","_messages","m","lastIndexOf","type","value","onChange","e","target","onKeyDown","key","onClick","handleButtonClick","toggleKomoran","KomoranPage"],"sourceRoot":""}