{"version":3,"file":"static/js/726.6ebf0e04.chunk.js","mappings":"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","sources":["components/screening/Screening.jsx","pages/screening/ScreeningPage.jsx","hooks/useCountup.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"../../css/Screening.css\";\r\nimport { useCountUp } from \"../../hooks/useCountup\";\r\n\r\nconst Screening = () => {\r\n  const { movieId } = useParams();\r\n  const [screenings, setScreenings] = useState([]);\r\n  const [filteredScreenings, setFilteredScreenings] = useState([]);\r\n  const [dates, setDates] = useState([]);\r\n  const [allDates, setAllDates] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(\"\");\r\n  const [selectedScreening, setSelectedScreening] = useState(null);\r\n  const [cinemas, setCinemas] = useState([]);\r\n  const [selectedCinema, setSelectedCinema] = useState(\"\");\r\n  const [regions, setRegions] = useState([]);\r\n  const [selectedRegion, setSelectedRegion] = useState(\"\");\r\n  const [showCinemas, setShowCinemas] = useState(false);\r\n  const [showDates, setShowDates] = useState(false);\r\n  const [showTimes, setShowTimes] = useState(false);\r\n  const [dataFetched, setDataFetched] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const regionOrder = [\r\n    \"서울\",\r\n    \"경기\",\r\n    \"인천\",\r\n    \"강원\",\r\n    \"대전/충청/세종\",\r\n    \"대구/경상\",\r\n    \"광주/전라\",\r\n    \"부산\",\r\n    \"제주\",\r\n  ];\r\n\r\n  const getFormattedDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    const dayOfWeek = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"][date.getDay()];\r\n    return `${month}/${day} (${dayOfWeek})`;\r\n  };\r\n\r\n  // 이전 선택값을 저장하는 ref\r\n  const prevSelectedRegionRef = useRef(selectedRegion);\r\n  const prevSelectedCinemaRef = useRef(selectedCinema);\r\n\r\n  useEffect(() => {\r\n    const fetchDataAndFilter = async () => {\r\n      // 데이터는 한 번만 패칭\r\n      if (!dataFetched) {\r\n        try {\r\n          const response = await axios.get(\r\n            `http://43.201.20.172:8090/api/screening/${movieId}`\r\n          );\r\n          const screeningData = Array.isArray(response.data)\r\n            ? response.data\r\n            : [];\r\n\r\n          const today = new Date().toISOString().split(\"T\")[0];\r\n          const upcomingDates = [\r\n            ...new Set(screeningData.map((item) => item.screeningDate)),\r\n          ].filter((date) => date >= today);\r\n\r\n          setAllDates(upcomingDates);\r\n          setScreenings(screeningData);\r\n\r\n          // 지역(영화) 목록 정렬\r\n          const regionList = [\r\n            ...new Set(\r\n              screeningData.map(\r\n                (item) => item.theaterEntity.cinemaEntity.region\r\n              )\r\n            ),\r\n          ];\r\n          const sortedRegions = regionOrder.filter((region) =>\r\n            regionList.includes(region)\r\n          );\r\n\r\n          setRegions(sortedRegions);\r\n          if (sortedRegions.length > 0 && !selectedRegion) {\r\n            setSelectedRegion(sortedRegions[0]);\r\n            setShowCinemas(true);\r\n          }\r\n\r\n          setDataFetched(true);\r\n        } catch (error) {\r\n          console.error(\"Error fetching data:\", error);\r\n        }\r\n      }\r\n\r\n      // 필터링 로직\r\n      if (selectedRegion && screenings.length > 0) {\r\n        // 지역이 바뀌었을 때만 초기화\r\n        if (prevSelectedRegionRef.current !== selectedRegion) {\r\n          setSelectedCinema(\"\");\r\n          setSelectedDate(\"\");\r\n          setFilteredScreenings([]);\r\n          prevSelectedRegionRef.current = selectedRegion;\r\n        }\r\n\r\n        const filteredCinemas = [\r\n          ...new Set(\r\n            screenings\r\n              .filter(\r\n                (item) =>\r\n                  item.theaterEntity.cinemaEntity.region === selectedRegion\r\n              )\r\n              .map((item) => item.theaterEntity.cinemaEntity.cinemaName)\r\n          ),\r\n        ];\r\n        setCinemas(filteredCinemas);\r\n        setShowCinemas(true);\r\n        setShowDates(false);\r\n        setShowTimes(false);\r\n      }\r\n\r\n      if (selectedCinema && screenings.length > 0) {\r\n        // 영화관이 바뀌었을 때만 초기화\r\n        if (prevSelectedCinemaRef.current !== selectedCinema) {\r\n          setSelectedDate(\"\");\r\n          setFilteredScreenings([]);\r\n          prevSelectedCinemaRef.current = selectedCinema;\r\n        }\r\n\r\n        const cinemaDates = [\r\n          ...new Set(\r\n            screenings\r\n              .filter(\r\n                (item) =>\r\n                  item.theaterEntity.cinemaEntity.cinemaName === selectedCinema\r\n              )\r\n              .map((item) => item.screeningDate)\r\n          ),\r\n        ].filter((date) => allDates.includes(date));\r\n\r\n        setDates(cinemaDates);\r\n        setShowDates(true);\r\n        setShowTimes(false);\r\n      }\r\n\r\n      if (selectedDate && selectedCinema && screenings.length > 0) {\r\n        const now = new Date();\r\n        const filtered = screenings\r\n          .filter((item) => item.screeningDate === selectedDate)\r\n          .filter(\r\n            (item) =>\r\n              item.theaterEntity.cinemaEntity.cinemaName === selectedCinema\r\n          )\r\n          .filter((item) => {\r\n            const screeningTime = new Date(\r\n              `${item.screeningDate}T${item.screeningTime}`\r\n            );\r\n            return screeningTime >= now;\r\n          });\r\n\r\n        setFilteredScreenings(filtered);\r\n        setShowTimes(true);\r\n      }\r\n    };\r\n\r\n    // 의존성: movieId, selectedRegion, selectedCinema, selectedDate, dataFetched\r\n    fetchDataAndFilter();\r\n  }, [movieId, selectedRegion, selectedCinema, selectedDate, dataFetched]);\r\n\r\n  const handleRegionClick = (region) => {\r\n    setSelectedRegion(region);\r\n  };\r\n  const handleCinemaClick = (cinema) => {\r\n    setSelectedCinema(cinema);\r\n  };\r\n  const handleDateClick = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n  const handleSelectScreening = (screeningId) => {\r\n    setSelectedScreening(screeningId);\r\n    navigate(`/seatSelection/${screeningId}`, {\r\n      state: { movieEntity: screenings[0]?.movieEntity },\r\n    });\r\n  };\r\n\r\n  const audiAcc = useCountUp(\r\n    Number(screenings[0]?.movieEntity?.audiAcc) || 0,\r\n    1500\r\n  );\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div className=\"main\">\r\n        <div className=\"main-con\">\r\n          \r\n          <div className=\"leftBar\">\r\n            <div className=\"leftBar-con\">\r\n              {screenings.length > 0 && screenings[0]?.movieEntity ? (\r\n                <>\r\n                  <img\r\n                    src={screenings[0].movieEntity.poster_path}\r\n                    alt={screenings[0].movieEntity.movieNm}\r\n                    className=\"poster\"\r\n                  />\r\n                  <div className=\"movie-info\">\r\n                    <div>\r\n                      <h3>제목</h3>\r\n                      <span>{screenings[0].movieEntity.movieNm}</span>\r\n                    </div>\r\n                    <div>\r\n                      <h3>개봉일</h3>\r\n                      <span>{screenings[0].movieEntity.openDt}</span>\r\n                    </div>\r\n                    <div>\r\n                      <h3>순위</h3>\r\n                      <span>{screenings[0].movieEntity.rank}등</span>\r\n                    </div>\r\n                    <div>\r\n                      <h3>누적 관객 수</h3>\r\n                      <span>{audiAcc.toLocaleString(\"ko-KR\")}명</span>\r\n                    </div>\r\n                    <div>\r\n                      <h3>장르</h3>\r\n                      <span>{screenings[0].movieEntity.genres}</span>\r\n                    </div>\r\n                    <div>\r\n                      <h3>감독</h3>\r\n                      <span>{screenings[0].movieEntity.director}</span>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <p>영화 정보가 없습니다.</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n         \r\n\r\n          {/* 4개 컬럼 레이아웃 */}\r\n          <div className=\"screening-content\">\r\n            <div className=\"date_type\">\r\n              {/* 지역(Region) */}\r\n              <div className=\"region_select\">\r\n                <h2>지역</h2>\r\n                {regions.map((region) => (\r\n                  <button\r\n                    key={region}\r\n                    className={selectedRegion === region ? \"selected\" : \"\"}\r\n                    onClick={() => handleRegionClick(region)}\r\n                  >\r\n                    {region}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n\r\n              {/* (Cinema) */}\r\n              <div className=\"cinema_select\">\r\n                <h2>영화관</h2>\r\n                {showCinemas ? (\r\n                  cinemas.map((cinema) => (\r\n                    <button\r\n                      key={cinema}\r\n                      className={selectedCinema === cinema ? \"selected\" : \"\"}\r\n                      onClick={() => handleCinemaClick(cinema)}\r\n                    >\r\n                      {cinema}\r\n                    </button>\r\n                  ))\r\n                ) : (\r\n                  <p>영화관을 선택하세요.</p>\r\n                )}\r\n              </div>\r\n\r\n              {/* 날짜(Date) */}\r\n              <div className=\"date_select\">\r\n                <h2>날짜</h2>\r\n                {showDates ? (\r\n                  dates.length > 0 ? (\r\n                    dates.map((date) => (\r\n                      <button\r\n                        key={date}\r\n                        className={selectedDate === date ? \"selected\" : \"\"}\r\n                        onClick={() => handleDateClick(date)}\r\n                      >\r\n                        {getFormattedDate(date)}\r\n                      </button>\r\n                    ))\r\n                  ) : (\r\n                    <p>상영날짜가 없습니다.</p>\r\n                  )\r\n                ) : (\r\n                  <p>날짜를 선택하세요.</p>\r\n                )}\r\n              </div>\r\n\r\n              {/* 시간(Time) */}\r\n              <div className=\"time_select\">\r\n                <h2>시간</h2>\r\n                {showTimes ? (\r\n                  filteredScreenings.length === 0 ? (\r\n                    <p>상영 정보가 없습니다.</p>\r\n                  ) : (\r\n                    <ul>\r\n                      {filteredScreenings.map((screening) => (\r\n                        <li key={screening.id}>\r\n                          <button\r\n                            className={\r\n                              selectedScreening === screening.id\r\n                                ? \"selected\"\r\n                                : \"\"\r\n                            }\r\n                            onClick={() => handleSelectScreening(screening.id)}\r\n                          >\r\n                            <span>{screening.theaterEntity.name}</span>\r\n                            <span>{getFormattedDate(screening.screeningDate)}</span>\r\n                            <span>\r\n                              {screening.screeningTime} ~ {screening.screeningEndTime}\r\n                            </span>\r\n                          </button>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  )\r\n                ) : (\r\n                  <p>시간을 선택하세요.</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Screening;\r\n","import React from 'react'\r\nimport Screening from '../../components/screening/Screening'\r\n\r\nconst ScreeningPage = () => {\r\n    return (\r\n        <div>\r\n            <Screening />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScreeningPage","import { useState, useEffect, useRef } from \"react\";\r\n\r\n// easeOutExpo 함수 정의\r\nexport const easeOutExpo = (t) => {\r\n  return t === 1 ? 1 : 1 - Math.pow(2, -10 * t);\r\n};\r\n\r\n// 점차 느려지는 count-up 함수\r\nexport const useCountUp = (num, duration) => {\r\n  const [count, setCount] = useState(0);\r\n  const frameRate = 1000 / 60;\r\n  const totalFrame = Math.round(duration / frameRate);\r\n  const currentNumber = useRef(0); // currentNumber를 useRef로 설정\r\n\r\n  useEffect(() => {\r\n    const counter = setInterval(() => {\r\n      const progressRate = easeOutExpo(++currentNumber.current / totalFrame);\r\n      setCount(Math.round(num * progressRate));\r\n\r\n      // 진행 완료시 interval 해제\r\n      if (progressRate === 1) {\r\n        clearInterval(counter);\r\n      }\r\n    }, frameRate);\r\n\r\n    return () => clearInterval(counter); // 클린업 함수 추가\r\n  }, [num, duration]);\r\n\r\n  return count;\r\n};\r\n"],"names":["Screening","_screenings$2","_screenings$2$movieEn","_screenings$3","movieId","useParams","screenings","setScreenings","useState","filteredScreenings","setFilteredScreenings","dates","setDates","allDates","setAllDates","selectedDate","setSelectedDate","selectedScreening","setSelectedScreening","cinemas","setCinemas","selectedCinema","setSelectedCinema","regions","setRegions","selectedRegion","setSelectedRegion","showCinemas","setShowCinemas","showDates","setShowDates","showTimes","setShowTimes","dataFetched","setDataFetched","navigate","useNavigate","regionOrder","getFormattedDate","dateString","date","Date","getMonth","getDate","getDay","prevSelectedRegionRef","useRef","prevSelectedCinemaRef","useEffect","async","response","axios","get","screeningData","Array","isArray","data","today","toISOString","split","upcomingDates","Set","map","item","screeningDate","filter","regionList","theaterEntity","cinemaEntity","region","sortedRegions","includes","length","error","console","current","filteredCinemas","cinemaName","cinemaDates","now","filtered","screeningTime","fetchDataAndFilter","audiAcc","useCountUp","Number","movieEntity","_jsx","className","children","_jsxs","_Fragment","src","poster_path","alt","movieNm","openDt","rank","toLocaleString","genres","director","onClick","handleRegionClick","cinema","handleCinemaClick","handleDateClick","screening","id","screeningId","_screenings$","state","handleSelectScreening","name","screeningEndTime","ScreeningPage","num","duration","count","setCount","frameRate","totalFrame","Math","round","currentNumber","counter","setInterval","progressRate","t","pow","clearInterval"],"sourceRoot":""}