{"version":3,"file":"static/js/645.6086a639.chunk.js","mappings":"+KAQe,SAASA,EAAMC,GAK1B,IAADC,EAAAC,EAAA,IAL4B,WAC7BC,EAAU,cACVC,EAAa,mBACbC,EAAkB,sBAClBC,GACDN,EACC,MAAMO,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,QAAO,MACvBC,GAAgBD,EAAAA,EAAAA,QAAO,MACvBE,GAAaC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,aAC1CC,IAAeJ,EAAWK,OAEzBC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAASK,OAAOC,YAAc,MAIxDC,EAAeA,KACnBtB,GAASuB,EAAAA,EAAAA,OACTC,MAAM,0DACNtB,EAAS,IAAK,CAAEuB,SAAS,IACzBL,OAAOM,SAASC,QAAQ,EAGpBC,EAAoBA,IAAM7B,GAAuBD,GAGjD+B,EAAWA,IAAMZ,GAAa,IAEpCa,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAsBC,IAGxB5B,EAAc6B,UACbC,SAASC,cAAc,UAAUC,SAASJ,EAAMK,SAEjDpB,GAAa,EACf,EAGIqB,EAAiBA,KACrB,MAAMC,EAAOjC,EAAc2B,QAC3B,IAAKM,EAAM,OACX,MAAMC,EAAcD,EAAKE,cAAcC,YACjCC,EAAYJ,EAAKG,YACvB,IAAIE,EAAW,GACXJ,EAAcG,IAChBC,EAAWC,KAAKC,MAAON,EAAcG,EAAa,KAEhDC,EAAW,KAAIA,EAAW,IAC9BL,EAAKQ,MAAMH,SAAW,GAAGA,KAAY,EAGjCI,EAAeA,IAAM7B,EAAYC,OAAOC,YAAc,MAO5D,OALAiB,IACAlB,OAAO6B,iBAAiB,SAAUX,GAClClB,OAAO6B,iBAAiB,SAAUD,GAClCd,SAASe,iBAAiB,YAAalB,GAEhC,KACLX,OAAO8B,oBAAoB,SAAUZ,GACrClB,OAAO8B,oBAAoB,SAAUF,GACrCd,SAASgB,oBAAoB,YAAanB,EAAmB,CAC9D,GACA,CAACxB,EAAW4C,SAAUpD,IAGzB,MAAMqD,EAAgBC,IACpB,GAAe,UAAXA,EAAEC,MAAgC,YAAXD,EAAEC,MAAgC,UAAVD,EAAEE,IAAkB,CACrE,GAAI1C,EAAY2C,OAAQ,CACtB,MAAMC,GAxDWC,EAwDe7C,EAAY2C,OAxDlB,qBAAWG,KAAKD,IAyDpCE,EAAaH,EACfI,EAAAA,GAAmBhD,EAAY2C,QAC/B3C,EAAY2C,OACVM,EAAaL,EAAY,UAAY,SAE3CvD,EACE,uBAAuB6D,mBACrBH,iBACcE,IAEpB,CACAjC,GACF,CArEqB6B,KAqErB,EAKIM,EAAmBA,KACvBC,EAAAA,EAAAA,MAAA,OACEC,UAAU,cACVC,IAAK/D,EACLgE,QAASxC,EAAkByC,SAAA,EAE3BC,EAAAA,EAAAA,KAAA,OACEJ,UAAU,kBACVK,IAAI,oBACJC,IAAI,gBAEL7D,IAAcsD,EAAAA,EAAAA,MAAA,QAAME,IAAK7D,EAAc+D,SAAA,CAAE9D,EAAW4C,SAAS,aAC9DmB,EAAAA,EAAAA,KAAA,OAAKJ,UAAW,oBAAmBpE,EAAqB,SAAW,IAAKuE,SACrE1D,GACCsD,EAAAA,EAAAA,MAAAQ,EAAAA,SAAA,CAAAJ,SAAA,EACEC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,iBAAiBP,QAASvC,EAASwC,SAAC,yBAC7CC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,mBAAmBP,QAASvC,EAASwC,SAAC,8BAC/CC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,wBAAwBP,QAASvC,EAASwC,SAAC,8BACpDC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,YAAYP,QAASvC,EAASwC,SAAC,oCACxCC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,qBAAqBP,QAASvC,EAASwC,SAAC,8BACjDC,EAAAA,EAAAA,KAAA,QAAMF,QAAS9C,EAAa+C,SAAC,iCAG/BC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,gBAAgBP,QAASvC,EAASwC,SAAC,4BAMpD,OACEJ,EAAAA,EAAAA,MAAA,UAAAI,SAAA,EACEJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKG,SAAA,EAClBC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,IAAIP,QAASvC,EAASwC,UAC7BC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,OAAMG,UACnBJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUG,SAAA,EACvBC,EAAAA,EAAAA,KAAA,OAAKC,IAAI,kBAAkBC,IAAI,OAAOI,GAAG,UACzCN,EAAAA,EAAAA,KAAA,QAAAD,SAAM,qBAIVnD,IACA+C,EAAAA,EAAAA,MAAA,OAAKC,UAAW,aAAYlD,EAAY,OAAS,IAAKqD,SAAA,EACpDC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,IAAIT,UAAU,WAAWE,QAASvC,EAASwC,SAAC,YAGrDC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,SAAST,UAAU,WAAWE,QAASvC,EAASwC,SAAC,wBAG1DC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,gBAAgBT,UAAU,WAAWE,QAASvC,EAASwC,SAAC,+BAGjEC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,aAAaT,UAAU,WAAWE,QAASvC,EAASwC,SAAC,uBAG7D1D,IAAkC,QAAxBjB,EAAIa,EAAWsE,iBAAS,IAAAnF,OAAA,EAApBA,EAAsBoF,SAAS,YAC5CR,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,SAAST,UAAU,WAAWE,QAASvC,EAASwC,SAAC,gBAOjEnD,IACC+C,EAAAA,EAAAA,MAAA,OAAKC,UAAW,eAAclD,EAAY,OAAS,IAAKqD,SAAA,EACtDJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBG,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,OACLyB,KAAK,SACLH,GAAG,SACHI,YAAY,4BACZC,MAAOpE,EACPqE,SAAW7B,GAAMvC,EAAeuC,EAAEhB,OAAO4C,OACzCE,UAAW/B,KAEbkB,EAAAA,EAAAA,KAAA,OACEC,IAAI,oBACJC,IAAI,SACJN,UAAU,cACVE,QAAShB,QAGba,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUG,SAAA,EACvBC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,IAAIT,UAAU,WAAWE,QAASvC,EAASwC,SAAC,YAGrDC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,SAAST,UAAU,WAAWE,QAASvC,EAASwC,SAAC,wBAG1DC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,gBAAgBT,UAAU,WAAWE,QAASvC,EAASwC,SAAC,+BAGjEC,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,aAAaT,UAAU,WAAWE,QAASvC,EAASwC,SAAC,uBAG7D1D,IAAkC,QAAxBhB,EAAIY,EAAWsE,iBAAS,IAAAlF,OAAA,EAApBA,EAAsBmF,SAAS,YAC5CR,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAG,SAAST,UAAU,WAAWE,QAASvC,EAASwC,SAAC,aAK7DL,QAGLC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKG,SAAA,EAChBnD,IACA+C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBG,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,SACEhB,KAAK,OACLyB,KAAK,SACLH,GAAG,SACHI,YAAY,4BACZC,MAAOpE,EACPqE,SAAW7B,GAAMvC,EAAeuC,EAAEhB,OAAO4C,OACzCE,UAAW/B,KAEbkB,EAAAA,EAAAA,KAAA,OACEC,IAAI,oBACJC,IAAI,SACJN,UAAU,cACVE,QAAShB,QAIblC,GAAY8C,KACdM,EAAAA,EAAAA,KAAA,OACEF,QAASA,IAAMvE,GAAeuF,IAAUA,IACxClB,UAAU,gBACVmB,KAAK,SACLC,SAAU,EACVC,WAAalC,GACD,UAAVA,EAAEE,KAAmB1D,GAAeuF,IAAUA,IAC/Cf,SAEAzE,GACC0E,EAAAA,EAAAA,KAAA,OAAKC,IAAI,mBAAmBC,IAAI,YAAYI,GAAG,eAE/CN,EAAAA,EAAAA,KAAA,OAAKC,IAAI,kBAAkBC,IAAI,WAAWI,GAAG,gBAGjDN,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,iBAAiBE,QA7IpBoB,IAAMvE,GAAcD,GA6ImBqD,UACjDC,EAAAA,EAAAA,KAAA,OACEC,IAAKvD,EAAY,mBAAqB,kBACtCwD,IAAKxD,EAAY,QAAU,gBAMvC,C,gGClPA,MAoUA,EApUYyE,KACV,MAAOC,EAAKC,IAAU5E,EAAAA,EAAAA,UAAS,OACxB6E,EAASC,IAAc9E,EAAAA,EAAAA,UAAS,KAChC+E,EAASC,IAAchF,EAAAA,EAAAA,UAAS,KAChCiF,EAAUC,IAAelF,EAAAA,EAAAA,UAAS,KAClCmF,EAAcC,IAAmBpF,EAAAA,EAAAA,WAAS,IAC1CqF,EAAYC,IAAiBtF,EAAAA,EAAAA,UAAS,KACtCuF,EAASC,IAAcxF,EAAAA,EAAAA,WAAS,IAChCyF,EAAcC,IAAmB1F,EAAAA,EAAAA,UAAS,MAG3C2F,EAAoBA,CAACC,EAAMC,EAAMC,EAAMC,KAC3C,MAAMC,EAAaC,GAAWA,GAAUnE,KAAKoE,GAAK,KAE5CC,EAAOH,EAAUF,EAAOF,GACxBQ,EAAOJ,EAAUD,EAAOF,GACxBQ,EACJvE,KAAKwE,IAAIH,EAAO,GAAKrE,KAAKwE,IAAIH,EAAO,GACrCrE,KAAKyE,IAAIP,EAAUJ,IACjB9D,KAAKyE,IAAIP,EAAUF,IACnBhE,KAAKwE,IAAIF,EAAO,GAChBtE,KAAKwE,IAAIF,EAAO,GAEpB,OAVU,MASA,EAAItE,KAAK0E,MAAM1E,KAAK2E,KAAKJ,GAAIvE,KAAK2E,KAAK,EAAIJ,IACzC,GAIdtF,EAAAA,EAAAA,YAAU,KACR2F,IACGC,MAAMC,IACL,MAAM,SAAEC,EAAQ,UAAEC,GAAcF,EAASG,OACzCrB,EAAgB,CAAEmB,WAAUC,aAAY,IAEzCE,OAAOC,IACNC,QAAQD,MAAM,iGAAuBA,EAAM,GAC3C,GACH,KAGHlG,EAAAA,EAAAA,YAAU,KACR,GAAIoE,EAAc,OAClB,MAAMgC,EAAShG,SAASiG,cAAc,UACtCD,EAAO3D,IAAM,4GACb2D,EAAOE,OAAQ,EACfF,EAAOG,OAAS,KACVjH,OAAOkH,MACTA,MAAMC,KAAKC,MAAK,KACd,MAAMC,EAAYvG,SAASwG,eAAe,OACpCC,EAAU,CACdC,OAAQ,IAAIN,MAAMC,KAAKM,OAAO,KAAM,OACpCC,MAAO,IAEHC,EAAS,IAAIT,MAAMC,KAAK9C,IAAIgD,EAAWE,GAC7ChD,EAAOoD,EAAO,IAGhBd,QAAQD,MAAM,wCAChB,EAEF9F,SAAS8G,KAAKC,YAAYf,GAC1B/B,GAAgB,EAAK,GACpB,CAACD,KAGJpE,EAAAA,EAAAA,YAAU,KACH4D,GACLwD,GAAa,GACZ,CAACxD,KAGJ5D,EAAAA,EAAAA,YAAU,KACJ4D,GAAOE,EAAQuD,OAAS,GAAK3C,IAC/B4C,IACAC,EAAYzD,GACd,GACC,CAACY,KAGJ1E,EAAAA,EAAAA,YAAU,KACR,IAAK4D,EAAK,OACV,MAAM4D,EAAeA,KACnB,MAAMR,EAAQpD,EAAI6D,WAClBvD,EAASwD,SAASC,IAChBA,EAAQ9D,OAAOmD,GAAS,GAAKpD,EAAM,KAAK,GACxC,EAGJ,OADA4C,MAAMC,KAAKvG,MAAM0H,YAAYhE,EAAK,eAAgB4D,GAC3C,KACLhB,MAAMC,KAAKvG,MAAM2H,eAAejE,EAAK,eAAgB4D,EAAa,CACnE,GACA,CAAC5D,EAAKM,IAGT,MAAMkD,EAAcd,UAClB7B,GAAW,GACX,IACE,MACMqD,SADYC,EAAAA,EAAMC,IAAI,0CACLC,KACvBlE,EAAW+D,GACXvD,EAAcuD,GACdR,IACAC,EAAYO,GACZlE,EAAIsE,UAAU,IAAI1B,MAAMC,KAAKM,OAAO,KAAM,QAC1CnD,EAAIuE,SAAS,GACf,CAAE,MAAOjC,GACPC,QAAQD,MAAM,0BAA2BA,EAC3C,CAAC,QACCzB,GAAW,EACb,GA0CIkB,EAAqBA,IAClB,IAAIyC,SAAQ,CAACC,EAASC,KACtBC,UAAUC,aACbF,EAAO,IAAIG,MAAM,kDAEnBF,UAAUC,YAAY7C,oBACnBE,GAAawC,EAAQxC,KACrBK,IACKA,EAAMwC,OAASxC,EAAMyC,kBACvBL,EAAO,IAAIG,MAAM,uCAEjBH,EAAO,IAAIG,MAAM,qBACnB,GAEF,CACEG,oBAAoB,EACpBC,QAAS,IACTC,WAAY,GAEf,IAiCCvB,EAAewB,IACnB,IAAKnF,EAAK,OACV,MAAMoF,EAAa,GACbC,EAAc,GAEpBF,EAAWrB,SAAQ/J,IAAwC,IAAvC,IAAEuL,EAAG,IAAEC,EAAG,WAAEC,EAAU,QAAEC,GAAS1L,EACnD,MAAM2L,EAAiB,IAAI9C,MAAMC,KAAKM,OAAOmC,EAAKC,GAC5CI,EAAS,IAAI/C,MAAMC,KAAK+C,OAAO,CACnC5F,MACAiC,SAAUyD,EACVG,MAAOL,IAETJ,EAAWU,KAAKH,GAGhB,IAAII,EAAiB,uGACTP,qCACRC,SACA3E,IACFiF,GAAkB,GAAG/E,EACnBF,EAAaoB,SACbpB,EAAaqB,UACbmD,EACAC,GACAS,QAAQ,SAEZD,GAAkB,SAElB,MAAME,EAAgB,IAAIrD,MAAMC,KAAKqD,cAAc,CACjDjE,SAAUyD,EACVS,QAASJ,EACTK,QAAS,MAGPpG,EAAI6D,YAAc,IACpBoC,EAAchG,OAAOD,GAEvBqF,EAAYS,KAAKG,EAAc,IAGjC5F,EAAW+E,GACX7E,EAAY8E,EAAY,EAIpB3B,EAAeA,KACnBtD,EAAQ0D,SAAS6B,GAAWA,EAAO1F,OAAO,QAC1CK,EAASwD,SAASC,GAAYA,EAAQ9D,OAAO,QAC7CI,EAAW,IACXE,EAAY,GAAG,EAeX8F,EAAgBvF,EAClB,IAAIJ,GAAY4F,MACd,CAAC5E,EAAG6E,IACFvF,EAAkBF,EAAaoB,SAAUpB,EAAaqB,UAAWT,EAAE4D,IAAK5D,EAAE6D,KAC1EvE,EAAkBF,EAAaoB,SAAUpB,EAAaqB,UAAWoE,EAAEjB,IAAKiB,EAAEhB,OAE9E7E,EAEJ,OACEnC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeG,SAAA,EAC5BJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaG,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,UAAQF,QArKcgE,UACxB,GAAK1C,EAAL,CACAa,GAAW,GACX,IACE,MAAMoB,QAAiBF,KACjB,SAAEG,EAAQ,UAAEC,GAAcF,EAASG,OACzCrB,EAAgB,CAAEmB,WAAUC,cAK5B,IAAIqE,SAHcrC,EAAAA,EAAMC,IACtB,oDAAoDlC,SAAgBC,MAE3CkC,KAE3BmC,EAAiBF,MAAK,CAAC5E,EAAG6E,IACxBvF,EAAkBkB,EAAUC,EAAWT,EAAE4D,IAAK5D,EAAE6D,KAChDvE,EAAkBkB,EAAUC,EAAWoE,EAAEjB,IAAKiB,EAAEhB,OAElDpF,EAAWqG,GACX7F,EAAc6F,GACd9C,IACAC,EAAY6C,GACZxG,EAAIsE,UAAU,IAAI1B,MAAMC,KAAKM,OAAOjB,EAAUC,IAC9CnC,EAAIuE,SAAS,EACf,CAAE,MAAOjC,GACPC,QAAQD,MAAM,iCAAkCA,GAC1B,kDAAlBA,EAAMmE,QACR3K,MAAM,iDACqB,uCAAlBwG,EAAMmE,QACf3K,MAAM,uCAENA,MAAM,iCAEV,CAAC,QACC+E,GAAW,EACb,CAjCgB,CAiChB,EAmIsC6F,SAAU9F,EAAQjC,SAAC,sEAGvDC,EAAAA,EAAAA,KAAA,UAAQF,QA1GWiI,KAChB3G,IACLa,GAAW,GACXkB,IACGC,MAAMC,IACL,MAAM,SAAEC,EAAQ,UAAEC,GAAcF,EAASG,OACzCrB,EAAgB,CAAEmB,WAAUC,cAC5B,MAAMyE,EAAS,IAAIhE,MAAMC,KAAKM,OAAOjB,EAAUC,GAC/CnC,EAAIsE,UAAUsC,GACd5G,EAAIuE,SAAS,GACbhC,QAAQsE,IAAI,qCAAY3E,mBAAgBC,IAAY,IAErDE,OAAOC,IACNC,QAAQD,MAAM,wGAAyBA,GACjB,kDAAlBA,EAAMmE,QACR3K,MAAM,iDACqB,uCAAlBwG,EAAMmE,QACf3K,MAAM,uCAENA,MAAM,8BACR,IAEDgL,SAAQ,KACPjG,GAAW,EAAM,IACjB,EAkF+B6F,SAAU9F,EAAQjC,SAAC,qDAKnDiC,IAAWhC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,gBAEjBC,EAAAA,EAAAA,KAAA,OAAKM,GAAG,MAAM7B,MAAO,CAAE0J,MAAO,OAAQC,OAAQ,QAASC,UAAW,UAGjEZ,EAAc5C,OAAS,IACtBlF,EAAAA,EAAAA,MAAA,OACEC,UAAU,WAAUG,SAAA,EAEpBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qEAEJC,EAAAA,EAAAA,KAAA,MAAAD,SACG0H,EAAcrG,KAAI,CAACkH,EAAQC,KAC1B5I,EAAAA,EAAAA,MAAA,MAEEG,QAASA,IA7CG0I,EAAC9B,EAAKC,KAC9B,GAAIvF,EAAK,CACP,MAAMqH,EAAa,IAAIzE,MAAMC,KAAKM,OAAOmE,WAAWhC,GAAMgC,WAAW/B,IACrEvF,EAAIuH,MAAMF,GACVG,YAAW,KACTxH,EAAIuE,SAAS,EAAE,GACd,IACL,GAsC2B6C,CAAkBF,EAAO5B,IAAK4B,EAAO3B,KAAK5G,SAAA,EAEzDJ,EAAAA,EAAAA,MAAA,UAAAI,SAAA,CAASuI,EAAO1B,WAAW,gBAC3BjH,EAAAA,EAAAA,MAAA,QAAAI,SAAA,CAAM,gBAAIuI,EAAOzB,WAChB3E,IACCvC,EAAAA,EAAAA,MAAA,OAAKlB,MAAO,CAAEH,SAAU,OAAQuK,MAAO,QAAS9I,SAAA,CAC7CqC,EACCF,EAAaoB,SACbpB,EAAaqB,UACb+E,EAAO5B,IACP4B,EAAO3B,KACPS,QAAQ,GAAI,IAAI,UAZjBmB,YAqBX,ECvTV,EARgBO,KAEZ9I,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACmB,EAAG,K,uDCNV,MAWA,EAXe4H,KAEXpJ,EAAAA,EAAAA,MAAA,UAAQC,UAAU,SAAQG,SAAA,EACxBC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qCACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gFACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,mDACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sC","sources":["components/Header.jsx","components/map/Map.jsx","pages/map/MapPage.jsx","components/Footer.jsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\nimport \"../css/Header.css\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout } from \"../slices/loginSlice\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Hangul from \"es-hangul\";\r\n\r\nexport default function Header({\r\n  isDarkMode,\r\n  setIsDarkMode,\r\n  isMemberInfoActive,\r\n  setIsMemberInfoActive,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const memberInfoRef = useRef(null);\r\n  const memberNameRef = useRef(null);\r\n  const loginState = useSelector((state) => state.loginSlice);\r\n  const isLoggedIn = !!loginState.email;\r\n\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [isNavOpen, setIsNavOpen] = useState(false);\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 1023);\r\n\r\n  const isChosungOnly = (text) => /^[ㄱ-ㅎ]+$/.test(text);\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logout());\r\n    alert(\"로그아웃되었습니다\");\r\n    navigate(\"/\", { replace: true });\r\n    window.location.reload();\r\n  };\r\n\r\n  const memberInfoOnClick = () => setIsMemberInfoActive(!isMemberInfoActive);\r\n\r\n  // 햄버거 메뉴 닫는 함수\r\n  const closeNav = () => setIsNavOpen(false);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      // 헤더 내 특정 요소를 제외하고 클릭 시 메뉴 닫기\r\n      if (\r\n        memberInfoRef.current &&\r\n        !document.querySelector(\"header\").contains(event.target)\r\n      ) {\r\n        setIsNavOpen(false); // 메뉴 닫기\r\n      }\r\n    };\r\n  \r\n    const adjustFontSize = () => {\r\n      const span = memberNameRef.current;\r\n      if (!span) return;\r\n      const parentWidth = span.parentElement.offsetWidth;\r\n      const spanWidth = span.offsetWidth;\r\n      let fontSize = 16;\r\n      if (parentWidth < spanWidth) {\r\n        fontSize = Math.floor((parentWidth / spanWidth) * 16);\r\n      }\r\n      if (fontSize > 16) fontSize = 16;\r\n      span.style.fontSize = `${fontSize}px`;\r\n    };\r\n  \r\n    const handleResize = () => setIsMobile(window.innerWidth <= 1023);\r\n  \r\n    adjustFontSize();\r\n    window.addEventListener(\"resize\", adjustFontSize);\r\n    window.addEventListener(\"resize\", handleResize);\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n  \r\n    return () => {\r\n      window.removeEventListener(\"resize\", adjustFontSize);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [loginState.nickname, setIsMemberInfoActive]);\r\n  \r\n\r\n  const handleSearch = (e) => {\r\n    if (e.type === \"click\" || (e.type === \"keydown\" && e.key === \"Enter\")) {\r\n      if (searchQuery.trim()) {\r\n        const isChosung = isChosungOnly(searchQuery.trim());\r\n        const queryToUse = isChosung\r\n          ? Hangul.getChoseong(searchQuery.trim())\r\n          : searchQuery.trim();\r\n        const searchType = isChosung ? \"chosung\" : \"normal\";\r\n\r\n        navigate(\r\n          `/movie/search?query=${encodeURIComponent(\r\n            queryToUse\r\n          )}&searchType=${searchType}`\r\n        );\r\n      }\r\n      closeNav(); // 메뉴 닫기\r\n    }\r\n  };\r\n\r\n  const toggleNav = () => setIsNavOpen(!isNavOpen);\r\n\r\n  const renderMemberInfo = () => (\r\n    <div\r\n      className=\"member-info\"\r\n      ref={memberInfoRef}\r\n      onClick={memberInfoOnClick}\r\n    >\r\n      <img\r\n        className=\"member-info-img\"\r\n        src=\"/image/person.svg\"\r\n        alt=\"member-info\"\r\n      />\r\n      {isLoggedIn && <span ref={memberNameRef}>{loginState.nickname}님</span>}\r\n      <div className={`member-info-con ${isMemberInfoActive ? \"active\" : \"\"}`}>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Link to=\"/member/detail\" onClick={closeNav}>내 정보</Link>\r\n            <Link to=\"/cart/myCartList\" onClick={closeNav}>장바구니</Link>\r\n            <Link to=\"/member/myPaymentList\" onClick={closeNav}>결제내역</Link>\r\n            <Link to=\"/chatroom\" onClick={closeNav}>실시간채팅</Link>\r\n            <Link to=\"/member/myChatList\" onClick={closeNav}>채팅내역</Link>\r\n            <span onClick={handleLogout}>로그아웃</span>\r\n          </>\r\n        ) : (\r\n          <Link to=\"/member/login\" onClick={closeNav}>로그인</Link>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <header>\r\n      <nav className=\"nav\">\r\n        <Link to=\"/\" onClick={closeNav}>\r\n          <div className=\"logo\">\r\n            <div className=\"logo-con\">\r\n              <img src=\"/image/logo.png\" alt=\"logo\" id=\"logo\" />\r\n              <span>Frame In</span>\r\n            </div>\r\n          </div>\r\n        </Link>\r\n        {!isMobile && (\r\n          <div className={`nav-menu ${isNavOpen ? \"open\" : \"\"}`}>\r\n            <Link to=\"/\" className=\"nav-link\" onClick={closeNav}>\r\n              홈\r\n            </Link>\r\n            <Link to=\"/board\" className=\"nav-link\" onClick={closeNav}>\r\n              게시판\r\n            </Link>\r\n            <Link to=\"/movie/search\" className=\"nav-link\" onClick={closeNav}>\r\n              영화 검색\r\n            </Link>\r\n            <Link to=\"/movie/map\" className=\"nav-link\" onClick={closeNav}>\r\n              영화관\r\n            </Link>\r\n            {isLoggedIn && loginState.roleNames?.includes(\"ADMIN\") && (\r\n              <Link to=\"/admin\" className=\"nav-link\" onClick={closeNav}>\r\n                ADMIN\r\n              </Link>\r\n            )}\r\n          </div>\r\n        )}\r\n      </nav>\r\n      {isMobile && (\r\n        <div className={`mobile-nav ${isNavOpen ? \"open\" : \"\"}`}>\r\n          <div className=\"search-container\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"search\"\r\n              id=\"search\"\r\n              placeholder=\"영화 검색\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              onKeyDown={handleSearch}\r\n            />\r\n            <img\r\n              src=\"/image/search.svg\"\r\n              alt=\"search\"\r\n              className=\"search-icon\"\r\n              onClick={handleSearch}\r\n            />\r\n          </div>\r\n          <div className=\"nav-menu\">\r\n            <Link to=\"/\" className=\"nav-link\" onClick={closeNav}>\r\n              홈\r\n            </Link>\r\n            <Link to=\"/board\" className=\"nav-link\" onClick={closeNav}>\r\n              게시판\r\n            </Link>\r\n            <Link to=\"/movie/search\" className=\"nav-link\" onClick={closeNav}>\r\n              영화 검색\r\n            </Link>\r\n            <Link to=\"/movie/map\" className=\"nav-link\" onClick={closeNav}>\r\n              영화관\r\n            </Link>\r\n            {isLoggedIn && loginState.roleNames?.includes(\"ADMIN\") && (\r\n              <Link to=\"/admin\" className=\"nav-link\" onClick={closeNav}>\r\n                ADMIN\r\n              </Link>\r\n            )}\r\n          </div>\r\n          {renderMemberInfo()}\r\n        </div>\r\n      )}\r\n      <div className=\"bar\">\r\n        {!isMobile && (\r\n          <div className=\"search-container\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"search\"\r\n              id=\"search\"\r\n              placeholder=\"영화 검색\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              onKeyDown={handleSearch}\r\n            />\r\n            <img\r\n              src=\"/image/search.svg\"\r\n              alt=\"search\"\r\n              className=\"search-icon\"\r\n              onClick={handleSearch}\r\n            />\r\n          </div>\r\n        )}\r\n        {!isMobile && renderMemberInfo()}\r\n        <div\r\n          onClick={() => setIsDarkMode((prev) => !prev)}\r\n          className=\"toggle-button\"\r\n          role=\"button\"\r\n          tabIndex={0}\r\n          onKeyPress={(e) =>\r\n            e.key === \"Enter\" && setIsDarkMode((prev) => !prev)\r\n          }\r\n        >\r\n          {isDarkMode ? (\r\n            <img src=\"/image/light.svg\" alt=\"lightMode\" id=\"lightMode\" />\r\n          ) : (\r\n            <img src=\"/image/dark.svg\" alt=\"darkMode\" id=\"darkMode\" />\r\n          )}\r\n        </div>\r\n        <div className=\"hamburger-menu\" onClick={toggleNav}>\r\n          <img\r\n            src={isNavOpen ? \"/image/close.svg\" : \"/image/list.svg\"}\r\n            alt={isNavOpen ? \"close\" : \"menu\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  isDarkMode: PropTypes.bool.isRequired,\r\n  setIsDarkMode: PropTypes.func.isRequired,\r\n  isMemberInfoActive: PropTypes.bool.isRequired,\r\n  setIsMemberInfoActive: PropTypes.func.isRequired,\r\n};\r\n","/* global kakao */\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../../css/map.css\"\r\n\r\nconst Map = () => {\r\n  const [map, setMap] = useState(null);\r\n  const [cinemas, setCinemas] = useState([]);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [overlays, setOverlays] = useState([]);\r\n  const [scriptLoaded, setScriptLoaded] = useState(false);\r\n  const [allCinemas, setAllCinemas] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [userLocation, setUserLocation] = useState(null); // 사용자 위치\r\n\r\n  // Haversine 공식을 사용하여 두 지점 간의 거리 계산 (단위: km)\r\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\r\n    const toRadians = (degree) => degree * (Math.PI / 180);\r\n    const R = 6371; // 지구 반지름 (km)\r\n    const dLat = toRadians(lat2 - lat1);\r\n    const dLon = toRadians(lon2 - lon1);\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(toRadians(lat1)) *\r\n        Math.cos(toRadians(lat2)) *\r\n        Math.sin(dLon / 2) *\r\n        Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c;\r\n  };\r\n\r\n  // 컴포넌트 마운트 시 사용자 위치 요청\r\n  useEffect(() => {\r\n    getCurrentPosition()\r\n      .then((position) => {\r\n        const { latitude, longitude } = position.coords;\r\n        setUserLocation({ latitude, longitude });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"사용자 위치를 가져오지 못했습니다.\", error);\r\n      });\r\n  }, []);\r\n\r\n  // Kakao 지도 스크립트 로딩\r\n  useEffect(() => {\r\n    if (scriptLoaded) return;\r\n    const script = document.createElement(\"script\");\r\n    script.src = `//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAO_MAP_API_KEY_2}&libraries=services&autoload=false`;\r\n    script.async = true;\r\n    script.onload = () => {\r\n      if (window.kakao) {\r\n        kakao.maps.load(() => {\r\n          const container = document.getElementById(\"map\");\r\n          const options = {\r\n            center: new kakao.maps.LatLng(36.5, 127.5),\r\n            level: 13,\r\n          };\r\n          const newMap = new kakao.maps.Map(container, options);\r\n          setMap(newMap);\r\n        });\r\n      } else {\r\n        console.error(\"Kakao map API did not load correctly.\");\r\n      }\r\n    };\r\n    document.body.appendChild(script);\r\n    setScriptLoaded(true);\r\n  }, [scriptLoaded]);\r\n\r\n  // 맵이 준비된 후 영화관 데이터 로드\r\n  useEffect(() => {\r\n    if (!map) return;\r\n    loadCinemas();\r\n  }, [map]);\r\n\r\n  // 사용자 위치 업데이트 시 오버레이 갱신 (거리 표기 업데이트)\r\n  useEffect(() => {\r\n    if (map && cinemas.length > 0 && userLocation) {\r\n      clearMarkers();\r\n      plotMarkers(cinemas);\r\n    }\r\n  }, [userLocation]);\r\n\r\n  // 지도 zoom 레벨 변화에 따라 오버레이 표시 제어 (zoom level 10 이하일 때만 오버레이 표시)\r\n  useEffect(() => {\r\n    if (!map) return;\r\n    const zoomListener = () => {\r\n      const level = map.getLevel();\r\n      overlays.forEach((overlay) => {\r\n        overlay.setMap(level <= 10 ? map : null);\r\n      });\r\n    };\r\n    kakao.maps.event.addListener(map, \"zoom_changed\", zoomListener);\r\n    return () => {\r\n      kakao.maps.event.removeListener(map, \"zoom_changed\", zoomListener);\r\n    };\r\n  }, [map, overlays]);\r\n\r\n  // 영화관 데이터 로드\r\n  const loadCinemas = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await axios.get(\"http://43.201.20.172:8090/api/cinemas\");\r\n      const cinemaData = res.data;\r\n      setCinemas(cinemaData);\r\n      setAllCinemas(cinemaData);\r\n      clearMarkers();\r\n      plotMarkers(cinemaData);\r\n      map.setCenter(new kakao.maps.LatLng(36.5, 127.5));\r\n      map.setLevel(13);\r\n    } catch (error) {\r\n      console.error(\"Failed to load cinemas:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 근처 영화관 찾기 (거리순 정렬)\r\n  const findNearbyCinemas = async () => {\r\n    if (!map) return;\r\n    setLoading(true);\r\n    try {\r\n      const position = await getCurrentPosition();\r\n      const { latitude, longitude } = position.coords;\r\n      setUserLocation({ latitude, longitude });\r\n\r\n      const res = await axios.get(\r\n        `http://43.201.20.172:8090/api/cinemas/nearby?lat=${latitude}&lon=${longitude}`\r\n      );\r\n      let nearbyCinemaData = res.data;\r\n      // 사용자 위치 기준으로 가까운 순 정렬\r\n      nearbyCinemaData.sort((a, b) =>\r\n        calculateDistance(latitude, longitude, a.lat, a.lon) -\r\n        calculateDistance(latitude, longitude, b.lat, b.lon)\r\n      );\r\n      setCinemas(nearbyCinemaData);\r\n      setAllCinemas(nearbyCinemaData);\r\n      clearMarkers();\r\n      plotMarkers(nearbyCinemaData);\r\n      map.setCenter(new kakao.maps.LatLng(latitude, longitude));\r\n      map.setLevel(8);\r\n    } catch (error) {\r\n      console.error(\"Failed to load nearby cinemas:\", error);\r\n      if (error.message === \"Geolocation is not supported by this browser.\") {\r\n        alert(\"Geolocation is not supported by this browser.\");\r\n      } else if (error.message === \"User denied Geolocation permission\") {\r\n        alert(\"User denied Geolocation permission.\");\r\n      } else {\r\n        alert(\"Failed to load nearby cinemas.\");\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // getCurrentPosition을 Promise로 래핑\r\n  const getCurrentPosition = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error(\"Geolocation is not supported by this browser.\"));\r\n      }\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => resolve(position),\r\n        (error) => {\r\n          if (error.code === error.PERMISSION_DENIED) {\r\n            reject(new Error(\"User denied Geolocation permission\"));\r\n          } else {\r\n            reject(new Error(\"Geolocation error\"));\r\n          }\r\n        },\r\n        {\r\n          enableHighAccuracy: true,\r\n          timeout: 10000,\r\n          maximumAge: 0,\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  // 내 위치 찾기 (내 위치 업데이트)\r\n  const findMyLocation = () => {\r\n    if (!map) return;\r\n    setLoading(true);\r\n    getCurrentPosition()\r\n      .then((position) => {\r\n        const { latitude, longitude } = position.coords;\r\n        setUserLocation({ latitude, longitude });\r\n        const latlng = new kakao.maps.LatLng(latitude, longitude);\r\n        map.setCenter(latlng);\r\n        map.setLevel(6);\r\n        console.log(`내 위치: 위도 ${latitude}, 경도 ${longitude}`);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"위치 정보를 가져오는 데 실패했습니다.\", error);\r\n        if (error.message === \"Geolocation is not supported by this browser.\") {\r\n          alert(\"Geolocation is not supported by this browser.\");\r\n        } else if (error.message === \"User denied Geolocation permission\") {\r\n          alert(\"User denied Geolocation permission.\");\r\n        } else {\r\n          alert(\"Failed to load My Location.\");\r\n        }\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  // 마커 및 커스텀 오버레이 표시 (마커 클릭 이벤트 제거)\r\n  const plotMarkers = (cinemaList) => {\r\n    if (!map) return;\r\n    const newMarkers = [];\r\n    const newOverlays = [];\r\n\r\n    cinemaList.forEach(({ lat, lon, cinemaName, address }) => {\r\n      const markerPosition = new kakao.maps.LatLng(lat, lon);\r\n      const marker = new kakao.maps.Marker({\r\n        map,\r\n        position: markerPosition,\r\n        title: cinemaName,\r\n      });\r\n      newMarkers.push(marker);\r\n\r\n      // 오버레이 내용: 영화관 이름, 주소, 사용자 위치 기준 거리 (userLocation이 있을 경우)\r\n      let overlayContent = `<div style=\"padding:5px; background:#fff; border:1px solid #ccc; font-size:12px;\">\r\n        <strong>${cinemaName} Frame In</strong><br/>\r\n        ${address}<br/>`;\r\n      if (userLocation) {\r\n        overlayContent += `${calculateDistance(\r\n          userLocation.latitude,\r\n          userLocation.longitude,\r\n          lat,\r\n          lon\r\n        ).toFixed(2)} km`;\r\n      }\r\n      overlayContent += `</div>`;\r\n\r\n      const customOverlay = new kakao.maps.CustomOverlay({\r\n        position: markerPosition,\r\n        content: overlayContent,\r\n        yAnchor: 1.5,\r\n      });\r\n      // 현재 zoom 레벨이 5 이하일 때만 오버레이 표시\r\n      if (map.getLevel() <= 10) {\r\n        customOverlay.setMap(map);\r\n      }\r\n      newOverlays.push(customOverlay);\r\n    });\r\n\r\n    setMarkers(newMarkers);\r\n    setOverlays(newOverlays);\r\n  };\r\n\r\n  // 기존 마커와 오버레이 제거\r\n  const clearMarkers = () => {\r\n    markers.forEach((marker) => marker.setMap(null));\r\n    overlays.forEach((overlay) => overlay.setMap(null));\r\n    setMarkers([]);\r\n    setOverlays([]);\r\n  };\r\n\r\n  // 리스트 클릭 시 해당 위치로 이동\r\n  const handleCinemaClick = (lat, lon) => {\r\n    if (map) {\r\n      const moveLatLon = new kakao.maps.LatLng(parseFloat(lat), parseFloat(lon));\r\n      map.panTo(moveLatLon);\r\n      setTimeout(() => {\r\n        map.setLevel(3);\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  // 사용자 위치가 있을 경우, 전체 영화관 목록을 내 위치 기준 가까운 순으로 정렬\r\n  const sortedCinemas = userLocation\r\n    ? [...allCinemas].sort(\r\n        (a, b) =>\r\n          calculateDistance(userLocation.latitude, userLocation.longitude, a.lat, a.lon) -\r\n          calculateDistance(userLocation.latitude, userLocation.longitude, b.lat, b.lon)\r\n      )\r\n    : allCinemas;\r\n\r\n  return (\r\n    <div className=\"map-container\">\r\n      <div className=\"map-buttons\">\r\n      <button onClick={findNearbyCinemas} disabled={loading}>\r\n        내 주변 영화관 찾기 🎞\r\n      </button>\r\n      <button onClick={findMyLocation} disabled={loading}>\r\n        내 위치 찾기 📍\r\n      </button>\r\n      </div>\r\n\r\n      {loading && <div>Loading...</div>}\r\n\r\n      <div id=\"map\" style={{ width: \"100%\", height: \"400px\", marginTop: \"10px\" }}></div>\r\n\r\n      {/* 전체 영화관 목록 (거리 표시 포함 및 내 위치 기준 가까운 순 정렬) */}\r\n      {sortedCinemas.length > 0 && (\r\n        <div\r\n          className=\"map-list\"\r\n        >\r\n          <h3>🗺️ 전체 영화관 목록\r\n          </h3>\r\n          <ul>\r\n            {sortedCinemas.map((cinema, index) => (\r\n              <li\r\n                key={index}\r\n                onClick={() => handleCinemaClick(cinema.lat, cinema.lon)}\r\n              >\r\n                <strong>{cinema.cinemaName} Frame In</strong>\r\n                <span>📍 {cinema.address}</span>\r\n                {userLocation && (\r\n                  <div style={{ fontSize: \"12px\", color: \"#888\" }}>\r\n                    {calculateDistance(\r\n                      userLocation.latitude,\r\n                      userLocation.longitude,\r\n                      cinema.lat,\r\n                      cinema.lon\r\n                    ).toFixed(2)}{\" \"}\r\n                    km\r\n                  </div>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","// src/pages/MoviesPage.js\r\nimport React from \"react\";\r\nimport Header from \"../../components/Header\";\r\nimport Footer from \"../../components/Footer\";\r\nimport Map from \"../../components/map/Map\";\r\n\r\nconst MapPage = () => {\r\n  return (\r\n    <div>\r\n      <Map />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;\r\n","import React from \"react\";\r\nimport \"../css/Footer.css\"; // CSS 파일 임포트\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <p>어벤저스 팀</p>  \r\n      <p>서울특별시 노원구 상계동 340-6</p>\r\n      <p>대표이메일:ex@example.com</p>\r\n      <p>© Movie. All Rights Reserved</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n"],"names":["Header","_ref","_loginState$roleNames","_loginState$roleNames2","isDarkMode","setIsDarkMode","isMemberInfoActive","setIsMemberInfoActive","dispatch","useDispatch","navigate","useNavigate","memberInfoRef","useRef","memberNameRef","loginState","useSelector","state","loginSlice","isLoggedIn","email","searchQuery","setSearchQuery","useState","isNavOpen","setIsNavOpen","isMobile","setIsMobile","window","innerWidth","handleLogout","logout","alert","replace","location","reload","memberInfoOnClick","closeNav","useEffect","handleClickOutside","event","current","document","querySelector","contains","target","adjustFontSize","span","parentWidth","parentElement","offsetWidth","spanWidth","fontSize","Math","floor","style","handleResize","addEventListener","removeEventListener","nickname","handleSearch","e","type","key","trim","isChosung","text","test","queryToUse","Hangul","searchType","encodeURIComponent","renderMemberInfo","_jsxs","className","ref","onClick","children","_jsx","src","alt","_Fragment","Link","to","id","roleNames","includes","name","placeholder","value","onChange","onKeyDown","prev","role","tabIndex","onKeyPress","toggleNav","Map","map","setMap","cinemas","setCinemas","markers","setMarkers","overlays","setOverlays","scriptLoaded","setScriptLoaded","allCinemas","setAllCinemas","loading","setLoading","userLocation","setUserLocation","calculateDistance","lat1","lon1","lat2","lon2","toRadians","degree","PI","dLat","dLon","a","sin","cos","atan2","sqrt","getCurrentPosition","then","position","latitude","longitude","coords","catch","error","console","script","createElement","async","onload","kakao","maps","load","container","getElementById","options","center","LatLng","level","newMap","body","appendChild","loadCinemas","length","clearMarkers","plotMarkers","zoomListener","getLevel","forEach","overlay","addListener","removeListener","cinemaData","axios","get","data","setCenter","setLevel","Promise","resolve","reject","navigator","geolocation","Error","code","PERMISSION_DENIED","enableHighAccuracy","timeout","maximumAge","cinemaList","newMarkers","newOverlays","lat","lon","cinemaName","address","markerPosition","marker","Marker","title","push","overlayContent","toFixed","customOverlay","CustomOverlay","content","yAnchor","sortedCinemas","sort","b","nearbyCinemaData","message","disabled","findMyLocation","latlng","log","finally","width","height","marginTop","cinema","index","handleCinemaClick","moveLatLon","parseFloat","panTo","setTimeout","color","MapPage","Footer"],"sourceRoot":""}